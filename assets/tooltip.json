{
    "show": {
        "desc": "是否显示提示框组件。\n\n包括提示框浮层和 [axisPointer][0]。\n\n\n\n[0]: #tooltip.axisPointer",
        "uiControl": {
            "type": "boolean",
            "default": "true"
        }
    },
    "trigger": {
        "desc": "\n\n<p>触发类型。</p>\n<p>可选：</p>\n<ul>\n<li><p><code class=\"codespan\">&#39;item&#39;</code></p>\n<p>  数据项图形触发，主要在散点图，饼图等无类目轴的图表中使用。</p>\n</li>\n<li><p><code class=\"codespan\">&#39;axis&#39;</code></p>\n<p>  坐标轴触发，主要在柱状图，折线图等会使用类目轴的图表中使用。</p>\n<p>  在 ECharts 2.x 中只支持类目轴上使用 axis trigger，在 ECharts 3 中支持在<a href=\"#grid\">直角坐标系</a>和<a href=\"#polar\">极坐标系</a>上的所有类型的轴。并且可以通过 <a href=\"#tooltip.axisPointer.axis\">axisPointer.axis</a> 指定坐标轴。</p>\n</li>\n<li><p><code class=\"codespan\">&#39;none&#39;</code></p>\n<p>  什么都不触发。</p>\n</li>\n</ul>\n",
        "uiControl": {
            "type": "enum",
            "options": "item,axis,none",
            "default": "item"
        }
    },
    "axisPointer": {
        "desc": "坐标轴指示器配置项。\n\ntooltip.axisPointer 是配置坐标轴指示器的快捷方式。实际上坐标轴指示器的全部功能，都可以通过轴上的 axisPointer 配置项完成（例如 [xAxis.axisPointer][0] 或 [angleAxis.axisPointer][1]）。但是使用 tooltip.axisPointer 在简单场景下会更方便一些。\n\n**> 注意：**> tooltip.axisPointer>  中诸配置项的优先级低于轴上的 axisPointer 的配置项。\n\n- - -\n\n坐标轴指示器是指示坐标轴当前刻度的工具。\n\n如下例，鼠标悬浮到图上，可以出现标线和刻度文本。\n\n上例中，使用了 [axisPointer.link][2] 来关联不同的坐标系中的 axisPointer。\n\n坐标轴指示器也有适合触屏的交互方式，如下：\n\n坐标轴指示器在多轴的场景能起到辅助作用：\n\n- - -\n\n**> 注意：**>  一般来说，axisPointer 的具体配置项会配置在各个轴中（如 [> xAxis.axisPointer][0]> ）或者 > tooltip>  中（如 [> tooltip.axisPointer][3]> ）。\n\n> 但是这几个选项只能配置在全局的 axisPointer 中：[> axisPointer.triggerOn][4]> 、[> axisPointer.link][2]> 。\n\n- - -\n\n**如何显示 axisPointer：**\n\n直角坐标系 [grid][5]、极坐标系 [polar][6]、单轴坐标系 [single][7] 中的每个轴都自己的 axisPointer。\n\n他们的 axisPointer 默认不显示。有两种方法可以让他们显示：\n\n* 设置轴上的 axisPointer.show（例如 [xAxis.axisPointer.show][8]）为 true，则显示此轴的 axisPointer。\n* 设置 [tooltip.trigger][9] 设置为 &#39;axis&#39; 或者 [tooltip.axisPointer.type][10] 设置为 &#39;cross&#39;，则此时坐标系会自动选择显示哪个轴的 axisPointer，也可以使用 [tooltip.axisPointer.axis][11] 改变这种选择。注意，轴上如果设置了 axisPointer，会覆盖此设置。\n\n- - -\n\n**如何显示 axisPointer 的 label：**\n\naxisPointer 的 label 默认不显示（也就是默认只显示指示线），除非：\n\n* 设置轴上的 axisPointer.label.show（例如 [xAxis.axisPointer.label.show][8]）为 true，则显示此轴的 axisPointer 的 label。\n* 设置 [tooltip.axisPointer.type][10] 为 &#39;cross&#39; 时会自动显示 axisPointer 的 label。\n\n- - -\n\n**关于触屏的 axisPointer 的设置**\n\n设置轴上的 axisPointer.handle.show（例如 [xAxis.axisPointer.handle.show][12] 为 true 则会显示出此 axisPointer 的拖拽按钮。（polar 坐标系暂不支持此功能）。\n\n**注意：** 如果发现此时 tooltip 效果不良好，可设置 [tooltip.triggerOn][13] 为 &#39;none&#39;（于是效果为：手指按住按钮则显示 tooltip，松开按钮则隐藏 tooltip），或者 [tooltip.alwaysShowContent][14] 为 true（效果为 tooltip 一直显示）。\n\n参见[例子][15]。\n\n- - -\n\n**自动吸附到数据（snap）**\n\n对于数值轴、时间轴，如果开启了 [snap][16]，则 axisPointer 会自动吸附到最近的点上。\n\n- - -\n\n\n\n[0]: #xAxis.axisPointer\n[1]: #angleAxis.axisPointer\n[2]: #axisPointer.link\n[3]: #tooltip.axisPointer\n[4]: #axisPointer.triggerOn\n[5]: #grid\n[6]: #polar\n[7]: #single\n[8]: #xAxis.axisPointer.show\n[9]: #tooltip.trigger\n[10]: #tooltip.axisPointer.type\n[11]: #tooltip.axisPointer.axis\n[12]: #xAxis.axisPointer.handle.show\n[13]: #tooltip.triggerOn\n[14]: #tooltip.alwaysShowContent\n[15]: https://echarts.apache.org/examples/zh/editor.html?c=line-tooltip-touch&amp;edit=1&amp;reset=1\n[16]: #xAxis.axisPointer.snap"
    },
    "axisPointer.type": {
        "desc": "指示器类型。\n\n可选\n\n* &#39;line&#39; 直线指示器\n* &#39;shadow&#39; 阴影指示器\n* &#39;none&#39; 无指示器\n* &#39;cross&#39; 十字准星指示器。其实是种简写，表示启用两个正交的轴的 axisPointer。\n\n",
        "uiControl": {
            "type": "enum",
            "options": "none,line,shadow,cross",
            "default": "line"
        }
    },
    "axisPointer.axis": {
        "desc": "指示器的坐标轴。\n\n默认情况，坐标系会自动选择显示哪个轴的 axisPointer（默认取类目轴或者时间轴）。\n\n可以是 &#39;x&#39;, &#39;y&#39;, &#39;radius&#39;, &#39;angle&#39;。\n\n"
    },
    "axisPointer.snap": {
        "desc": "坐标轴指示器是否自动吸附到点上。默认自动判断。\n\n这个功能在数值轴和时间轴上比较有意义，可以自动寻找细小的数值点。\n\n"
    },
    "axisPointer.z": {
        "desc": "坐标轴指示器的 z 值。控制图形的前后顺序。z值小的图形会被z值大的图形覆盖。\n\n"
    },
    "axisPointer.label": {
        "desc": "坐标轴指示器的文本标签。\n\n"
    },
    "axisPointer.label.show": {
        "desc": "是否显示文本标签。如果 [tooltip.axisPointer.type][0] 设置为 &#39;cross&#39; 则默认显示标签，否则默认不显示。\n\n\n\n[0]: #tooltip.axisPointer.type"
    },
    "axisPointer.label.precision": {
        "desc": "文本标签中数值的小数点精度。默认根据当前轴的值自动判断。也可以指定如 2 表示保留两位小数。\n\n"
    },
    "axisPointer.label.formatter": {
        "desc": "文本标签文字的格式化器。\n\n如果为 string，可以是例如：formatter: &#39;some text {value} some text，其中 {value} 会被自动替换为轴的值。\n\n如果为 function，可以是例如：\n\n**参数：**\n\n{Object} params: 含有：\n\n{Object} params.value: 轴当前值，如果 axis.type 为 &#39;category&#39; 时，其值为 axis.data 里的数值。如果 axis.type 为 &#39;time&#39;，其值为时间戳。\n\n{Array.&lt;Object&gt;} params.seriesData: 一个数组，是当前 axisPointer 最近的点的信息，每项内容为\n\n{string} params.axisDimension: 轴的维度名，例如直角坐标系中是 &#39;x&#39;、&#39;y&#39;，极坐标系中是 &#39;radius&#39;、&#39;angle&#39;。\n\n{number} params.axisIndex: 轴的 index，0、1、2、...\n\n    {\n        componentType: &#39;series&#39;,\n        // 系列类型\n        seriesType: string,\n        // 系列在传入的 option.series 中的 index\n        seriesIndex: number,\n        // 系列名称\n        seriesName: string,\n        // 数据名，类目名\n        name: string,\n        // 数据在传入的 data 数组中的 index\n        dataIndex: number,\n        // 传入的原始数据项\n        data: Object,\n        // 传入的数据值。在多数系列下它和 data 相同。在一些系列下是 data 中的分量（如 map、radar 中）\n        value: number|Array|Object,\n        // 坐标轴 encode 映射信息，\n        // key 为坐标轴（如 &#39;x&#39; &#39;y&#39; &#39;radius&#39; &#39;angle&#39; 等）\n        // value 必然为数组，不会为 null/undefied，表示 dimension index 。\n        // 其内容如：\n        // {\n        //     x: [2] // dimension index 为 2 的数据映射到 x 轴\n        //     y: [0] // dimension index 为 0 的数据映射到 y 轴\n        // }\n        encode: Object,\n        // 维度名列表\n        dimensionNames: Array&lt;String&gt;,\n        // 数据的维度 index，如 0 或 1 或 2 ...\n        // 仅在雷达图中使用。\n        dimensionIndex: number,\n        // 数据图形的颜色\n        color: string,\n    \n    \n    \n    }\n    \n\n注：encode 和 dimensionNames 的使用方式，例如：\n\n如果数据为：\n\n    dataset: {\n        source: [\n            [&#39;Matcha Latte&#39;, 43.3, 85.8, 93.7],\n            [&#39;Milk Tea&#39;, 83.1, 73.4, 55.1],\n            [&#39;Cheese Cocoa&#39;, 86.4, 65.2, 82.5],\n            [&#39;Walnut Brownie&#39;, 72.4, 53.9, 39.1]\n        ]\n    }\n    \n\n则可这样得到 y 轴对应的 value：\n\n    params.value[params.encode.y[0]]\n    \n\n如果数据为：\n\n    dataset: {\n        dimensions: [&#39;product&#39;, &#39;2015&#39;, &#39;2016&#39;, &#39;2017&#39;],\n        source: [\n            {product: &#39;Matcha Latte&#39;, &#39;2015&#39;: 43.3, &#39;2016&#39;: 85.8, &#39;2017&#39;: 93.7},\n            {product: &#39;Milk Tea&#39;, &#39;2015&#39;: 83.1, &#39;2016&#39;: 73.4, &#39;2017&#39;: 55.1},\n            {product: &#39;Cheese Cocoa&#39;, &#39;2015&#39;: 86.4, &#39;2016&#39;: 65.2, &#39;2017&#39;: 82.5},\n            {product: &#39;Walnut Brownie&#39;, &#39;2015&#39;: 72.4, &#39;2016&#39;: 53.9, &#39;2017&#39;: 39.1}\n        ]\n    }\n    \n\n则可这样得到 y 轴对应的 value：\n\n    params.value[params.dimensionNames[params.encode.y[0]]]\n    \n\n每项内容还包括轴的信息：\n\n    {\n        axisDim: &#39;x&#39;, // &#39;x&#39;, &#39;y&#39;, &#39;angle&#39;, &#39;radius&#39;, &#39;single&#39;\n        axisId: &#39;xxx&#39;,\n        axisName: &#39;xxx&#39;,\n        axisIndex: 3,\n        axisValue: 121, // 当前 axisPointer 对应的 value。\n        axisValueLabel: &#39;文本&#39;\n    }\n    \n\n**返回值：**\n\n显示的 string。\n\n例如：\n\n    formatter: function (params) {\n        // 假设此轴的 type 为 &#39;time&#39;。\n        return &#39;some text&#39; + echarts.format.formatTime(params.value);\n    }\n    \n\n"
    },
    "axisPointer.label.margin": {
        "desc": "label 距离轴的距离。\n\n"
    },
    "axisPointer.label.color": {
        "desc": "文字的颜色。\n\n",
        "uiControl": {
            "type": "color",
            "default": "'#fff'"
        }
    },
    "axisPointer.label.fontStyle": {
        "desc": "文字字体的风格。\n\n可选：\n\n* &#39;normal&#39;\n* &#39;italic&#39;\n* &#39;oblique&#39;\n\n",
        "uiControl": {
            "type": "enum",
            "default": "normal",
            "options": "normal,italic,oblique"
        }
    },
    "axisPointer.label.fontWeight": {
        "desc": "文字字体的粗细。\n\n可选：\n\n* &#39;normal&#39;\n* &#39;bold&#39;\n* &#39;bolder&#39;\n* &#39;lighter&#39;\n* 100 | 200 | 300 | 400...\n\n",
        "uiControl": {
            "type": "enum",
            "default": "normal",
            "options": "normal,bold,bolder,lighter"
        }
    },
    "axisPointer.label.fontFamily": {
        "desc": "文字的字体系列。\n\n还可以是 &#39;serif&#39; , &#39;monospace&#39;, &#39;Arial&#39;, &#39;Courier New&#39;, &#39;Microsoft YaHei&#39;, ...\n\n",
        "uiControl": {
            "type": "enum",
            "default": "sans-serif",
            "options": "sans-serif,serif,monospace,Arial,Courier New"
        }
    },
    "axisPointer.label.fontSize": {
        "desc": "文字的字体大小。\n\n",
        "uiControl": {
            "type": "number",
            "default": "12",
            "min": "1",
            "step": "1"
        }
    },
    "axisPointer.label.lineHeight": {
        "desc": "行高。\n\nrich 中如果没有设置 lineHeight，则会取父层级的 lineHeight。例如：\n\n    {\n        lineHeight: 56,\n        rich: {\n            a: {\n                // 没有设置 `lineHeight`，则 `lineHeight` 为 56\n            }\n        }\n    }\n    \n\n",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "12"
        }
    },
    "axisPointer.label.width": {
        "desc": "文本显示宽度。\n\n",
        "uiControl": {
            "type": "number",
            "default": "100",
            "min": "1",
            "max": "500",
            "step": "1"
        }
    },
    "axisPointer.label.height": {
        "desc": "文本显示高度。\n\n",
        "uiControl": {
            "type": "number",
            "default": "50",
            "min": "1",
            "max": "500",
            "step": "1"
        }
    },
    "axisPointer.label.textBorderColor": {
        "desc": "文字本身的描边颜色。\n\n",
        "uiControl": {
            "type": "color"
        }
    },
    "axisPointer.label.textBorderWidth": {
        "desc": "文字本身的描边宽度。\n\n",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5"
        }
    },
    "axisPointer.label.textBorderType": {
        "desc": "文字本身的描边类型。\n\n可选：\n\n* &#39;solid&#39;\n* &#39;dashed&#39;\n* &#39;dotted&#39;\n\n自 v5.0.0 开始，也可以是 number 或者 number 数组，用以指定线条的 [dash array][0]，配合 textBorderDashOffset 可实现更灵活的虚线效果。\n\n例如：\n\n    {\n        textBorderType: [5, 10],\n        textBorderDashOffset: 5\n    }\n    \n\n\n\n[0]: https://developer.mozilla.org/zh-CN/docs/Web/SVG/Attribute/stroke-dasharray",
        "uiControl": {
            "type": "enum",
            "default": "solid",
            "options": "solid,dashed,dotted"
        }
    },
    "axisPointer.label.textBorderDashOffset": {
        "desc": "> 从 > v5.0.0>  开始支持\n\n用于设置虚线的偏移量，可搭配 textBorderType 指定 dash array 实现灵活的虚线效果。\n\n更多详情可以参考 MDN [lineDashOffset][0]。\n\n\n\n[0]: https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/lineDashOffset",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "axisPointer.label.textShadowColor": {
        "desc": "文字本身的阴影颜色。\n\n",
        "uiControl": {
            "type": "color",
            "default": "#000"
        }
    },
    "axisPointer.label.textShadowBlur": {
        "desc": "文字本身的阴影长度。\n\n",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5"
        }
    },
    "axisPointer.label.textShadowOffsetX": {
        "desc": "文字本身的阴影 X 偏移。\n\n",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "axisPointer.label.textShadowOffsetY": {
        "desc": "文字本身的阴影 Y 偏移。\n\n",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "axisPointer.label.overflow": {
        "desc": "文字超出宽度是否截断或者换行。配置width时有效\n\n* &#39;truncate&#39; 截断，并在末尾显示ellipsis配置的文本，默认为...\n* &#39;break&#39; 换行\n* &#39;breakAll&#39; 换行，跟&#39;break&#39;不同的是，在英语等拉丁文中，&#39;breakAll&#39;还会强制单词内换行\n\n",
        "uiControl": {
            "type": "enum",
            "options": "truncate,break,breakAll"
        }
    },
    "axisPointer.label.ellipsis": {
        "desc": "在overflow配置为&#39;truncate&#39;的时候，可以通过该属性配置末尾显示的文本。\n\n"
    },
    "axisPointer.label.lineOverflow": {
        "desc": "文本超出高度部分是否截断，配置height时有效。\n\n* &#39;truncate&#39; 在文本行数超出高度部分截断。\n\n"
    },
    "axisPointer.label.padding": {
        "desc": "axisPointer内边距，单位px，默认各方向内边距为5，接受数组分别设定上右下左边距。\n\n使用示例：\n\n    // 设置内边距为 5\n    padding: 5\n    // 设置上下的内边距为 5，左右的内边距为 10\n    padding: [5, 10]\n    // 分别设置四个方向的内边距\n    padding: [\n        5,  // 上\n        10, // 右\n        5,  // 下\n        10, // 左\n    ]\n    \n\n",
        "uiControl": {
            "type": "vector",
            "min": "0",
            "dims": "T,R,B,L"
        }
    },
    "axisPointer.label.backgroundColor": {
        "desc": "文本标签的背景颜色，默认是和 [axis.axisLine.lineStyle.color][0] 相同。\n\n\n\n[0]: #xAxis.axisLine.lineStyle.color"
    },
    "axisPointer.label.borderColor": {
        "desc": "文本标签的边框颜色。\n\n"
    },
    "axisPointer.label.borderWidth": {
        "desc": "文本标签的边框宽度。\n\n"
    },
    "axisPointer.label.shadowBlur": {
        "desc": "图形阴影的模糊大小。该属性配合 shadowColor,shadowOffsetX, shadowOffsetY 一起设置图形的阴影效果。\n\n示例：\n\n    {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n    \n\n",
        "uiControl": {
            "type": "number",
            "default": "3",
            "min": "0",
            "step": "0.5"
        }
    },
    "axisPointer.label.shadowColor": {
        "desc": "阴影颜色。支持的格式同color。\n\n",
        "uiControl": {
            "type": "color",
            "default": "#aaa"
        }
    },
    "axisPointer.label.shadowOffsetX": {
        "desc": "阴影水平方向上的偏移距离。\n\n",
        "uiControl": {
            "type": "number",
            "default": "0",
            "step": "0.5"
        }
    },
    "axisPointer.label.shadowOffsetY": {
        "desc": "阴影垂直方向上的偏移距离。\n\n",
        "uiControl": {
            "type": "number",
            "default": "0",
            "step": "0.5"
        }
    },
    "axisPointer.lineStyle": {
        "desc": "[axisPointer.type][0] 为 &#39;line&#39; 时有效。\n\n\n\n[0]: #tooltip.axisPointer.type"
    },
    "axisPointer.lineStyle.color": {
        "desc": "线的颜色。\n\n> 颜色可以使用 RGB 表示，比如 > &#39;rgb(128, 128, 128)&#39;> ，如果想要加上 alpha 通道表示不透明度，可以使用 RGBA，比如 > &#39;rgba(128, 128, 128, 0.5)&#39;> ，也可以使用十六进制格式，比如 > &#39;#ccc&#39;> 。除了纯色之外颜色也支持渐变色和纹理填充\n\n    > // 线性渐变，前四个参数分别是 x0, y0, x2, y2, 范围从 0 - 1，相当于在图形包围盒中的百分比，如果 globalCoord 为 `true`，则该四个值是绝对的像素位置\n    color: {\n        type: &#39;linear&#39;,\n        x: 0,\n        y: 0,\n        x2: 0,\n        y2: 1,\n        colorStops: [{\n            offset: 0, color: &#39;red&#39; // 0% 处的颜色\n        }, {\n            offset: 1, color: &#39;blue&#39; // 100% 处的颜色\n        }],\n        global: false // 缺省为 false\n    }\n    // 径向渐变，前三个参数分别是圆心 x, y 和半径，取值同线性渐变\n    color: {\n        type: &#39;radial&#39;,\n        x: 0.5,\n        y: 0.5,\n        r: 0.5,\n        colorStops: [{\n            offset: 0, color: &#39;red&#39; // 0% 处的颜色\n        }, {\n            offset: 1, color: &#39;blue&#39; // 100% 处的颜色\n        }],\n        global: false // 缺省为 false\n    }\n    // 纹理填充\n    color: {\n        image: imageDom, // 支持为 HTMLImageElement, HTMLCanvasElement，不支持路径字符串\n        repeat: &#39;repeat&#39; // 是否平铺，可以是 &#39;repeat-x&#39;, &#39;repeat-y&#39;, &#39;no-repeat&#39;\n    }\n    \n\n",
        "uiControl": {
            "type": "color"
        }
    },
    "axisPointer.lineStyle.width": {
        "desc": "线宽。\n\n",
        "uiControl": {
            "type": "number",
            "value": "1",
            "min": "0",
            "step": "0.5"
        }
    },
    "axisPointer.lineStyle.type": {
        "desc": "线的类型。\n\n可选：\n\n* &#39;solid&#39;\n* &#39;dashed&#39;\n* &#39;dotted&#39;\n\n自 v5.0.0 开始，也可以是 number 或者 number 数组，用以指定线条的 [dash array][0]，配合 dashOffset 可实现更灵活的虚线效果。\n\n例如：\n\n    {\n        type: [5, 10],\n        dashOffset: 5\n    }\n    \n\n\n\n[0]: https://developer.mozilla.org/zh-CN/docs/Web/SVG/Attribute/stroke-dasharray",
        "uiControl": {
            "type": "enum",
            "default": "solid",
            "options": "solid,dashed,dotted"
        }
    },
    "axisPointer.lineStyle.dashOffset": {
        "desc": "> 从 > v5.0.0>  开始支持\n\n用于设置虚线的偏移量，可搭配 type 指定 dash array 实现灵活的虚线效果。\n\n更多详情可以参考 MDN [lineDashOffset][0]。\n\n\n\n[0]: https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/lineDashOffset",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "axisPointer.lineStyle.cap": {
        "desc": "> 从 > v5.0.0>  开始支持\n\n用于指定线段末端的绘制方式，可以是：\n\n* &#39;butt&#39;: 线段末端以方形结束。\n* &#39;round&#39;: 线段末端以圆形结束。\n* &#39;square&#39;: 线段末端以方形结束，但是增加了一个宽度和线段相同，高度是线段厚度一半的矩形区域。\n\n默认值为 &#39;butt&#39;。 更多详情可以参考 MDN [lineCap][0]。\n\n\n\n[0]: https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/lineCap",
        "uiControl": {
            "type": "enum",
            "default": "butt",
            "options": "butt,round,square"
        }
    },
    "axisPointer.lineStyle.join": {
        "desc": "> 从 > v5.0.0>  开始支持\n\n用于设置2个长度不为0的相连部分（线段，圆弧，曲线）如何连接在一起的属性（长度为0的变形部分，其指定的末端和控制点在同一位置，会被忽略）。\n\n可以是：\n\n* &#39;bevel&#39;: 在相连部分的末端填充一个额外的以三角形为底的区域， 每个部分都有各自独立的矩形拐角。\n* &#39;round&#39;: 通过填充一个额外的，圆心在相连部分末端的扇形，绘制拐角的形状。 圆角的半径是线段的宽度。\n* &#39;miter&#39;: 通过延伸相连部分的外边缘，使其相交于一点，形成一个额外的菱形区域。这个设置可以通过 miterLimit 属性看到效果。\n\n默认值为 &#39;bevel&#39;。 更多详情可以参考 MDN [lineJoin][0]。\n\n\n\n[0]: https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/lineJoin",
        "uiControl": {
            "type": "enum",
            "default": "bevel",
            "options": "bevel,round,miter"
        }
    },
    "axisPointer.lineStyle.miterLimit": {
        "desc": "> 从 > v5.0.0>  开始支持\n\n用于设置斜接面限制比例。只有当 join 为 miter 时， miterLimit 才有效。\n\n默认值为 10。负数、0、Infinity 和 NaN 均会被忽略。\n\n更多详情可以参考 MDN [miterLimit][0]。\n\n\n\n[0]: https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/miterLimit",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "10"
        }
    },
    "axisPointer.lineStyle.shadowBlur": {
        "desc": "图形阴影的模糊大小。该属性配合 shadowColor,shadowOffsetX, shadowOffsetY 一起设置图形的阴影效果。\n\n示例：\n\n    {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n    \n\n",
        "uiControl": {
            "type": "number",
            "default": "",
            "min": "0",
            "step": "0.5"
        }
    },
    "axisPointer.lineStyle.shadowColor": {
        "desc": "阴影颜色。支持的格式同color。\n\n",
        "uiControl": {
            "type": "color",
            "default": ""
        }
    },
    "axisPointer.lineStyle.shadowOffsetX": {
        "desc": "阴影水平方向上的偏移距离。\n\n",
        "uiControl": {
            "type": "number",
            "default": "0",
            "step": "0.5"
        }
    },
    "axisPointer.lineStyle.shadowOffsetY": {
        "desc": "阴影垂直方向上的偏移距离。\n\n",
        "uiControl": {
            "type": "number",
            "default": "0",
            "step": "0.5"
        }
    },
    "axisPointer.lineStyle.opacity": {
        "desc": "图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。\n\n",
        "uiControl": {
            "type": "number",
            "default": "1",
            "min": "0",
            "max": "1",
            "step": "0.01"
        }
    },
    "axisPointer.shadowStyle": {
        "desc": "[axisPointer.type][0] 为 &#39;shadow&#39; 时有效。\n\n\n\n[0]: #tooltip.axisPointer.type"
    },
    "axisPointer.shadowStyle.color": {
        "desc": "填充的颜色。\n\n> 颜色可以使用 RGB 表示，比如 > &#39;rgb(128, 128, 128)&#39;> ，如果想要加上 alpha 通道表示不透明度，可以使用 RGBA，比如 > &#39;rgba(128, 128, 128, 0.5)&#39;> ，也可以使用十六进制格式，比如 > &#39;#ccc&#39;> 。除了纯色之外颜色也支持渐变色和纹理填充\n\n    > // 线性渐变，前四个参数分别是 x0, y0, x2, y2, 范围从 0 - 1，相当于在图形包围盒中的百分比，如果 globalCoord 为 `true`，则该四个值是绝对的像素位置\n    color: {\n        type: &#39;linear&#39;,\n        x: 0,\n        y: 0,\n        x2: 0,\n        y2: 1,\n        colorStops: [{\n            offset: 0, color: &#39;red&#39; // 0% 处的颜色\n        }, {\n            offset: 1, color: &#39;blue&#39; // 100% 处的颜色\n        }],\n        global: false // 缺省为 false\n    }\n    // 径向渐变，前三个参数分别是圆心 x, y 和半径，取值同线性渐变\n    color: {\n        type: &#39;radial&#39;,\n        x: 0.5,\n        y: 0.5,\n        r: 0.5,\n        colorStops: [{\n            offset: 0, color: &#39;red&#39; // 0% 处的颜色\n        }, {\n            offset: 1, color: &#39;blue&#39; // 100% 处的颜色\n        }],\n        global: false // 缺省为 false\n    }\n    // 纹理填充\n    color: {\n        image: imageDom, // 支持为 HTMLImageElement, HTMLCanvasElement，不支持路径字符串\n        repeat: &#39;repeat&#39; // 是否平铺，可以是 &#39;repeat-x&#39;, &#39;repeat-y&#39;, &#39;no-repeat&#39;\n    }\n    \n\n",
        "uiControl": {
            "type": "color"
        }
    },
    "axisPointer.shadowStyle.shadowBlur": {
        "desc": "图形阴影的模糊大小。该属性配合 shadowColor,shadowOffsetX, shadowOffsetY 一起设置图形的阴影效果。\n\n示例：\n\n    {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n    \n\n",
        "uiControl": {
            "type": "number",
            "default": "",
            "min": "0",
            "step": "0.5"
        }
    },
    "axisPointer.shadowStyle.shadowColor": {
        "desc": "阴影颜色。支持的格式同color。\n\n",
        "uiControl": {
            "type": "color",
            "default": ""
        }
    },
    "axisPointer.shadowStyle.shadowOffsetX": {
        "desc": "阴影水平方向上的偏移距离。\n\n",
        "uiControl": {
            "type": "number",
            "default": "0",
            "step": "0.5"
        }
    },
    "axisPointer.shadowStyle.shadowOffsetY": {
        "desc": "阴影垂直方向上的偏移距离。\n\n",
        "uiControl": {
            "type": "number",
            "default": "0",
            "step": "0.5"
        }
    },
    "axisPointer.shadowStyle.opacity": {
        "desc": "图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。\n\n",
        "uiControl": {
            "type": "number",
            "default": "1",
            "min": "0",
            "max": "1",
            "step": "0.01"
        }
    },
    "axisPointer.crossStyle": {
        "desc": "[axisPointer.type][0] 为 &#39;cross&#39; 时有效。\n\n\n\n[0]: #tooltip.axisPointer.type"
    },
    "axisPointer.crossStyle.color": {
        "desc": "线的颜色。\n\n> 颜色可以使用 RGB 表示，比如 > &#39;rgb(128, 128, 128)&#39;> ，如果想要加上 alpha 通道表示不透明度，可以使用 RGBA，比如 > &#39;rgba(128, 128, 128, 0.5)&#39;> ，也可以使用十六进制格式，比如 > &#39;#ccc&#39;> 。除了纯色之外颜色也支持渐变色和纹理填充\n\n    > // 线性渐变，前四个参数分别是 x0, y0, x2, y2, 范围从 0 - 1，相当于在图形包围盒中的百分比，如果 globalCoord 为 `true`，则该四个值是绝对的像素位置\n    color: {\n        type: &#39;linear&#39;,\n        x: 0,\n        y: 0,\n        x2: 0,\n        y2: 1,\n        colorStops: [{\n            offset: 0, color: &#39;red&#39; // 0% 处的颜色\n        }, {\n            offset: 1, color: &#39;blue&#39; // 100% 处的颜色\n        }],\n        global: false // 缺省为 false\n    }\n    // 径向渐变，前三个参数分别是圆心 x, y 和半径，取值同线性渐变\n    color: {\n        type: &#39;radial&#39;,\n        x: 0.5,\n        y: 0.5,\n        r: 0.5,\n        colorStops: [{\n            offset: 0, color: &#39;red&#39; // 0% 处的颜色\n        }, {\n            offset: 1, color: &#39;blue&#39; // 100% 处的颜色\n        }],\n        global: false // 缺省为 false\n    }\n    // 纹理填充\n    color: {\n        image: imageDom, // 支持为 HTMLImageElement, HTMLCanvasElement，不支持路径字符串\n        repeat: &#39;repeat&#39; // 是否平铺，可以是 &#39;repeat-x&#39;, &#39;repeat-y&#39;, &#39;no-repeat&#39;\n    }\n    \n\n",
        "uiControl": {
            "type": "color"
        }
    },
    "axisPointer.crossStyle.width": {
        "desc": "线宽。\n\n",
        "uiControl": {
            "type": "number",
            "value": "1",
            "min": "0",
            "step": "0.5"
        }
    },
    "axisPointer.crossStyle.type": {
        "desc": "线的类型。\n\n可选：\n\n* &#39;solid&#39;\n* &#39;dashed&#39;\n* &#39;dotted&#39;\n\n自 v5.0.0 开始，也可以是 number 或者 number 数组，用以指定线条的 [dash array][0]，配合 dashOffset 可实现更灵活的虚线效果。\n\n例如：\n\n    {\n        type: [5, 10],\n        dashOffset: 5\n    }\n    \n\n\n\n[0]: https://developer.mozilla.org/zh-CN/docs/Web/SVG/Attribute/stroke-dasharray",
        "uiControl": {
            "type": "enum",
            "default": "solid",
            "options": "solid,dashed,dotted"
        }
    },
    "axisPointer.crossStyle.dashOffset": {
        "desc": "> 从 > v5.0.0>  开始支持\n\n用于设置虚线的偏移量，可搭配 type 指定 dash array 实现灵活的虚线效果。\n\n更多详情可以参考 MDN [lineDashOffset][0]。\n\n\n\n[0]: https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/lineDashOffset",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "axisPointer.crossStyle.cap": {
        "desc": "> 从 > v5.0.0>  开始支持\n\n用于指定线段末端的绘制方式，可以是：\n\n* &#39;butt&#39;: 线段末端以方形结束。\n* &#39;round&#39;: 线段末端以圆形结束。\n* &#39;square&#39;: 线段末端以方形结束，但是增加了一个宽度和线段相同，高度是线段厚度一半的矩形区域。\n\n默认值为 &#39;butt&#39;。 更多详情可以参考 MDN [lineCap][0]。\n\n\n\n[0]: https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/lineCap",
        "uiControl": {
            "type": "enum",
            "default": "butt",
            "options": "butt,round,square"
        }
    },
    "axisPointer.crossStyle.join": {
        "desc": "> 从 > v5.0.0>  开始支持\n\n用于设置2个长度不为0的相连部分（线段，圆弧，曲线）如何连接在一起的属性（长度为0的变形部分，其指定的末端和控制点在同一位置，会被忽略）。\n\n可以是：\n\n* &#39;bevel&#39;: 在相连部分的末端填充一个额外的以三角形为底的区域， 每个部分都有各自独立的矩形拐角。\n* &#39;round&#39;: 通过填充一个额外的，圆心在相连部分末端的扇形，绘制拐角的形状。 圆角的半径是线段的宽度。\n* &#39;miter&#39;: 通过延伸相连部分的外边缘，使其相交于一点，形成一个额外的菱形区域。这个设置可以通过 miterLimit 属性看到效果。\n\n默认值为 &#39;bevel&#39;。 更多详情可以参考 MDN [lineJoin][0]。\n\n\n\n[0]: https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/lineJoin",
        "uiControl": {
            "type": "enum",
            "default": "bevel",
            "options": "bevel,round,miter"
        }
    },
    "axisPointer.crossStyle.miterLimit": {
        "desc": "> 从 > v5.0.0>  开始支持\n\n用于设置斜接面限制比例。只有当 join 为 miter 时， miterLimit 才有效。\n\n默认值为 10。负数、0、Infinity 和 NaN 均会被忽略。\n\n更多详情可以参考 MDN [miterLimit][0]。\n\n\n\n[0]: https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/miterLimit",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "10"
        }
    },
    "axisPointer.crossStyle.shadowBlur": {
        "desc": "图形阴影的模糊大小。该属性配合 shadowColor,shadowOffsetX, shadowOffsetY 一起设置图形的阴影效果。\n\n示例：\n\n    {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n    \n\n",
        "uiControl": {
            "type": "number",
            "default": "",
            "min": "0",
            "step": "0.5"
        }
    },
    "axisPointer.crossStyle.shadowColor": {
        "desc": "阴影颜色。支持的格式同color。\n\n",
        "uiControl": {
            "type": "color",
            "default": ""
        }
    },
    "axisPointer.crossStyle.shadowOffsetX": {
        "desc": "阴影水平方向上的偏移距离。\n\n",
        "uiControl": {
            "type": "number",
            "default": "0",
            "step": "0.5"
        }
    },
    "axisPointer.crossStyle.shadowOffsetY": {
        "desc": "阴影垂直方向上的偏移距离。\n\n",
        "uiControl": {
            "type": "number",
            "default": "0",
            "step": "0.5"
        }
    },
    "axisPointer.crossStyle.opacity": {
        "desc": "图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。\n\n",
        "uiControl": {
            "type": "number",
            "default": "1",
            "min": "0",
            "max": "1",
            "step": "0.01"
        }
    },
    "axisPointer.animation": {
        "desc": "是否开启动画。\n\n",
        "uiControl": {
            "type": "boolean",
            "default": "true",
            "clean": "true"
        }
    },
    "axisPointer.animationThreshold": {
        "desc": "是否开启动画的阈值，当单个系列显示的图形数量大于这个阈值时会关闭动画。\n\n"
    },
    "axisPointer.animationDuration": {
        "desc": "初始动画的时长，支持回调函数，可以通过每个数据返回不同的时长实现更戏剧的初始动画效果：\n\n    animationDuration: function (idx) {\n        // 越往后的数据时长越大\n        return idx * 100;\n    }\n    \n\n",
        "uiControl": {
            "type": "number",
            "min": "0",
            "default": "1000",
            "step": "20",
            "clean": "true"
        }
    },
    "axisPointer.animationEasing": {
        "desc": "初始动画的缓动效果。不同的缓动效果可以参考 [缓动示例][0]。\n\n\n\n[0]: https://echarts.apache.org/examples/zh/editor.html?c=line-easing",
        "uiControl": {
            "type": "enum",
            "options": "linear,quadraticIn,quadraticOut,quadraticInOut,cubicIn,cubicOut,cubicInOut,quarticIn,quarticOut,quarticInOut,quinticIn,quinticOut,quinticInOut,sinusoidalIn,sinusoidalOut,sinusoidalInOut,exponentialIn,exponentialOut,exponentialInOut,circularIn,circularOut,circularInOut,elasticIn,elasticOut,elasticInOut,backIn,backOut,backInOut,bounceIn,bounceOut,bounceInOut",
            "clean": "true"
        }
    },
    "axisPointer.animationDelay": {
        "desc": "初始动画的延迟，支持回调函数，可以通过每个数据返回不同的 delay 时间实现更戏剧的初始动画效果。\n\n如下示例：\n\n    animationDelay: function (idx) {\n        // 越往后的数据延迟越大\n        return idx * 100;\n    }\n    \n\n也可以看[该示例][0]\n\n\n\n[0]: https://echarts.apache.org/examples/zh/editor.html?c=bar-animation-delay"
    },
    "axisPointer.animationDurationUpdate": {
        "desc": "数据更新动画的时长。\n\n支持回调函数，可以通过每个数据返回不同的时长实现更戏剧的更新动画效果：\n\n    animationDurationUpdate: function (idx) {\n        // 越往后的数据时长越大\n        return idx * 100;\n    }\n    \n\n",
        "uiControl": {
            "type": "number",
            "min": "0",
            "default": "1000",
            "step": "20"
        }
    },
    "axisPointer.animationEasingUpdate": {
        "desc": "数据更新动画的缓动效果。\n\n",
        "uiControl": {
            "type": "enum",
            "options": "linear,quadraticIn,quadraticOut,quadraticInOut,cubicIn,cubicOut,cubicInOut,quarticIn,quarticOut,quarticInOut,quinticIn,quinticOut,quinticInOut,sinusoidalIn,sinusoidalOut,sinusoidalInOut,exponentialIn,exponentialOut,exponentialInOut,circularIn,circularOut,circularInOut,elasticIn,elasticOut,elasticInOut,backIn,backOut,backInOut,bounceIn,bounceOut,bounceInOut"
        }
    },
    "axisPointer.animationDelayUpdate": {
        "desc": "数据更新动画的延迟，支持回调函数，可以通过每个数据返回不同的 delay 时间实现更戏剧的更新动画效果。\n\n如下示例：\n\n    animationDelayUpdate: function (idx) {\n        // 越往后的数据延迟越大\n        return idx * 100;\n    }\n    \n\n也可以看[该示例][0]\n\n\n\n[0]: https://echarts.apache.org/examples/zh/editor.html?c=bar-animation-delay"
    },
    "showContent": {
        "desc": "是否显示提示框浮层，默认显示。只需tooltip触发事件或显示axisPointer而不需要显示内容时可配置该项为false。\n\n",
        "uiControl": {
            "type": "boolean",
            "default": "true"
        }
    },
    "alwaysShowContent": {
        "desc": "是否永远显示提示框内容，默认情况下在移出可触发提示框区域后 [一定时间][0] 后隐藏，设置为 true 可以保证一直显示提示框内容。\n\n该属性为 ECharts 3.0 中新加。\n\n\n\n[0]: #tooltip.hideDelay",
        "uiControl": {
            "type": "boolean",
            "default": "false"
        }
    },
    "triggerOn": {
        "desc": "\n\n<p>提示框触发的条件，可选：</p>\n<ul>\n<li><p><code class=\"codespan\">&#39;mousemove&#39;</code></p>\n<p>  鼠标移动时触发。</p>\n</li>\n<li><p><code class=\"codespan\">&#39;click&#39;</code></p>\n<p>  鼠标点击时触发。</p>\n</li>\n<li><p><code class=\"codespan\">&#39;mousemove|click&#39;</code></p>\n<p>  同时鼠标移动和点击时触发。</p>\n</li>\n<li><p><code class=\"codespan\">&#39;none&#39;</code></p>\n<p>  不在 <code class=\"codespan\">&#39;mousemove&#39;</code> 或 <code class=\"codespan\">&#39;click&#39;</code> 时触发，用户可以通过 <a href=\"api.html#action.tooltip.showTip\" target=\"_blank\">action.tooltip.showTip</a> 和 <a href=\"api.html#action.tooltip.hideTip\" target=\"_blank\">action.tooltip.hideTip</a> 来手动触发和隐藏。也可以通过 <a href=\"#xAxis.axisPointer.handle\">axisPointer.handle</a> 来触发或隐藏。</p>\n</li>\n</ul>\n<p>该属性为 ECharts 3.0 中新加。</p>\n",
        "uiControl": {
            "type": "enum",
            "options": "mousemove,click"
        }
    },
    "showDelay": {
        "desc": "浮层显示的延迟，单位为 ms，默认没有延迟，也不建议设置。在 [triggerOn][0] 为 &#39;mousemove&#39; 时有效。\n\n\n\n[0]: #tooltip.triggerOn",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "20"
        }
    },
    "hideDelay": {
        "desc": "浮层隐藏的延迟，单位为 ms，在 [alwaysShowContent][0] 为 true 的时候无效。\n\n\n\n[0]: #tooltip.alwaysShowContent",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "20",
            "default": "100"
        }
    },
    "enterable": {
        "desc": "鼠标是否可进入提示框浮层中，默认为false，如需详情内交互，如添加链接，按钮，可设置为 true。\n\n",
        "uiControl": {
            "type": "boolean",
            "default": "false"
        }
    },
    "renderMode": {
        "desc": "浮层的渲染模式，默认以 &#39;html 即额外的 DOM 节点展示 tooltip；此外还可以设置为 &#39;richText&#39; 表示以富文本的形式渲染，渲染的结果在图表对应的 Canvas 中（目前 SVG 尚未支持富文本），这对于一些没有 DOM 的环境（如微信小程序）有更好的支持。\n\n",
        "uiControl": {
            "type": "enum",
            "options": "html,richText",
            "default": "html"
        }
    },
    "confine": {
        "desc": "是否将 tooltip 框限制在图表的区域内。\n\n当图表外层的 dom 被设置为 &#39;overflow: hidden&#39;，或者移动端窄屏，导致 tooltip 超出外界被截断时，此配置比较有用。\n\n",
        "uiControl": {
            "type": "boolean",
            "default": "false"
        }
    },
    "appendToBody": {
        "desc": "> 从 > v4.7.0>  开始支持\n\n是否将 tooltip 的 DOM 节点添加为 HTML 的 &lt;body&gt; 的子节点。只有当 [renderMode][0] 为 &#39;html&#39; 是有意义的。\n\n默认值是 false。false 表示，tooltip 的 DOM 节点会被添加为本图表的 DOM container 的一个子孙节点。但是这种方式导致，如果本图表的 DOM container 的祖先节点有设置 overflow: hidden，那么当 tooltip 超出 container 范围使可能被截断。这个问题一定程度上可以用 [tooltip.confine][1] 来解决，但是不一定能解决所有场景。\n\n所以这里我们提供了 appendToBody: true 来解决这件事。这也是常见的解决此类问题的一种方式。但是 true 并不定为默认值，因为要避免 break change，尤其是一些对于 tooltip 深入定制的使用。并且也避免一些未知的 bad case。\n\n注：CSS transform 的场景，这也可以使用。\n\n\n\n[0]: #tooltip.renderMode\n[1]: #tooltip.confine",
        "uiControl": {
            "type": "boolean",
            "default": "false"
        }
    },
    "className": {
        "desc": "> 从 > v5.0.0>  开始支持\n\n指定 tooltip 的 DOM 节点的 CSS 类。（只在 [html][0] 模式下生效）。\n\nExample:\n\n    className: &#39;echarts-tooltip echarts-tooltip-dark&#39;\n    \n\n\n\n[0]: #tooltip.renderMode",
        "uiControl": {
            "type": "text"
        }
    },
    "transitionDuration": {
        "desc": "提示框浮层的移动动画过渡时间，单位是 s，设置为 0 的时候会紧跟着鼠标移动。\n\n",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.1",
            "default": "0.4"
        }
    },
    "position": {
        "desc": "<p>提示框浮层的位置，默认不设置时位置会跟随鼠标的位置。</p>\n<p>可选：</p>\n<ul>\n<li><p><code class=\"codespan\">Array</code></p>\n<p>  通过数组表示提示框浮层的位置，支持数字设置绝对位置，百分比设置相对位置。</p>\n<p>  示例:</p>\n<pre><code class=\"lang-js\">  // 绝对位置，相对于容器左侧 10px, 上侧 10 px\n  position: [10, 10]\n  // 相对位置，放置在容器正中间\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p><code class=\"codespan\">Function</code></p>\n<p>  回调函数，格式如下：</p>\n<pre><code class=\"lang-js\">  (point: Array, params: Object|Array.&lt;Object&gt;, dom: HTMLDomElement, rect: Object, size: Object) =&gt; Array\n</code></pre>\n<p>  <strong>参数：</strong><br>\n  point: 鼠标位置，如 [20, 40]。<br>\n  params: 同 formatter 的参数相同。<br>\n  dom: tooltip 的 dom 对象。<br>\n  rect: 只有鼠标在图形上时有效，是一个用<code class=\"codespan\">x</code>, <code class=\"codespan\">y</code>, <code class=\"codespan\">width</code>, <code class=\"codespan\">height</code>四个属性表达的图形包围盒。<br>\n  size: 包括 dom 的尺寸和 echarts 容器的当前尺寸，例如：<code class=\"codespan\">{contentSize: [width, height], viewSize: [width, height]}</code>。<br></p>\n<p>  <strong>返回值：</strong><br>\n  可以是一个表示 tooltip 位置的数组，数组值可以是绝对的像素值，也可以是相  百分比。<br>\n  也可以是一个对象，如：<code class=\"codespan\">{left: 10, top: 30}</code>，或者 <code class=\"codespan\">{right: &#39;20%&#39;, bottom: 40}</code>。<br></p>\n<p>  如下示例：</p>\n<pre><code class=\"lang-js\">  position: function (point, params, dom, rect, size) {\n      // 固定在顶部\n      return [point[0], &#39;10%&#39;];\n  }\n</code></pre>\n<p>  或者：</p>\n<pre><code class=\"lang-js\">  position: function (pos, params, dom, rect, size) {\n      // 鼠标在左侧时 tooltip 显示到右侧，鼠标在右侧时 tooltip 显示到左侧。\n      var obj = {top: 60};\n      obj[[&#39;left&#39;, &#39;right&#39;][+(pos[0] &lt; size.viewSize[0] / 2)]] = 5;\n      return obj;\n  }\n</code></pre>\n</li>\n</ul>\n<ul>\n<li><p><code class=\"codespan\">&#39;inside&#39;</code></p>\n<p>  鼠标所在图形的内部中心位置，只在 <a href=\"#tooltip.trigger\">trigger</a> 为<code class=\"codespan\">&#39;item&#39;</code>的时候有效。</p>\n</li>\n<li><p><code class=\"codespan\">&#39;top&#39;</code></p>\n<p>  鼠标所在图形上侧，只在 <a href=\"#tooltip.trigger\">trigger</a> 为<code class=\"codespan\">&#39;item&#39;</code>的时候有效。</p>\n</li>\n<li><p><code class=\"codespan\">&#39;left&#39;</code></p>\n<p>  鼠标所在图形左侧，只在 <a href=\"#tooltip.trigger\">trigger</a> 为<code class=\"codespan\">&#39;item&#39;</code>的时候有效。</p>\n</li>\n<li><p><code class=\"codespan\">&#39;right&#39;</code></p>\n<p>  鼠标所在图形右侧，只在 <a href=\"#tooltip.trigger\">trigger</a> 为<code class=\"codespan\">&#39;item&#39;</code>的时候有效。</p>\n</li>\n<li><p><code class=\"codespan\">&#39;bottom&#39;</code></p>\n<p>  鼠标所在图形底侧，只在 <a href=\"#tooltip.trigger\">trigger</a> 为<code class=\"codespan\">&#39;item&#39;</code>的时候有效。</p>\n</li>\n</ul>\n"
    },
    "formatter": {
        "desc": "提示框浮层内容格式器，支持字符串模板和回调函数两种形式。\n\n**1. 字符串模板**\n\n模板变量有 {a}, {b}，{c}，{d}，{e}，分别表示系列名，数据名，数据值等。 在 [trigger][0] 为 &#39;axis&#39; 的时候，会有多个系列的数据，此时可以通过 {a0}, {a1}, {a2} 这种后面加索引的方式表示系列的索引。 不同图表类型下的 {a}，{b}，{c}，{d} 含义不一样。 其中变量{a}, {b}, {c}, {d}在不同图表类型下代表数据含义为：\n\n* 折线（区域）图、柱状（条形）图、K线图 : {a}（系列名称），{b}（类目值），{c}（数值）, {d}（无）\n* 散点图（气泡）图 : {a}（系列名称），{b}（数据名称），{c}（数值数组）, {d}（无）\n* 地图 : {a}（系列名称），{b}（区域名称），{c}（合并数值）, {d}（无）\n* 饼图、仪表盘、漏斗图: {a}（系列名称），{b}（数据项名称），{c}（数值）, {d}（百分比）\n\n更多其它图表模板变量的含义可以见相应的图表的 label.formatter 配置项。\n\n**示例：**\n\n    formatter: &#39;{b0}: {c0}&lt;br /&gt;{b1}: {c1}&#39;\n    \n\n**2. 回调函数**\n\n回调函数格式：\n\n    (params: Object|Array, ticket: string, callback: (ticket: string, html: string)) =&gt; string | HTMLElement | HTMLElement[]\n    \n\n支持返回 HTML 字符串或者创建的 DOM 实例。\n\n第一个参数 params 是 formatter 需要的数据集。格式如下：\n\n    {\n        componentType: &#39;series&#39;,\n        // 系列类型\n        seriesType: string,\n        // 系列在传入的 option.series 中的 index\n        seriesIndex: number,\n        // 系列名称\n        seriesName: string,\n        // 数据名，类目名\n        name: string,\n        // 数据在传入的 data 数组中的 index\n        dataIndex: number,\n        // 传入的原始数据项\n        data: Object,\n        // 传入的数据值。在多数系列下它和 data 相同。在一些系列下是 data 中的分量（如 map、radar 中）\n        value: number|Array|Object,\n        // 坐标轴 encode 映射信息，\n        // key 为坐标轴（如 &#39;x&#39; &#39;y&#39; &#39;radius&#39; &#39;angle&#39; 等）\n        // value 必然为数组，不会为 null/undefied，表示 dimension index 。\n        // 其内容如：\n        // {\n        //     x: [2] // dimension index 为 2 的数据映射到 x 轴\n        //     y: [0] // dimension index 为 0 的数据映射到 y 轴\n        // }\n        encode: Object,\n        // 维度名列表\n        dimensionNames: Array&lt;String&gt;,\n        // 数据的维度 index，如 0 或 1 或 2 ...\n        // 仅在雷达图中使用。\n        dimensionIndex: number,\n        // 数据图形的颜色\n        color: string,\n    \n    \n        // 饼图的百分比\n        percent: number,\n    \n    \n    }\n    \n\n注：encode 和 dimensionNames 的使用方式，例如：\n\n如果数据为：\n\n    dataset: {\n        source: [\n            [&#39;Matcha Latte&#39;, 43.3, 85.8, 93.7],\n            [&#39;Milk Tea&#39;, 83.1, 73.4, 55.1],\n            [&#39;Cheese Cocoa&#39;, 86.4, 65.2, 82.5],\n            [&#39;Walnut Brownie&#39;, 72.4, 53.9, 39.1]\n        ]\n    }\n    \n\n则可这样得到 y 轴对应的 value：\n\n    params.value[params.encode.y[0]]\n    \n\n如果数据为：\n\n    dataset: {\n        dimensions: [&#39;product&#39;, &#39;2015&#39;, &#39;2016&#39;, &#39;2017&#39;],\n        source: [\n            {product: &#39;Matcha Latte&#39;, &#39;2015&#39;: 43.3, &#39;2016&#39;: 85.8, &#39;2017&#39;: 93.7},\n            {product: &#39;Milk Tea&#39;, &#39;2015&#39;: 83.1, &#39;2016&#39;: 73.4, &#39;2017&#39;: 55.1},\n            {product: &#39;Cheese Cocoa&#39;, &#39;2015&#39;: 86.4, &#39;2016&#39;: 65.2, &#39;2017&#39;: 82.5},\n            {product: &#39;Walnut Brownie&#39;, &#39;2015&#39;: 72.4, &#39;2016&#39;: 53.9, &#39;2017&#39;: 39.1}\n        ]\n    }\n    \n\n则可这样得到 y 轴对应的 value：\n\n    params.value[params.dimensionNames[params.encode.y[0]]]\n    \n\n在 [trigger][0] 为 &#39;axis&#39; 的时候，或者 tooltip 被 [axisPointer][1] 触发的时候，params 是多个系列的数据数组。其中每项内容格式同上，并且，\n\n    {\n        componentType: &#39;series&#39;,\n        // 系列类型\n        seriesType: string,\n        // 系列在传入的 option.series 中的 index\n        seriesIndex: number,\n        // 系列名称\n        seriesName: string,\n        // 数据名，类目名\n        name: string,\n        // 数据在传入的 data 数组中的 index\n        dataIndex: number,\n        // 传入的原始数据项\n        data: Object,\n        // 传入的数据值。在多数系列下它和 data 相同。在一些系列下是 data 中的分量（如 map、radar 中）\n        value: number|Array|Object,\n        // 坐标轴 encode 映射信息，\n        // key 为坐标轴（如 &#39;x&#39; &#39;y&#39; &#39;radius&#39; &#39;angle&#39; 等）\n        // value 必然为数组，不会为 null/undefied，表示 dimension index 。\n        // 其内容如：\n        // {\n        //     x: [2] // dimension index 为 2 的数据映射到 x 轴\n        //     y: [0] // dimension index 为 0 的数据映射到 y 轴\n        // }\n        encode: Object,\n        // 维度名列表\n        dimensionNames: Array&lt;String&gt;,\n        // 数据的维度 index，如 0 或 1 或 2 ...\n        // 仅在雷达图中使用。\n        dimensionIndex: number,\n        // 数据图形的颜色\n        color: string,\n    \n    \n    \n    }\n    \n\n注：encode 和 dimensionNames 的使用方式，例如：\n\n如果数据为：\n\n    dataset: {\n        source: [\n            [&#39;Matcha Latte&#39;, 43.3, 85.8, 93.7],\n            [&#39;Milk Tea&#39;, 83.1, 73.4, 55.1],\n            [&#39;Cheese Cocoa&#39;, 86.4, 65.2, 82.5],\n            [&#39;Walnut Brownie&#39;, 72.4, 53.9, 39.1]\n        ]\n    }\n    \n\n则可这样得到 y 轴对应的 value：\n\n    params.value[params.encode.y[0]]\n    \n\n如果数据为：\n\n    dataset: {\n        dimensions: [&#39;product&#39;, &#39;2015&#39;, &#39;2016&#39;, &#39;2017&#39;],\n        source: [\n            {product: &#39;Matcha Latte&#39;, &#39;2015&#39;: 43.3, &#39;2016&#39;: 85.8, &#39;2017&#39;: 93.7},\n            {product: &#39;Milk Tea&#39;, &#39;2015&#39;: 83.1, &#39;2016&#39;: 73.4, &#39;2017&#39;: 55.1},\n            {product: &#39;Cheese Cocoa&#39;, &#39;2015&#39;: 86.4, &#39;2016&#39;: 65.2, &#39;2017&#39;: 82.5},\n            {product: &#39;Walnut Brownie&#39;, &#39;2015&#39;: 72.4, &#39;2016&#39;: 53.9, &#39;2017&#39;: 39.1}\n        ]\n    }\n    \n\n则可这样得到 y 轴对应的 value：\n\n    params.value[params.dimensionNames[params.encode.y[0]]]\n    \n\n**注：** ECharts 2.x 使用数组表示各参数的方式不再支持。\n\n第二个参数 ticket 是异步回调标识，配合第三个参数 callback 使用。 第三个参数 callback 是异步回调，在提示框浮层内容是异步获取的时候，可以通过 callback 传入上述的 ticket 和 html 更新提示框浮层内容。\n\n示例：\n\n    formatter: function (params, ticket, callback) {\n        $.get(&#39;detail?name=&#39; + params.name, function (content) {\n            callback(ticket, toHTML(content));\n        });\n        return &#39;Loading&#39;;\n    }\n    \n\n\n\n[0]: #tooltip.trigger\n[1]: #xAxis.axisPointer"
    },
    "backgroundColor": {
        "desc": "提示框浮层的背景颜色。\n\n"
    },
    "borderColor": {
        "desc": "提示框浮层的边框颜色。\n\n",
        "uiControl": {
            "type": "color",
            "default": "#333"
        }
    },
    "borderWidth": {
        "desc": "提示框浮层的边框宽。\n\n",
        "uiControl": {
            "type": "number",
            "default": "0",
            "step": "0.5"
        }
    },
    "padding": {
        "desc": "提示框浮层内边距，单位px，默认各方向内边距为5，接受数组分别设定上右下左边距。\n\n使用示例：\n\n    // 设置内边距为 5\n    padding: 5\n    // 设置上下的内边距为 5，左右的内边距为 10\n    padding: [5, 10]\n    // 分别设置四个方向的内边距\n    padding: [\n        5,  // 上\n        10, // 右\n        5,  // 下\n        10, // 左\n    ]\n    \n\n",
        "uiControl": {
            "type": "vector",
            "min": "0",
            "dims": "T,R,B,L"
        }
    },
    "textStyle": {
        "desc": "提示框浮层的文本样式。\n\n"
    },
    "textStyle.color": {
        "desc": "文字的颜色。\n\n",
        "uiControl": {
            "type": "color",
            "default": "'#fff'"
        }
    },
    "textStyle.fontStyle": {
        "desc": "文字字体的风格。\n\n可选：\n\n* &#39;normal&#39;\n* &#39;italic&#39;\n* &#39;oblique&#39;\n\n",
        "uiControl": {
            "type": "enum",
            "default": "normal",
            "options": "normal,italic,oblique"
        }
    },
    "textStyle.fontWeight": {
        "desc": "文字字体的粗细。\n\n可选：\n\n* &#39;normal&#39;\n* &#39;bold&#39;\n* &#39;bolder&#39;\n* &#39;lighter&#39;\n* 100 | 200 | 300 | 400...\n\n",
        "uiControl": {
            "type": "enum",
            "default": "normal",
            "options": "normal,bold,bolder,lighter"
        }
    },
    "textStyle.fontFamily": {
        "desc": "文字的字体系列。\n\n还可以是 &#39;serif&#39; , &#39;monospace&#39;, &#39;Arial&#39;, &#39;Courier New&#39;, &#39;Microsoft YaHei&#39;, ...\n\n",
        "uiControl": {
            "type": "enum",
            "default": "sans-serif",
            "options": "sans-serif,serif,monospace,Arial,Courier New"
        }
    },
    "textStyle.fontSize": {
        "desc": "文字的字体大小。\n\n",
        "uiControl": {
            "type": "number",
            "default": "14",
            "min": "1",
            "step": "1"
        }
    },
    "textStyle.lineHeight": {
        "desc": "行高。\n\nrich 中如果没有设置 lineHeight，则会取父层级的 lineHeight。例如：\n\n    {\n        lineHeight: 56,\n        rich: {\n            a: {\n                // 没有设置 `lineHeight`，则 `lineHeight` 为 56\n            }\n        }\n    }\n    \n\n",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "12"
        }
    },
    "textStyle.width": {
        "desc": "文本显示宽度。\n\n",
        "uiControl": {
            "type": "number",
            "default": "100",
            "min": "1",
            "max": "500",
            "step": "1"
        }
    },
    "textStyle.height": {
        "desc": "文本显示高度。\n\n",
        "uiControl": {
            "type": "number",
            "default": "50",
            "min": "1",
            "max": "500",
            "step": "1"
        }
    },
    "textStyle.textBorderColor": {
        "desc": "文字本身的描边颜色。\n\n",
        "uiControl": {
            "type": "color"
        }
    },
    "textStyle.textBorderWidth": {
        "desc": "文字本身的描边宽度。\n\n",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5"
        }
    },
    "textStyle.textBorderType": {
        "desc": "文字本身的描边类型。\n\n可选：\n\n* &#39;solid&#39;\n* &#39;dashed&#39;\n* &#39;dotted&#39;\n\n自 v5.0.0 开始，也可以是 number 或者 number 数组，用以指定线条的 [dash array][0]，配合 textBorderDashOffset 可实现更灵活的虚线效果。\n\n例如：\n\n    {\n        textBorderType: [5, 10],\n        textBorderDashOffset: 5\n    }\n    \n\n\n\n[0]: https://developer.mozilla.org/zh-CN/docs/Web/SVG/Attribute/stroke-dasharray",
        "uiControl": {
            "type": "enum",
            "default": "solid",
            "options": "solid,dashed,dotted"
        }
    },
    "textStyle.textBorderDashOffset": {
        "desc": "> 从 > v5.0.0>  开始支持\n\n用于设置虚线的偏移量，可搭配 textBorderType 指定 dash array 实现灵活的虚线效果。\n\n更多详情可以参考 MDN [lineDashOffset][0]。\n\n\n\n[0]: https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/lineDashOffset",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "textStyle.textShadowColor": {
        "desc": "文字本身的阴影颜色。\n\n",
        "uiControl": {
            "type": "color",
            "default": "#000"
        }
    },
    "textStyle.textShadowBlur": {
        "desc": "文字本身的阴影长度。\n\n",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5"
        }
    },
    "textStyle.textShadowOffsetX": {
        "desc": "文字本身的阴影 X 偏移。\n\n",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "textStyle.textShadowOffsetY": {
        "desc": "文字本身的阴影 Y 偏移。\n\n",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "textStyle.overflow": {
        "desc": "文字超出宽度是否截断或者换行。配置width时有效\n\n* &#39;truncate&#39; 截断，并在末尾显示ellipsis配置的文本，默认为...\n* &#39;break&#39; 换行\n* &#39;breakAll&#39; 换行，跟&#39;break&#39;不同的是，在英语等拉丁文中，&#39;breakAll&#39;还会强制单词内换行\n\n",
        "uiControl": {
            "type": "enum",
            "options": "truncate,break,breakAll"
        }
    },
    "textStyle.ellipsis": {
        "desc": "在overflow配置为&#39;truncate&#39;的时候，可以通过该属性配置末尾显示的文本。\n\n"
    },
    "textStyle.lineOverflow": {
        "desc": "文本超出高度部分是否截断，配置height时有效。\n\n* &#39;truncate&#39; 在文本行数超出高度部分截断。\n\n"
    },
    "extraCssText": {
        "desc": "额外附加到浮层的 css 样式。如下为浮层添加阴影的示例：\n\n    extraCssText: &#39;box-shadow: 0 0 3px rgba(0, 0, 0, 0.3);&#39;\n    \n\n",
        "uiControl": {
            "type": "text"
        }
    },
    "order": {
        "desc": "\n\n\n\n<blockquote>\n<p>从 <code class=\"codespan\">v5.0.0</code> 开始支持</p>\n</blockquote>\n<p>多系列提示框浮层排列顺序。默认值为 <code class=\"codespan\">&#39;seriesAsc&#39;</code></p>\n<p>提示框排列顺序可选值:</p>\n<ul>\n<li><p><code class=\"codespan\">&#39;seriesAsc&#39;</code></p>\n<p>  根据系列声明, 升序排列。</p>\n</li>\n<li><p><code class=\"codespan\">&#39;seriesDesc&#39;</code></p>\n<p>  根据系列声明, 降序排列。</p>\n</li>\n<li><p><code class=\"codespan\">&#39;valueAsc&#39;</code></p>\n<p>  根据数据值, 升序排列。</p>\n</li>\n<li><p><code class=\"codespan\">&#39;valueDesc&#39;</code></p>\n<p>  根据数据值, 降序排列。</p>\n</li>\n</ul>\n",
        "uiControl": {
            "type": "enum",
            "options": "seriesAsc,seriesDesc,valueAsc,valueDesc",
            "default": "seriesAsc"
        }
    }
}