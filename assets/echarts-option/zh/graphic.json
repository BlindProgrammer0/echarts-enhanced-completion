{
    "id": {
        "desc": "组件 ID。默认不指定。指定则可用于在 option 或者 API 中引用组件。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements": {
        "desc": "里面是所有图形元素的集合。\n\n注意：graphic 的标准写法是：\n\n```javascript\n{\ngraphic: {\nelements: [\n{type: 'rect', ...}, {type: 'circle', ...}, ...\n]\n}\n}\n```\n\n但是我们常常可以用简写：\n\n```javascript\n{\ngraphic: {\ntype: 'rect',\n...\n}\n}\n```\n\n或者：\n```javascript\n{\ngraphic: [\n{type: 'rect', ...}, {type: 'circle', ...}, ...\n]\n}\n```",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.group": {
        "desc": "group 是唯一的可以有子节点的容器。group 可以用来整体定位一组图形元素。",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.group.type": {
        "desc": "用 setOption 首次设定图形元素时必须指定。\n可取值：\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
        "uiControl": {
            "default": "group",
            "type": "string"
        }
    },
    "elements.group.id": {
        "desc": "id 用于在更新或删除图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\n\n\n### $action(string) = 'merge'\n\nsetOption 时指定本次对该图形元素的操作行为。\n\n可取值：\n+ `'merge'`：如果已有元素，则新的配置项和已有的设定进行 merge。如果没有则新建。\n+ `'replace'`：如果已有元素，删除之，新建元素替代之。\n+ `'remove'`：删除元素。",
        "uiControl": {
            "default": "undefined",
            "type": "string"
        }
    },
    "elements.group.x": {
        "desc": "元素的 x 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.group.y": {
        "desc": "元素的 y 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.group.rotation": {
        "desc": "元素的旋转",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.group.scaleX": {
        "desc": "元素在 x 方向上的缩放。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.group.scaleY": {
        "desc": "元素在 y 方向上的缩放。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.group.originX": {
        "desc": "元素旋转和缩放原点的 x 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.group.originY": {
        "desc": "元素旋转和缩放原点的 y 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.group.left": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-group.left) 和 [right](~graphic.elements-group.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-group.left) 或 [right](~graphic.elements-group.right)，则 [shape](~graphic.elements-group.shape) 里的 `x`、`cx` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.group.right": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-group.left) 和 [right](~graphic.elements-group.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-group.left) 或 [right](~graphic.elements-group.right)，则 [shape](~graphic.elements-group.shape) 里的 `x`、`cx` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.group.top": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-group.top) 和 [bottom](~graphic.elements-group.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-group.top) 或 [bottom](~graphic.elements-group.bottom)，则 [shape](~graphic.elements-group.shape) 里的 `y`、`cy` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.group.bottom": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-group.top) 和 [bottom](~graphic.elements-group.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-group.top) 或 [bottom](~graphic.elements-group.bottom)，则 [shape](~graphic.elements-group.shape) 里的 `y`、`cy` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.group.bounding": {
        "desc": "决定此图形元素在定位时，对自身的包围盒计算方式。\n\n参见例子：\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\n可取值：\n\n+ `'all'`：（默认）\n表示用自身以及子节点整体的经过 transform 后的包围盒进行定位。\n这种方式易于使整体都限制在父元素范围中。\n\n+ `'raw'`：\n表示仅仅用自身（不包括子节点）的没经过 tranform 的包围盒进行定位。\n这种方式易于内容超出父元素范围的定位方式。",
        "uiControl": {
            "default": "'all'",
            "type": "string"
        }
    },
    "elements.group.z": {
        "desc": "z 方向的高度，决定层叠关系。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.group.zlevel": {
        "desc": "决定此元素绘制在哪个 canvas 层中。注意，越多 canvas 层会占用越多资源。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.group.info": {
        "desc": "用户定义的任意数据，可以在 event listener 中访问，如：\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
        "uiControl": {
            "type": "*"
        }
    },
    "elements.group.silent": {
        "desc": "是否不响应鼠标以及触摸事件。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.group.invisible": {
        "desc": "节点是否可见。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.group.ignore": {
        "desc": "节点是否完全被忽略（既不渲染，也不响应事件）。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.group.textContent": {
        "desc": "这是一个文本定义，附着在一个节点上，会依据 `textConfig` 配置，相对于节点布局。\n\n\n里面的属性同于 [text](option.html#graphic.elements-text)。",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.group.textConfig": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.group.textConfig.position": {
        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
        "uiControl": {
            "default": "'inside'",
            "type": ""
        }
    },
    "elements.group.textConfig.rotation": {
        "desc": "`textContent` 的旋转弧度。",
        "uiControl": {
            "type": "number"
        }
    },
    "elements.group.textConfig.layoutRect": {
        "desc": "`textContent` 根据此矩形来布局位置。\n默认是节点的包围盒。\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.group.textConfig.offset": {
        "desc": "`textContent` 的偏移。\n\n`offset` 和 `position` 的区别是，`offset` 是旋转（rotation）后计算。\n\n#### origin\n\n`origin` 相对于节点的包围盒。\n可以是百分数。\n如果指定为 `'center'`，则定位在包围盒中心。\n\n只有当 `position` and `rotation` 都设置时，生效。\n\n+ 如 `[12, 33]`\n+ 或如 `['50%', '50%']`\n+ 'center'",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.group.textConfig.distance": {
        "desc": "距离 `layoutRect` 的距离。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.group.textConfig.local": {
        "desc": "如果 `true` 的话，会采用节点的 transform。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.group.textConfig.insideFill": {
        "desc": "`insideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\n在绝大多数场景下，\"auto-calculated-fill\" 是白色。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.group.textConfig.insideStroke": {
        "desc": "`insideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会和节点的 `fill` 相同，如果 `fill` 没有的话则为 `null`。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.group.textConfig.outsideFill": {
        "desc": "`outsideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 \"inside\"，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.group.textConfig.outsideStroke": {
        "desc": "`outsideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 不是 \"inside\"，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会为一个近似于白色的颜色，来区别于背景。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.group.textConfig.inside": {
        "desc": "如果确定文本是在节点中的话，则此可设置为 `true`，避免 echarts 额外猜测。",
        "uiControl": {
            "type": "boolean"
        }
    },
    "elements.group.cursor": {
        "desc": "鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 `cursor`。",
        "uiControl": {
            "type": "enum",
            "options": "'auto','pointer','move'"
        }
    },
    "elements.group.draggable": {
        "desc": "图形元素是否可以被拖拽。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.group.progressive": {
        "desc": "是否渐进式渲染。当图形元素过多时才使用。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.group.width": {
        "desc": "用于描述此 `group` 的宽。\n\n这个宽只用于给子节点定位。\n\n即便当宽度为零的时候，子节点也可以使用 `left: 'center'` 相对于父节点水平居中。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.group.height": {
        "desc": "用于描述此 `group` 的高。\n\n这个高只用于给子节点定位。\n\n即便当高度为零的时候，子节点也可以使用 `top: 'middle'` 相对于父节点垂直居中。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.group.diffChildrenByName": {
        "desc": "在 [自定义系列](~series-custom) 中，当 `diffChildrenByName: true` 时，对于 [renderItem](~series-custom.renderItem) 返回值中的每一个 [group](~graphic.elements-group)，会根据其 [children](~graphic.elements-group.children) 中每个图形元素的 [name](~graphic.elements-polygon.name) 属性进行 \"diff\"。在这里，\"diff\" 的意思是，重绘的时候，在已存在的图形元素和新的图形元素之间建立对应关系（依据 `name` 是否相同），从如果数据有更新，能够形成的过渡动画。\n\n但是注意，这会有性能开销。如果数据量较大，不要开启这个功能。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.group.children": {
        "desc": "子节点列表，其中项都是一个图形元素定义。",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.group.onclick": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.onmouseover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.onmouseout": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.onmousemove": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.onmousewheel": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.onmousedown": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.onmouseup": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.ondrag": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.ondragstart": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.ondragend": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.ondragenter": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.ondragleave": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.ondragover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.ondrop": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.image.type": {
        "desc": "用 setOption 首次设定图形元素时必须指定。\n可取值：\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
        "uiControl": {
            "default": "image",
            "type": "string"
        }
    },
    "elements.image.id": {
        "desc": "id 用于在更新或删除图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\n\n\n### $action(string) = 'merge'\n\nsetOption 时指定本次对该图形元素的操作行为。\n\n可取值：\n+ `'merge'`：如果已有元素，则新的配置项和已有的设定进行 merge。如果没有则新建。\n+ `'replace'`：如果已有元素，删除之，新建元素替代之。\n+ `'remove'`：删除元素。",
        "uiControl": {
            "default": "undefined",
            "type": "string"
        }
    },
    "elements.image.x": {
        "desc": "元素的 x 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.image.y": {
        "desc": "元素的 y 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.image.rotation": {
        "desc": "元素的旋转",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.image.scaleX": {
        "desc": "元素在 x 方向上的缩放。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.image.scaleY": {
        "desc": "元素在 y 方向上的缩放。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.image.originX": {
        "desc": "元素旋转和缩放原点的 x 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.image.originY": {
        "desc": "元素旋转和缩放原点的 y 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.image.left": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-image.left) 和 [right](~graphic.elements-image.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-image.left) 或 [right](~graphic.elements-image.right)，则 [shape](~graphic.elements-image.shape) 里的 `x`、`cx` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.image.right": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-image.left) 和 [right](~graphic.elements-image.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-image.left) 或 [right](~graphic.elements-image.right)，则 [shape](~graphic.elements-image.shape) 里的 `x`、`cx` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.image.top": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-image.top) 和 [bottom](~graphic.elements-image.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-image.top) 或 [bottom](~graphic.elements-image.bottom)，则 [shape](~graphic.elements-image.shape) 里的 `y`、`cy` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.image.bottom": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-image.top) 和 [bottom](~graphic.elements-image.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-image.top) 或 [bottom](~graphic.elements-image.bottom)，则 [shape](~graphic.elements-image.shape) 里的 `y`、`cy` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.image.bounding": {
        "desc": "决定此图形元素在定位时，对自身的包围盒计算方式。\n\n参见例子：\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\n可取值：\n\n+ `'all'`：（默认）\n表示用自身以及子节点整体的经过 transform 后的包围盒进行定位。\n这种方式易于使整体都限制在父元素范围中。\n\n+ `'raw'`：\n表示仅仅用自身（不包括子节点）的没经过 tranform 的包围盒进行定位。\n这种方式易于内容超出父元素范围的定位方式。",
        "uiControl": {
            "default": "'all'",
            "type": "string"
        }
    },
    "elements.image.z": {
        "desc": "z 方向的高度，决定层叠关系。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.image.zlevel": {
        "desc": "决定此元素绘制在哪个 canvas 层中。注意，越多 canvas 层会占用越多资源。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.image.info": {
        "desc": "用户定义的任意数据，可以在 event listener 中访问，如：\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
        "uiControl": {
            "type": "*"
        }
    },
    "elements.image.silent": {
        "desc": "是否不响应鼠标以及触摸事件。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.image.invisible": {
        "desc": "节点是否可见。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.image.ignore": {
        "desc": "节点是否完全被忽略（既不渲染，也不响应事件）。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.image.textContent": {
        "desc": "这是一个文本定义，附着在一个节点上，会依据 `textConfig` 配置，相对于节点布局。\n\n\n里面的属性同于 [text](option.html#graphic.elements-text)。",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.image.textConfig": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.image.textConfig.position": {
        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
        "uiControl": {
            "default": "'inside'",
            "type": ""
        }
    },
    "elements.image.textConfig.rotation": {
        "desc": "`textContent` 的旋转弧度。",
        "uiControl": {
            "type": "number"
        }
    },
    "elements.image.textConfig.layoutRect": {
        "desc": "`textContent` 根据此矩形来布局位置。\n默认是节点的包围盒。\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.image.textConfig.offset": {
        "desc": "`textContent` 的偏移。\n\n`offset` 和 `position` 的区别是，`offset` 是旋转（rotation）后计算。\n\n#### origin\n\n`origin` 相对于节点的包围盒。\n可以是百分数。\n如果指定为 `'center'`，则定位在包围盒中心。\n\n只有当 `position` and `rotation` 都设置时，生效。\n\n+ 如 `[12, 33]`\n+ 或如 `['50%', '50%']`\n+ 'center'",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.image.textConfig.distance": {
        "desc": "距离 `layoutRect` 的距离。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.image.textConfig.local": {
        "desc": "如果 `true` 的话，会采用节点的 transform。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.image.textConfig.insideFill": {
        "desc": "`insideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\n在绝大多数场景下，\"auto-calculated-fill\" 是白色。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.image.textConfig.insideStroke": {
        "desc": "`insideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会和节点的 `fill` 相同，如果 `fill` 没有的话则为 `null`。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.image.textConfig.outsideFill": {
        "desc": "`outsideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 \"inside\"，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.image.textConfig.outsideStroke": {
        "desc": "`outsideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 不是 \"inside\"，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会为一个近似于白色的颜色，来区别于背景。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.image.textConfig.inside": {
        "desc": "如果确定文本是在节点中的话，则此可设置为 `true`，避免 echarts 额外猜测。",
        "uiControl": {
            "type": "boolean"
        }
    },
    "elements.image.cursor": {
        "desc": "鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 `cursor`。",
        "uiControl": {
            "type": "enum",
            "options": "'auto','pointer','move'"
        }
    },
    "elements.image.draggable": {
        "desc": "图形元素是否可以被拖拽。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.image.progressive": {
        "desc": "是否渐进式渲染。当图形元素过多时才使用。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.image.style": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.image.style.image": {
        "desc": "图片的内容，可以是图片的 URL，也可以是 [dataURI](https://tools.ietf.org/html/rfc2397).",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.image.style.x": {
        "desc": "图形元素的左上角在父节点坐标系（以父节点左上角为原点）中的横坐标值。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.image.style.y": {
        "desc": "图形元素的左上角在父节点坐标系（以父节点左上角为原点）中的纵坐标值。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.image.style.width": {
        "desc": "图形元素的宽度。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.image.style.height": {
        "desc": "图形元素的高度。\n\n\n\n\n\n\n\n注：关于图形元素中更多的样式设置（例如 [富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)），参见 [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable) 中的 style 相关属性。\n\n注意，这里图形元素的样式属性名称直接源于 zrender，和 `echarts label`、`echarts itemStyle` 等处同样含义的样式属性名称或有不同。例如，有如下对应：\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
        "uiControl": {
            "default": "0",
            "type": "numbr"
        }
    },
    "elements.image.style.fill": {
        "desc": "填充色。",
        "uiControl": {
            "default": "'#000'",
            "type": "string"
        }
    },
    "elements.image.style.stroke": {
        "desc": "笔画颜色。",
        "uiControl": {
            "default": "null",
            "type": "string"
        }
    },
    "elements.image.style.lineWidth": {
        "desc": "笔画宽度。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.image.style.shadowBlur": {
        "desc": "阴影宽度。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.image.style.shadowOffsetX": {
        "desc": "阴影 X 方向偏移。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.image.style.shadowOffsetY": {
        "desc": "阴影 Y 方向偏移。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.image.style.shadowColor": {
        "desc": "阴影颜色。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.image.focus": {
        "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在高亮图形时，是否淡出其它数据的图形已达到聚焦的效果。支持如下配置：\n\n+ `'none'` 不淡出其它图形，默认使用该配置。\n+ `'self'` 只聚焦（不淡出）当前高亮的数据的图形。\n+ `'series'` 聚焦当前高亮的数据所在的系列的所有图形。",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "elements.image.blurScope": {
        "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在开启`focus`的时候，可以通过`blurScope`配置淡出的范围。支持如下配置\n\n+ `'coordinateSystem'` 淡出范围为坐标系，默认使用该配置。\n+ `'series'` 淡出范围为系列。\n+ `'global'` 淡出范围为全局。",
        "uiControl": {
            "default": "'coordinateSystem'",
            "type": "string"
        }
    },
    "elements.image.onclick": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.onmouseover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.onmouseout": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.onmousemove": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.onmousewheel": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.onmousedown": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.onmouseup": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.ondrag": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.ondragstart": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.ondragend": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.ondragenter": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.ondragleave": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.ondragover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.ondrop": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text": {
        "desc": "文本块。",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.text.type": {
        "desc": "用 setOption 首次设定图形元素时必须指定。\n可取值：\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
        "uiControl": {
            "default": "text",
            "type": "string"
        }
    },
    "elements.text.id": {
        "desc": "id 用于在更新或删除图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\n\n\n### $action(string) = 'merge'\n\nsetOption 时指定本次对该图形元素的操作行为。\n\n可取值：\n+ `'merge'`：如果已有元素，则新的配置项和已有的设定进行 merge。如果没有则新建。\n+ `'replace'`：如果已有元素，删除之，新建元素替代之。\n+ `'remove'`：删除元素。",
        "uiControl": {
            "default": "undefined",
            "type": "string"
        }
    },
    "elements.text.x": {
        "desc": "元素的 x 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.text.y": {
        "desc": "元素的 y 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.text.rotation": {
        "desc": "元素的旋转",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.text.scaleX": {
        "desc": "元素在 x 方向上的缩放。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.text.scaleY": {
        "desc": "元素在 y 方向上的缩放。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.text.originX": {
        "desc": "元素旋转和缩放原点的 x 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.text.originY": {
        "desc": "元素旋转和缩放原点的 y 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.text.left": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-text.left) 和 [right](~graphic.elements-text.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-text.left) 或 [right](~graphic.elements-text.right)，则 [shape](~graphic.elements-text.shape) 里的 `x`、`cx` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.text.right": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-text.left) 和 [right](~graphic.elements-text.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-text.left) 或 [right](~graphic.elements-text.right)，则 [shape](~graphic.elements-text.shape) 里的 `x`、`cx` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.text.top": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-text.top) 和 [bottom](~graphic.elements-text.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-text.top) 或 [bottom](~graphic.elements-text.bottom)，则 [shape](~graphic.elements-text.shape) 里的 `y`、`cy` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.text.bottom": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-text.top) 和 [bottom](~graphic.elements-text.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-text.top) 或 [bottom](~graphic.elements-text.bottom)，则 [shape](~graphic.elements-text.shape) 里的 `y`、`cy` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.text.bounding": {
        "desc": "决定此图形元素在定位时，对自身的包围盒计算方式。\n\n参见例子：\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\n可取值：\n\n+ `'all'`：（默认）\n表示用自身以及子节点整体的经过 transform 后的包围盒进行定位。\n这种方式易于使整体都限制在父元素范围中。\n\n+ `'raw'`：\n表示仅仅用自身（不包括子节点）的没经过 tranform 的包围盒进行定位。\n这种方式易于内容超出父元素范围的定位方式。",
        "uiControl": {
            "default": "'all'",
            "type": "string"
        }
    },
    "elements.text.z": {
        "desc": "z 方向的高度，决定层叠关系。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.text.zlevel": {
        "desc": "决定此元素绘制在哪个 canvas 层中。注意，越多 canvas 层会占用越多资源。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.text.info": {
        "desc": "用户定义的任意数据，可以在 event listener 中访问，如：\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
        "uiControl": {
            "type": "*"
        }
    },
    "elements.text.silent": {
        "desc": "是否不响应鼠标以及触摸事件。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.text.invisible": {
        "desc": "节点是否可见。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.text.ignore": {
        "desc": "节点是否完全被忽略（既不渲染，也不响应事件）。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.text.textContent": {
        "desc": "这是一个文本定义，附着在一个节点上，会依据 `textConfig` 配置，相对于节点布局。\n\n\n里面的属性同于 [text](option.html#graphic.elements-text)。",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.text.textConfig": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.text.textConfig.position": {
        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
        "uiControl": {
            "default": "'inside'",
            "type": ""
        }
    },
    "elements.text.textConfig.rotation": {
        "desc": "`textContent` 的旋转弧度。",
        "uiControl": {
            "type": "number"
        }
    },
    "elements.text.textConfig.layoutRect": {
        "desc": "`textContent` 根据此矩形来布局位置。\n默认是节点的包围盒。\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.text.textConfig.offset": {
        "desc": "`textContent` 的偏移。\n\n`offset` 和 `position` 的区别是，`offset` 是旋转（rotation）后计算。\n\n#### origin\n\n`origin` 相对于节点的包围盒。\n可以是百分数。\n如果指定为 `'center'`，则定位在包围盒中心。\n\n只有当 `position` and `rotation` 都设置时，生效。\n\n+ 如 `[12, 33]`\n+ 或如 `['50%', '50%']`\n+ 'center'",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.text.textConfig.distance": {
        "desc": "距离 `layoutRect` 的距离。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.text.textConfig.local": {
        "desc": "如果 `true` 的话，会采用节点的 transform。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.text.textConfig.insideFill": {
        "desc": "`insideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\n在绝大多数场景下，\"auto-calculated-fill\" 是白色。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.text.textConfig.insideStroke": {
        "desc": "`insideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会和节点的 `fill` 相同，如果 `fill` 没有的话则为 `null`。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.text.textConfig.outsideFill": {
        "desc": "`outsideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 \"inside\"，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.text.textConfig.outsideStroke": {
        "desc": "`outsideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 不是 \"inside\"，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会为一个近似于白色的颜色，来区别于背景。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.text.textConfig.inside": {
        "desc": "如果确定文本是在节点中的话，则此可设置为 `true`，避免 echarts 额外猜测。",
        "uiControl": {
            "type": "boolean"
        }
    },
    "elements.text.cursor": {
        "desc": "鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 `cursor`。",
        "uiControl": {
            "type": "enum",
            "options": "'auto','pointer','move'"
        }
    },
    "elements.text.draggable": {
        "desc": "图形元素是否可以被拖拽。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.text.progressive": {
        "desc": "是否渐进式渲染。当图形元素过多时才使用。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.text.style": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.text.style.text": {
        "desc": "文本块文字。可以使用 `\\n` 来换行。",
        "uiControl": {
            "default": "''",
            "type": "string"
        }
    },
    "elements.text.style.x": {
        "desc": "图形元素的左上角在父节点坐标系（以父节点左上角为原点）中的横坐标值。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.text.style.y": {
        "desc": "图形元素的左上角在父节点坐标系（以父节点左上角为原点）中的纵坐标值。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.text.style.font": {
        "desc": "字体大小、字体类型、粗细、字体样式。格式参见 [css font](https://developer.mozilla.org/en-US/docs/Web/CSS/font)。\n\n例如：\n```\n// size | family\nfont: '2em \"STHeiti\", sans-serif'\n\n// style | weight | size | family\nfont: 'italic bolder 16px cursive'\n\n// weight | size | family\nfont: 'bolder 2em \"Microsoft YaHei\", sans-serif'\n```",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.text.style.textAlign": {
        "desc": "水平对齐方式，取值：`'left'`, `'center'`, `'right'`。\n\n如果为 `'left'`，表示文本最左端在 `x` 值上。如果为 `'right'`，表示文本最右端在 `x` 值上。",
        "uiControl": {
            "default": "'left'",
            "type": "string"
        }
    },
    "elements.text.style.textVerticalAlign": {
        "desc": "垂直对齐方式，取值：`'top'`, `'middle'`, `'bottom'`。\n\n\n\n注：关于图形元素中更多的样式设置（例如 [富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)），参见 [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable) 中的 style 相关属性。\n\n注意，这里图形元素的样式属性名称直接源于 zrender，和 `echarts label`、`echarts itemStyle` 等处同样含义的样式属性名称或有不同。例如，有如下对应：\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.text.style.fill": {
        "desc": "填充色。",
        "uiControl": {
            "default": "'#000'",
            "type": "string"
        }
    },
    "elements.text.style.stroke": {
        "desc": "笔画颜色。",
        "uiControl": {
            "default": "null",
            "type": "string"
        }
    },
    "elements.text.style.lineWidth": {
        "desc": "笔画宽度。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.text.style.shadowBlur": {
        "desc": "阴影宽度。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.text.style.shadowOffsetX": {
        "desc": "阴影 X 方向偏移。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.text.style.shadowOffsetY": {
        "desc": "阴影 Y 方向偏移。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.text.style.shadowColor": {
        "desc": "阴影颜色。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.text.focus": {
        "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在高亮图形时，是否淡出其它数据的图形已达到聚焦的效果。支持如下配置：\n\n+ `'none'` 不淡出其它图形，默认使用该配置。\n+ `'self'` 只聚焦（不淡出）当前高亮的数据的图形。\n+ `'series'` 聚焦当前高亮的数据所在的系列的所有图形。",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "elements.text.blurScope": {
        "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在开启`focus`的时候，可以通过`blurScope`配置淡出的范围。支持如下配置\n\n+ `'coordinateSystem'` 淡出范围为坐标系，默认使用该配置。\n+ `'series'` 淡出范围为系列。\n+ `'global'` 淡出范围为全局。",
        "uiControl": {
            "default": "'coordinateSystem'",
            "type": "string"
        }
    },
    "elements.text.onclick": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.onmouseover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.onmouseout": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.onmousemove": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.onmousewheel": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.onmousedown": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.onmouseup": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.ondrag": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.ondragstart": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.ondragend": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.ondragenter": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.ondragleave": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.ondragover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.ondrop": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect": {
        "desc": "矩形。",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.rect.type": {
        "desc": "用 setOption 首次设定图形元素时必须指定。\n可取值：\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
        "uiControl": {
            "default": "rect",
            "type": "string"
        }
    },
    "elements.rect.id": {
        "desc": "id 用于在更新或删除图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\n\n\n### $action(string) = 'merge'\n\nsetOption 时指定本次对该图形元素的操作行为。\n\n可取值：\n+ `'merge'`：如果已有元素，则新的配置项和已有的设定进行 merge。如果没有则新建。\n+ `'replace'`：如果已有元素，删除之，新建元素替代之。\n+ `'remove'`：删除元素。",
        "uiControl": {
            "default": "undefined",
            "type": "string"
        }
    },
    "elements.rect.x": {
        "desc": "元素的 x 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.rect.y": {
        "desc": "元素的 y 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.rect.rotation": {
        "desc": "元素的旋转",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.rect.scaleX": {
        "desc": "元素在 x 方向上的缩放。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.rect.scaleY": {
        "desc": "元素在 y 方向上的缩放。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.rect.originX": {
        "desc": "元素旋转和缩放原点的 x 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.rect.originY": {
        "desc": "元素旋转和缩放原点的 y 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.rect.left": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-rect.left) 和 [right](~graphic.elements-rect.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-rect.left) 或 [right](~graphic.elements-rect.right)，则 [shape](~graphic.elements-rect.shape) 里的 `x`、`cx` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.rect.right": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-rect.left) 和 [right](~graphic.elements-rect.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-rect.left) 或 [right](~graphic.elements-rect.right)，则 [shape](~graphic.elements-rect.shape) 里的 `x`、`cx` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.rect.top": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-rect.top) 和 [bottom](~graphic.elements-rect.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-rect.top) 或 [bottom](~graphic.elements-rect.bottom)，则 [shape](~graphic.elements-rect.shape) 里的 `y`、`cy` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.rect.bottom": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-rect.top) 和 [bottom](~graphic.elements-rect.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-rect.top) 或 [bottom](~graphic.elements-rect.bottom)，则 [shape](~graphic.elements-rect.shape) 里的 `y`、`cy` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.rect.bounding": {
        "desc": "决定此图形元素在定位时，对自身的包围盒计算方式。\n\n参见例子：\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\n可取值：\n\n+ `'all'`：（默认）\n表示用自身以及子节点整体的经过 transform 后的包围盒进行定位。\n这种方式易于使整体都限制在父元素范围中。\n\n+ `'raw'`：\n表示仅仅用自身（不包括子节点）的没经过 tranform 的包围盒进行定位。\n这种方式易于内容超出父元素范围的定位方式。",
        "uiControl": {
            "default": "'all'",
            "type": "string"
        }
    },
    "elements.rect.z": {
        "desc": "z 方向的高度，决定层叠关系。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.rect.zlevel": {
        "desc": "决定此元素绘制在哪个 canvas 层中。注意，越多 canvas 层会占用越多资源。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.rect.info": {
        "desc": "用户定义的任意数据，可以在 event listener 中访问，如：\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
        "uiControl": {
            "type": "*"
        }
    },
    "elements.rect.silent": {
        "desc": "是否不响应鼠标以及触摸事件。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.rect.invisible": {
        "desc": "节点是否可见。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.rect.ignore": {
        "desc": "节点是否完全被忽略（既不渲染，也不响应事件）。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.rect.textContent": {
        "desc": "这是一个文本定义，附着在一个节点上，会依据 `textConfig` 配置，相对于节点布局。\n\n\n里面的属性同于 [text](option.html#graphic.elements-text)。",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.rect.textConfig": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.rect.textConfig.position": {
        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
        "uiControl": {
            "default": "'inside'",
            "type": ""
        }
    },
    "elements.rect.textConfig.rotation": {
        "desc": "`textContent` 的旋转弧度。",
        "uiControl": {
            "type": "number"
        }
    },
    "elements.rect.textConfig.layoutRect": {
        "desc": "`textContent` 根据此矩形来布局位置。\n默认是节点的包围盒。\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.rect.textConfig.offset": {
        "desc": "`textContent` 的偏移。\n\n`offset` 和 `position` 的区别是，`offset` 是旋转（rotation）后计算。\n\n#### origin\n\n`origin` 相对于节点的包围盒。\n可以是百分数。\n如果指定为 `'center'`，则定位在包围盒中心。\n\n只有当 `position` and `rotation` 都设置时，生效。\n\n+ 如 `[12, 33]`\n+ 或如 `['50%', '50%']`\n+ 'center'",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.rect.textConfig.distance": {
        "desc": "距离 `layoutRect` 的距离。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.rect.textConfig.local": {
        "desc": "如果 `true` 的话，会采用节点的 transform。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.rect.textConfig.insideFill": {
        "desc": "`insideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\n在绝大多数场景下，\"auto-calculated-fill\" 是白色。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.rect.textConfig.insideStroke": {
        "desc": "`insideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会和节点的 `fill` 相同，如果 `fill` 没有的话则为 `null`。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.rect.textConfig.outsideFill": {
        "desc": "`outsideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 \"inside\"，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.rect.textConfig.outsideStroke": {
        "desc": "`outsideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 不是 \"inside\"，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会为一个近似于白色的颜色，来区别于背景。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.rect.textConfig.inside": {
        "desc": "如果确定文本是在节点中的话，则此可设置为 `true`，避免 echarts 额外猜测。",
        "uiControl": {
            "type": "boolean"
        }
    },
    "elements.rect.cursor": {
        "desc": "鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 `cursor`。",
        "uiControl": {
            "type": "enum",
            "options": "'auto','pointer','move'"
        }
    },
    "elements.rect.draggable": {
        "desc": "图形元素是否可以被拖拽。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.rect.progressive": {
        "desc": "是否渐进式渲染。当图形元素过多时才使用。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.rect.shape": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.rect.shape.x": {
        "desc": "图形元素的左上角在父节点坐标系（以父节点左上角为原点）中的横坐标值。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.rect.shape.y": {
        "desc": "图形元素的左上角在父节点坐标系（以父节点左上角为原点）中的纵坐标值。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.rect.shape.width": {
        "desc": "图形元素的宽度。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.rect.shape.height": {
        "desc": "图形元素的高度。",
        "uiControl": {
            "default": "0",
            "type": "numbr"
        }
    },
    "elements.rect.shape.r": {
        "desc": "可以用于设置圆角矩形。`r: [r1, r2, r3, r4]`，\n左上、右上、右下、左下角的半径依次为r1、r2、r3、r4。\n\n可以缩写，例如：\n+ `r` 缩写为 `1`         相当于 `[1, 1, 1, 1]`\n+ `r` 缩写为 `[1]`       相当于 `[1, 1, 1, 1]`\n+ `r` 缩写为 `[1, 2]`    相当于 `[1, 2, 1, 2]`\n+ `r` 缩写为 `[1, 2, 3]1 相当于 `[1, 2, 3, 2]`",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.rect.style": {
        "desc": "注：关于图形元素中更多的样式设置（例如 [富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)），参见 [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable) 中的 style 相关属性。\n\n注意，这里图形元素的样式属性名称直接源于 zrender，和 `echarts label`、`echarts itemStyle` 等处同样含义的样式属性名称或有不同。例如，有如下对应：\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.rect.style.fill": {
        "desc": "填充色。",
        "uiControl": {
            "default": "'#000'",
            "type": "string"
        }
    },
    "elements.rect.style.stroke": {
        "desc": "笔画颜色。",
        "uiControl": {
            "default": "null",
            "type": "string"
        }
    },
    "elements.rect.style.lineWidth": {
        "desc": "笔画宽度。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.rect.style.shadowBlur": {
        "desc": "阴影宽度。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.rect.style.shadowOffsetX": {
        "desc": "阴影 X 方向偏移。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.rect.style.shadowOffsetY": {
        "desc": "阴影 Y 方向偏移。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.rect.style.shadowColor": {
        "desc": "阴影颜色。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.rect.focus": {
        "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在高亮图形时，是否淡出其它数据的图形已达到聚焦的效果。支持如下配置：\n\n+ `'none'` 不淡出其它图形，默认使用该配置。\n+ `'self'` 只聚焦（不淡出）当前高亮的数据的图形。\n+ `'series'` 聚焦当前高亮的数据所在的系列的所有图形。",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "elements.rect.blurScope": {
        "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在开启`focus`的时候，可以通过`blurScope`配置淡出的范围。支持如下配置\n\n+ `'coordinateSystem'` 淡出范围为坐标系，默认使用该配置。\n+ `'series'` 淡出范围为系列。\n+ `'global'` 淡出范围为全局。",
        "uiControl": {
            "default": "'coordinateSystem'",
            "type": "string"
        }
    },
    "elements.rect.onclick": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.onmouseover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.onmouseout": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.onmousemove": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.onmousewheel": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.onmousedown": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.onmouseup": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.ondrag": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.ondragstart": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.ondragend": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.ondragenter": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.ondragleave": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.ondragover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.ondrop": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle": {
        "desc": "圆。",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.circle.type": {
        "desc": "用 setOption 首次设定图形元素时必须指定。\n可取值：\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
        "uiControl": {
            "default": "circle",
            "type": "string"
        }
    },
    "elements.circle.id": {
        "desc": "id 用于在更新或删除图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\n\n\n### $action(string) = 'merge'\n\nsetOption 时指定本次对该图形元素的操作行为。\n\n可取值：\n+ `'merge'`：如果已有元素，则新的配置项和已有的设定进行 merge。如果没有则新建。\n+ `'replace'`：如果已有元素，删除之，新建元素替代之。\n+ `'remove'`：删除元素。",
        "uiControl": {
            "default": "undefined",
            "type": "string"
        }
    },
    "elements.circle.x": {
        "desc": "元素的 x 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.circle.y": {
        "desc": "元素的 y 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.circle.rotation": {
        "desc": "元素的旋转",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.circle.scaleX": {
        "desc": "元素在 x 方向上的缩放。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.circle.scaleY": {
        "desc": "元素在 y 方向上的缩放。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.circle.originX": {
        "desc": "元素旋转和缩放原点的 x 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.circle.originY": {
        "desc": "元素旋转和缩放原点的 y 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.circle.left": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-circle.left) 和 [right](~graphic.elements-circle.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-circle.left) 或 [right](~graphic.elements-circle.right)，则 [shape](~graphic.elements-circle.shape) 里的 `x`、`cx` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.circle.right": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-circle.left) 和 [right](~graphic.elements-circle.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-circle.left) 或 [right](~graphic.elements-circle.right)，则 [shape](~graphic.elements-circle.shape) 里的 `x`、`cx` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.circle.top": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-circle.top) 和 [bottom](~graphic.elements-circle.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-circle.top) 或 [bottom](~graphic.elements-circle.bottom)，则 [shape](~graphic.elements-circle.shape) 里的 `y`、`cy` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.circle.bottom": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-circle.top) 和 [bottom](~graphic.elements-circle.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-circle.top) 或 [bottom](~graphic.elements-circle.bottom)，则 [shape](~graphic.elements-circle.shape) 里的 `y`、`cy` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.circle.bounding": {
        "desc": "决定此图形元素在定位时，对自身的包围盒计算方式。\n\n参见例子：\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\n可取值：\n\n+ `'all'`：（默认）\n表示用自身以及子节点整体的经过 transform 后的包围盒进行定位。\n这种方式易于使整体都限制在父元素范围中。\n\n+ `'raw'`：\n表示仅仅用自身（不包括子节点）的没经过 tranform 的包围盒进行定位。\n这种方式易于内容超出父元素范围的定位方式。",
        "uiControl": {
            "default": "'all'",
            "type": "string"
        }
    },
    "elements.circle.z": {
        "desc": "z 方向的高度，决定层叠关系。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.circle.zlevel": {
        "desc": "决定此元素绘制在哪个 canvas 层中。注意，越多 canvas 层会占用越多资源。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.circle.info": {
        "desc": "用户定义的任意数据，可以在 event listener 中访问，如：\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
        "uiControl": {
            "type": "*"
        }
    },
    "elements.circle.silent": {
        "desc": "是否不响应鼠标以及触摸事件。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.circle.invisible": {
        "desc": "节点是否可见。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.circle.ignore": {
        "desc": "节点是否完全被忽略（既不渲染，也不响应事件）。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.circle.textContent": {
        "desc": "这是一个文本定义，附着在一个节点上，会依据 `textConfig` 配置，相对于节点布局。\n\n\n里面的属性同于 [text](option.html#graphic.elements-text)。",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.circle.textConfig": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.circle.textConfig.position": {
        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
        "uiControl": {
            "default": "'inside'",
            "type": ""
        }
    },
    "elements.circle.textConfig.rotation": {
        "desc": "`textContent` 的旋转弧度。",
        "uiControl": {
            "type": "number"
        }
    },
    "elements.circle.textConfig.layoutRect": {
        "desc": "`textContent` 根据此矩形来布局位置。\n默认是节点的包围盒。\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.circle.textConfig.offset": {
        "desc": "`textContent` 的偏移。\n\n`offset` 和 `position` 的区别是，`offset` 是旋转（rotation）后计算。\n\n#### origin\n\n`origin` 相对于节点的包围盒。\n可以是百分数。\n如果指定为 `'center'`，则定位在包围盒中心。\n\n只有当 `position` and `rotation` 都设置时，生效。\n\n+ 如 `[12, 33]`\n+ 或如 `['50%', '50%']`\n+ 'center'",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.circle.textConfig.distance": {
        "desc": "距离 `layoutRect` 的距离。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.circle.textConfig.local": {
        "desc": "如果 `true` 的话，会采用节点的 transform。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.circle.textConfig.insideFill": {
        "desc": "`insideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\n在绝大多数场景下，\"auto-calculated-fill\" 是白色。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.circle.textConfig.insideStroke": {
        "desc": "`insideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会和节点的 `fill` 相同，如果 `fill` 没有的话则为 `null`。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.circle.textConfig.outsideFill": {
        "desc": "`outsideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 \"inside\"，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.circle.textConfig.outsideStroke": {
        "desc": "`outsideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 不是 \"inside\"，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会为一个近似于白色的颜色，来区别于背景。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.circle.textConfig.inside": {
        "desc": "如果确定文本是在节点中的话，则此可设置为 `true`，避免 echarts 额外猜测。",
        "uiControl": {
            "type": "boolean"
        }
    },
    "elements.circle.cursor": {
        "desc": "鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 `cursor`。",
        "uiControl": {
            "type": "enum",
            "options": "'auto','pointer','move'"
        }
    },
    "elements.circle.draggable": {
        "desc": "图形元素是否可以被拖拽。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.circle.progressive": {
        "desc": "是否渐进式渲染。当图形元素过多时才使用。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.circle.shape": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.circle.shape.cx": {
        "desc": "图形元素的中心在父节点坐标系（以父节点左上角为原点）中的横坐标值。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.circle.shape.cy": {
        "desc": "图形元素的中心在父节点坐标系（以父节点左上角为原点）中的纵坐标值。",
        "uiControl": {
            "default": "0",
            "type": "numbr"
        }
    },
    "elements.circle.shape.r": {
        "desc": "外半径。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.circle.style": {
        "desc": "注：关于图形元素中更多的样式设置（例如 [富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)），参见 [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable) 中的 style 相关属性。\n\n注意，这里图形元素的样式属性名称直接源于 zrender，和 `echarts label`、`echarts itemStyle` 等处同样含义的样式属性名称或有不同。例如，有如下对应：\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.circle.style.fill": {
        "desc": "填充色。",
        "uiControl": {
            "default": "'#000'",
            "type": "string"
        }
    },
    "elements.circle.style.stroke": {
        "desc": "笔画颜色。",
        "uiControl": {
            "default": "null",
            "type": "string"
        }
    },
    "elements.circle.style.lineWidth": {
        "desc": "笔画宽度。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.circle.style.shadowBlur": {
        "desc": "阴影宽度。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.circle.style.shadowOffsetX": {
        "desc": "阴影 X 方向偏移。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.circle.style.shadowOffsetY": {
        "desc": "阴影 Y 方向偏移。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.circle.style.shadowColor": {
        "desc": "阴影颜色。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.circle.focus": {
        "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在高亮图形时，是否淡出其它数据的图形已达到聚焦的效果。支持如下配置：\n\n+ `'none'` 不淡出其它图形，默认使用该配置。\n+ `'self'` 只聚焦（不淡出）当前高亮的数据的图形。\n+ `'series'` 聚焦当前高亮的数据所在的系列的所有图形。",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "elements.circle.blurScope": {
        "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在开启`focus`的时候，可以通过`blurScope`配置淡出的范围。支持如下配置\n\n+ `'coordinateSystem'` 淡出范围为坐标系，默认使用该配置。\n+ `'series'` 淡出范围为系列。\n+ `'global'` 淡出范围为全局。",
        "uiControl": {
            "default": "'coordinateSystem'",
            "type": "string"
        }
    },
    "elements.circle.onclick": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.onmouseover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.onmouseout": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.onmousemove": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.onmousewheel": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.onmousedown": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.onmouseup": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.ondrag": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.ondragstart": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.ondragend": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.ondragenter": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.ondragleave": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.ondragover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.ondrop": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring": {
        "desc": "圆环。",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.ring.type": {
        "desc": "用 setOption 首次设定图形元素时必须指定。\n可取值：\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
        "uiControl": {
            "default": "ring",
            "type": "string"
        }
    },
    "elements.ring.id": {
        "desc": "id 用于在更新或删除图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\n\n\n### $action(string) = 'merge'\n\nsetOption 时指定本次对该图形元素的操作行为。\n\n可取值：\n+ `'merge'`：如果已有元素，则新的配置项和已有的设定进行 merge。如果没有则新建。\n+ `'replace'`：如果已有元素，删除之，新建元素替代之。\n+ `'remove'`：删除元素。",
        "uiControl": {
            "default": "undefined",
            "type": "string"
        }
    },
    "elements.ring.x": {
        "desc": "元素的 x 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.ring.y": {
        "desc": "元素的 y 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.ring.rotation": {
        "desc": "元素的旋转",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.ring.scaleX": {
        "desc": "元素在 x 方向上的缩放。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.ring.scaleY": {
        "desc": "元素在 y 方向上的缩放。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.ring.originX": {
        "desc": "元素旋转和缩放原点的 x 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.ring.originY": {
        "desc": "元素旋转和缩放原点的 y 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.ring.left": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-ring.left) 和 [right](~graphic.elements-ring.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-ring.left) 或 [right](~graphic.elements-ring.right)，则 [shape](~graphic.elements-ring.shape) 里的 `x`、`cx` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.ring.right": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-ring.left) 和 [right](~graphic.elements-ring.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-ring.left) 或 [right](~graphic.elements-ring.right)，则 [shape](~graphic.elements-ring.shape) 里的 `x`、`cx` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.ring.top": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-ring.top) 和 [bottom](~graphic.elements-ring.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-ring.top) 或 [bottom](~graphic.elements-ring.bottom)，则 [shape](~graphic.elements-ring.shape) 里的 `y`、`cy` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.ring.bottom": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-ring.top) 和 [bottom](~graphic.elements-ring.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-ring.top) 或 [bottom](~graphic.elements-ring.bottom)，则 [shape](~graphic.elements-ring.shape) 里的 `y`、`cy` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.ring.bounding": {
        "desc": "决定此图形元素在定位时，对自身的包围盒计算方式。\n\n参见例子：\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\n可取值：\n\n+ `'all'`：（默认）\n表示用自身以及子节点整体的经过 transform 后的包围盒进行定位。\n这种方式易于使整体都限制在父元素范围中。\n\n+ `'raw'`：\n表示仅仅用自身（不包括子节点）的没经过 tranform 的包围盒进行定位。\n这种方式易于内容超出父元素范围的定位方式。",
        "uiControl": {
            "default": "'all'",
            "type": "string"
        }
    },
    "elements.ring.z": {
        "desc": "z 方向的高度，决定层叠关系。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.ring.zlevel": {
        "desc": "决定此元素绘制在哪个 canvas 层中。注意，越多 canvas 层会占用越多资源。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.ring.info": {
        "desc": "用户定义的任意数据，可以在 event listener 中访问，如：\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
        "uiControl": {
            "type": "*"
        }
    },
    "elements.ring.silent": {
        "desc": "是否不响应鼠标以及触摸事件。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.ring.invisible": {
        "desc": "节点是否可见。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.ring.ignore": {
        "desc": "节点是否完全被忽略（既不渲染，也不响应事件）。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.ring.textContent": {
        "desc": "这是一个文本定义，附着在一个节点上，会依据 `textConfig` 配置，相对于节点布局。\n\n\n里面的属性同于 [text](option.html#graphic.elements-text)。",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.ring.textConfig": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.ring.textConfig.position": {
        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
        "uiControl": {
            "default": "'inside'",
            "type": ""
        }
    },
    "elements.ring.textConfig.rotation": {
        "desc": "`textContent` 的旋转弧度。",
        "uiControl": {
            "type": "number"
        }
    },
    "elements.ring.textConfig.layoutRect": {
        "desc": "`textContent` 根据此矩形来布局位置。\n默认是节点的包围盒。\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.ring.textConfig.offset": {
        "desc": "`textContent` 的偏移。\n\n`offset` 和 `position` 的区别是，`offset` 是旋转（rotation）后计算。\n\n#### origin\n\n`origin` 相对于节点的包围盒。\n可以是百分数。\n如果指定为 `'center'`，则定位在包围盒中心。\n\n只有当 `position` and `rotation` 都设置时，生效。\n\n+ 如 `[12, 33]`\n+ 或如 `['50%', '50%']`\n+ 'center'",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.ring.textConfig.distance": {
        "desc": "距离 `layoutRect` 的距离。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.ring.textConfig.local": {
        "desc": "如果 `true` 的话，会采用节点的 transform。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.ring.textConfig.insideFill": {
        "desc": "`insideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\n在绝大多数场景下，\"auto-calculated-fill\" 是白色。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.ring.textConfig.insideStroke": {
        "desc": "`insideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会和节点的 `fill` 相同，如果 `fill` 没有的话则为 `null`。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.ring.textConfig.outsideFill": {
        "desc": "`outsideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 \"inside\"，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.ring.textConfig.outsideStroke": {
        "desc": "`outsideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 不是 \"inside\"，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会为一个近似于白色的颜色，来区别于背景。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.ring.textConfig.inside": {
        "desc": "如果确定文本是在节点中的话，则此可设置为 `true`，避免 echarts 额外猜测。",
        "uiControl": {
            "type": "boolean"
        }
    },
    "elements.ring.cursor": {
        "desc": "鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 `cursor`。",
        "uiControl": {
            "type": "enum",
            "options": "'auto','pointer','move'"
        }
    },
    "elements.ring.draggable": {
        "desc": "图形元素是否可以被拖拽。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.ring.progressive": {
        "desc": "是否渐进式渲染。当图形元素过多时才使用。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.ring.shape": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.ring.shape.cx": {
        "desc": "图形元素的中心在父节点坐标系（以父节点左上角为原点）中的横坐标值。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.ring.shape.cy": {
        "desc": "图形元素的中心在父节点坐标系（以父节点左上角为原点）中的纵坐标值。",
        "uiControl": {
            "default": "0",
            "type": "numbr"
        }
    },
    "elements.ring.shape.r": {
        "desc": "外半径。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.ring.shape.r0": {
        "desc": "内半径。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.ring.style": {
        "desc": "注：关于图形元素中更多的样式设置（例如 [富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)），参见 [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable) 中的 style 相关属性。\n\n注意，这里图形元素的样式属性名称直接源于 zrender，和 `echarts label`、`echarts itemStyle` 等处同样含义的样式属性名称或有不同。例如，有如下对应：\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.ring.style.fill": {
        "desc": "填充色。",
        "uiControl": {
            "default": "'#000'",
            "type": "string"
        }
    },
    "elements.ring.style.stroke": {
        "desc": "笔画颜色。",
        "uiControl": {
            "default": "null",
            "type": "string"
        }
    },
    "elements.ring.style.lineWidth": {
        "desc": "笔画宽度。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.ring.style.shadowBlur": {
        "desc": "阴影宽度。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.ring.style.shadowOffsetX": {
        "desc": "阴影 X 方向偏移。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.ring.style.shadowOffsetY": {
        "desc": "阴影 Y 方向偏移。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.ring.style.shadowColor": {
        "desc": "阴影颜色。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.ring.focus": {
        "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在高亮图形时，是否淡出其它数据的图形已达到聚焦的效果。支持如下配置：\n\n+ `'none'` 不淡出其它图形，默认使用该配置。\n+ `'self'` 只聚焦（不淡出）当前高亮的数据的图形。\n+ `'series'` 聚焦当前高亮的数据所在的系列的所有图形。",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "elements.ring.blurScope": {
        "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在开启`focus`的时候，可以通过`blurScope`配置淡出的范围。支持如下配置\n\n+ `'coordinateSystem'` 淡出范围为坐标系，默认使用该配置。\n+ `'series'` 淡出范围为系列。\n+ `'global'` 淡出范围为全局。",
        "uiControl": {
            "default": "'coordinateSystem'",
            "type": "string"
        }
    },
    "elements.ring.onclick": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.onmouseover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.onmouseout": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.onmousemove": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.onmousewheel": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.onmousedown": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.onmouseup": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.ondrag": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.ondragstart": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.ondragend": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.ondragenter": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.ondragleave": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.ondragover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.ondrop": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector": {
        "desc": "扇形。",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.sector.type": {
        "desc": "用 setOption 首次设定图形元素时必须指定。\n可取值：\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
        "uiControl": {
            "default": "sector",
            "type": "string"
        }
    },
    "elements.sector.id": {
        "desc": "id 用于在更新或删除图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\n\n\n### $action(string) = 'merge'\n\nsetOption 时指定本次对该图形元素的操作行为。\n\n可取值：\n+ `'merge'`：如果已有元素，则新的配置项和已有的设定进行 merge。如果没有则新建。\n+ `'replace'`：如果已有元素，删除之，新建元素替代之。\n+ `'remove'`：删除元素。",
        "uiControl": {
            "default": "undefined",
            "type": "string"
        }
    },
    "elements.sector.x": {
        "desc": "元素的 x 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.sector.y": {
        "desc": "元素的 y 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.sector.rotation": {
        "desc": "元素的旋转",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.sector.scaleX": {
        "desc": "元素在 x 方向上的缩放。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.sector.scaleY": {
        "desc": "元素在 y 方向上的缩放。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.sector.originX": {
        "desc": "元素旋转和缩放原点的 x 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.sector.originY": {
        "desc": "元素旋转和缩放原点的 y 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.sector.left": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-sector.left) 和 [right](~graphic.elements-sector.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-sector.left) 或 [right](~graphic.elements-sector.right)，则 [shape](~graphic.elements-sector.shape) 里的 `x`、`cx` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.sector.right": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-sector.left) 和 [right](~graphic.elements-sector.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-sector.left) 或 [right](~graphic.elements-sector.right)，则 [shape](~graphic.elements-sector.shape) 里的 `x`、`cx` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.sector.top": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-sector.top) 和 [bottom](~graphic.elements-sector.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-sector.top) 或 [bottom](~graphic.elements-sector.bottom)，则 [shape](~graphic.elements-sector.shape) 里的 `y`、`cy` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.sector.bottom": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-sector.top) 和 [bottom](~graphic.elements-sector.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-sector.top) 或 [bottom](~graphic.elements-sector.bottom)，则 [shape](~graphic.elements-sector.shape) 里的 `y`、`cy` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.sector.bounding": {
        "desc": "决定此图形元素在定位时，对自身的包围盒计算方式。\n\n参见例子：\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\n可取值：\n\n+ `'all'`：（默认）\n表示用自身以及子节点整体的经过 transform 后的包围盒进行定位。\n这种方式易于使整体都限制在父元素范围中。\n\n+ `'raw'`：\n表示仅仅用自身（不包括子节点）的没经过 tranform 的包围盒进行定位。\n这种方式易于内容超出父元素范围的定位方式。",
        "uiControl": {
            "default": "'all'",
            "type": "string"
        }
    },
    "elements.sector.z": {
        "desc": "z 方向的高度，决定层叠关系。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.sector.zlevel": {
        "desc": "决定此元素绘制在哪个 canvas 层中。注意，越多 canvas 层会占用越多资源。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.sector.info": {
        "desc": "用户定义的任意数据，可以在 event listener 中访问，如：\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
        "uiControl": {
            "type": "*"
        }
    },
    "elements.sector.silent": {
        "desc": "是否不响应鼠标以及触摸事件。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.sector.invisible": {
        "desc": "节点是否可见。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.sector.ignore": {
        "desc": "节点是否完全被忽略（既不渲染，也不响应事件）。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.sector.textContent": {
        "desc": "这是一个文本定义，附着在一个节点上，会依据 `textConfig` 配置，相对于节点布局。\n\n\n里面的属性同于 [text](option.html#graphic.elements-text)。",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.sector.textConfig": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.sector.textConfig.position": {
        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
        "uiControl": {
            "default": "'inside'",
            "type": ""
        }
    },
    "elements.sector.textConfig.rotation": {
        "desc": "`textContent` 的旋转弧度。",
        "uiControl": {
            "type": "number"
        }
    },
    "elements.sector.textConfig.layoutRect": {
        "desc": "`textContent` 根据此矩形来布局位置。\n默认是节点的包围盒。\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.sector.textConfig.offset": {
        "desc": "`textContent` 的偏移。\n\n`offset` 和 `position` 的区别是，`offset` 是旋转（rotation）后计算。\n\n#### origin\n\n`origin` 相对于节点的包围盒。\n可以是百分数。\n如果指定为 `'center'`，则定位在包围盒中心。\n\n只有当 `position` and `rotation` 都设置时，生效。\n\n+ 如 `[12, 33]`\n+ 或如 `['50%', '50%']`\n+ 'center'",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.sector.textConfig.distance": {
        "desc": "距离 `layoutRect` 的距离。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.sector.textConfig.local": {
        "desc": "如果 `true` 的话，会采用节点的 transform。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.sector.textConfig.insideFill": {
        "desc": "`insideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\n在绝大多数场景下，\"auto-calculated-fill\" 是白色。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.sector.textConfig.insideStroke": {
        "desc": "`insideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会和节点的 `fill` 相同，如果 `fill` 没有的话则为 `null`。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.sector.textConfig.outsideFill": {
        "desc": "`outsideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 \"inside\"，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.sector.textConfig.outsideStroke": {
        "desc": "`outsideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 不是 \"inside\"，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会为一个近似于白色的颜色，来区别于背景。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.sector.textConfig.inside": {
        "desc": "如果确定文本是在节点中的话，则此可设置为 `true`，避免 echarts 额外猜测。",
        "uiControl": {
            "type": "boolean"
        }
    },
    "elements.sector.cursor": {
        "desc": "鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 `cursor`。",
        "uiControl": {
            "type": "enum",
            "options": "'auto','pointer','move'"
        }
    },
    "elements.sector.draggable": {
        "desc": "图形元素是否可以被拖拽。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.sector.progressive": {
        "desc": "是否渐进式渲染。当图形元素过多时才使用。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.sector.shape": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.sector.shape.cx": {
        "desc": "图形元素的中心在父节点坐标系（以父节点左上角为原点）中的横坐标值。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.sector.shape.cy": {
        "desc": "图形元素的中心在父节点坐标系（以父节点左上角为原点）中的纵坐标值。",
        "uiControl": {
            "default": "0",
            "type": "numbr"
        }
    },
    "elements.sector.shape.r": {
        "desc": "外半径。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.sector.shape.r0": {
        "desc": "内半径。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.sector.shape.startAngle": {
        "desc": "开始弧度。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.sector.shape.endAngle": {
        "desc": "结束弧度。",
        "uiControl": {
            "default": "Math.PI * 2",
            "type": "number"
        }
    },
    "elements.sector.shape.clockwise": {
        "desc": "是否顺时针。",
        "uiControl": {
            "default": "true",
            "type": "boolean"
        }
    },
    "elements.sector.style": {
        "desc": "注：关于图形元素中更多的样式设置（例如 [富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)），参见 [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable) 中的 style 相关属性。\n\n注意，这里图形元素的样式属性名称直接源于 zrender，和 `echarts label`、`echarts itemStyle` 等处同样含义的样式属性名称或有不同。例如，有如下对应：\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.sector.style.fill": {
        "desc": "填充色。",
        "uiControl": {
            "default": "'#000'",
            "type": "string"
        }
    },
    "elements.sector.style.stroke": {
        "desc": "笔画颜色。",
        "uiControl": {
            "default": "null",
            "type": "string"
        }
    },
    "elements.sector.style.lineWidth": {
        "desc": "笔画宽度。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.sector.style.shadowBlur": {
        "desc": "阴影宽度。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.sector.style.shadowOffsetX": {
        "desc": "阴影 X 方向偏移。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.sector.style.shadowOffsetY": {
        "desc": "阴影 Y 方向偏移。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.sector.style.shadowColor": {
        "desc": "阴影颜色。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.sector.focus": {
        "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在高亮图形时，是否淡出其它数据的图形已达到聚焦的效果。支持如下配置：\n\n+ `'none'` 不淡出其它图形，默认使用该配置。\n+ `'self'` 只聚焦（不淡出）当前高亮的数据的图形。\n+ `'series'` 聚焦当前高亮的数据所在的系列的所有图形。",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "elements.sector.blurScope": {
        "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在开启`focus`的时候，可以通过`blurScope`配置淡出的范围。支持如下配置\n\n+ `'coordinateSystem'` 淡出范围为坐标系，默认使用该配置。\n+ `'series'` 淡出范围为系列。\n+ `'global'` 淡出范围为全局。",
        "uiControl": {
            "default": "'coordinateSystem'",
            "type": "string"
        }
    },
    "elements.sector.onclick": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.onmouseover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.onmouseout": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.onmousemove": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.onmousewheel": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.onmousedown": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.onmouseup": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.ondrag": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.ondragstart": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.ondragend": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.ondragenter": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.ondragleave": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.ondragover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.ondrop": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc": {
        "desc": "圆弧。",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.arc.type": {
        "desc": "用 setOption 首次设定图形元素时必须指定。\n可取值：\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
        "uiControl": {
            "default": "arc",
            "type": "string"
        }
    },
    "elements.arc.id": {
        "desc": "id 用于在更新或删除图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\n\n\n### $action(string) = 'merge'\n\nsetOption 时指定本次对该图形元素的操作行为。\n\n可取值：\n+ `'merge'`：如果已有元素，则新的配置项和已有的设定进行 merge。如果没有则新建。\n+ `'replace'`：如果已有元素，删除之，新建元素替代之。\n+ `'remove'`：删除元素。",
        "uiControl": {
            "default": "undefined",
            "type": "string"
        }
    },
    "elements.arc.x": {
        "desc": "元素的 x 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.arc.y": {
        "desc": "元素的 y 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.arc.rotation": {
        "desc": "元素的旋转",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.arc.scaleX": {
        "desc": "元素在 x 方向上的缩放。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.arc.scaleY": {
        "desc": "元素在 y 方向上的缩放。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.arc.originX": {
        "desc": "元素旋转和缩放原点的 x 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.arc.originY": {
        "desc": "元素旋转和缩放原点的 y 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.arc.left": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-arc.left) 和 [right](~graphic.elements-arc.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-arc.left) 或 [right](~graphic.elements-arc.right)，则 [shape](~graphic.elements-arc.shape) 里的 `x`、`cx` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.arc.right": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-arc.left) 和 [right](~graphic.elements-arc.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-arc.left) 或 [right](~graphic.elements-arc.right)，则 [shape](~graphic.elements-arc.shape) 里的 `x`、`cx` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.arc.top": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-arc.top) 和 [bottom](~graphic.elements-arc.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-arc.top) 或 [bottom](~graphic.elements-arc.bottom)，则 [shape](~graphic.elements-arc.shape) 里的 `y`、`cy` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.arc.bottom": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-arc.top) 和 [bottom](~graphic.elements-arc.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-arc.top) 或 [bottom](~graphic.elements-arc.bottom)，则 [shape](~graphic.elements-arc.shape) 里的 `y`、`cy` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.arc.bounding": {
        "desc": "决定此图形元素在定位时，对自身的包围盒计算方式。\n\n参见例子：\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\n可取值：\n\n+ `'all'`：（默认）\n表示用自身以及子节点整体的经过 transform 后的包围盒进行定位。\n这种方式易于使整体都限制在父元素范围中。\n\n+ `'raw'`：\n表示仅仅用自身（不包括子节点）的没经过 tranform 的包围盒进行定位。\n这种方式易于内容超出父元素范围的定位方式。",
        "uiControl": {
            "default": "'all'",
            "type": "string"
        }
    },
    "elements.arc.z": {
        "desc": "z 方向的高度，决定层叠关系。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.arc.zlevel": {
        "desc": "决定此元素绘制在哪个 canvas 层中。注意，越多 canvas 层会占用越多资源。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.arc.info": {
        "desc": "用户定义的任意数据，可以在 event listener 中访问，如：\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
        "uiControl": {
            "type": "*"
        }
    },
    "elements.arc.silent": {
        "desc": "是否不响应鼠标以及触摸事件。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.arc.invisible": {
        "desc": "节点是否可见。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.arc.ignore": {
        "desc": "节点是否完全被忽略（既不渲染，也不响应事件）。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.arc.textContent": {
        "desc": "这是一个文本定义，附着在一个节点上，会依据 `textConfig` 配置，相对于节点布局。\n\n\n里面的属性同于 [text](option.html#graphic.elements-text)。",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.arc.textConfig": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.arc.textConfig.position": {
        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
        "uiControl": {
            "default": "'inside'",
            "type": ""
        }
    },
    "elements.arc.textConfig.rotation": {
        "desc": "`textContent` 的旋转弧度。",
        "uiControl": {
            "type": "number"
        }
    },
    "elements.arc.textConfig.layoutRect": {
        "desc": "`textContent` 根据此矩形来布局位置。\n默认是节点的包围盒。\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.arc.textConfig.offset": {
        "desc": "`textContent` 的偏移。\n\n`offset` 和 `position` 的区别是，`offset` 是旋转（rotation）后计算。\n\n#### origin\n\n`origin` 相对于节点的包围盒。\n可以是百分数。\n如果指定为 `'center'`，则定位在包围盒中心。\n\n只有当 `position` and `rotation` 都设置时，生效。\n\n+ 如 `[12, 33]`\n+ 或如 `['50%', '50%']`\n+ 'center'",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.arc.textConfig.distance": {
        "desc": "距离 `layoutRect` 的距离。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.arc.textConfig.local": {
        "desc": "如果 `true` 的话，会采用节点的 transform。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.arc.textConfig.insideFill": {
        "desc": "`insideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\n在绝大多数场景下，\"auto-calculated-fill\" 是白色。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.arc.textConfig.insideStroke": {
        "desc": "`insideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会和节点的 `fill` 相同，如果 `fill` 没有的话则为 `null`。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.arc.textConfig.outsideFill": {
        "desc": "`outsideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 \"inside\"，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.arc.textConfig.outsideStroke": {
        "desc": "`outsideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 不是 \"inside\"，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会为一个近似于白色的颜色，来区别于背景。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.arc.textConfig.inside": {
        "desc": "如果确定文本是在节点中的话，则此可设置为 `true`，避免 echarts 额外猜测。",
        "uiControl": {
            "type": "boolean"
        }
    },
    "elements.arc.cursor": {
        "desc": "鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 `cursor`。",
        "uiControl": {
            "type": "enum",
            "options": "'auto','pointer','move'"
        }
    },
    "elements.arc.draggable": {
        "desc": "图形元素是否可以被拖拽。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.arc.progressive": {
        "desc": "是否渐进式渲染。当图形元素过多时才使用。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.arc.shape": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.arc.shape.cx": {
        "desc": "图形元素的中心在父节点坐标系（以父节点左上角为原点）中的横坐标值。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.arc.shape.cy": {
        "desc": "图形元素的中心在父节点坐标系（以父节点左上角为原点）中的纵坐标值。",
        "uiControl": {
            "default": "0",
            "type": "numbr"
        }
    },
    "elements.arc.shape.r": {
        "desc": "外半径。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.arc.shape.r0": {
        "desc": "内半径。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.arc.shape.startAngle": {
        "desc": "开始弧度。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.arc.shape.endAngle": {
        "desc": "结束弧度。",
        "uiControl": {
            "default": "Math.PI * 2",
            "type": "number"
        }
    },
    "elements.arc.shape.clockwise": {
        "desc": "是否顺时针。",
        "uiControl": {
            "default": "true",
            "type": "boolean"
        }
    },
    "elements.arc.style": {
        "desc": "注：关于图形元素中更多的样式设置（例如 [富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)），参见 [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable) 中的 style 相关属性。\n\n注意，这里图形元素的样式属性名称直接源于 zrender，和 `echarts label`、`echarts itemStyle` 等处同样含义的样式属性名称或有不同。例如，有如下对应：\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.arc.style.fill": {
        "desc": "填充色。",
        "uiControl": {
            "default": "null",
            "type": "string"
        }
    },
    "elements.arc.style.stroke": {
        "desc": "笔画颜色。",
        "uiControl": {
            "default": "\"#000\"",
            "type": "string"
        }
    },
    "elements.arc.style.lineWidth": {
        "desc": "笔画宽度。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.arc.style.shadowBlur": {
        "desc": "阴影宽度。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.arc.style.shadowOffsetX": {
        "desc": "阴影 X 方向偏移。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.arc.style.shadowOffsetY": {
        "desc": "阴影 Y 方向偏移。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.arc.style.shadowColor": {
        "desc": "阴影颜色。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.arc.focus": {
        "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在高亮图形时，是否淡出其它数据的图形已达到聚焦的效果。支持如下配置：\n\n+ `'none'` 不淡出其它图形，默认使用该配置。\n+ `'self'` 只聚焦（不淡出）当前高亮的数据的图形。\n+ `'series'` 聚焦当前高亮的数据所在的系列的所有图形。",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "elements.arc.blurScope": {
        "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在开启`focus`的时候，可以通过`blurScope`配置淡出的范围。支持如下配置\n\n+ `'coordinateSystem'` 淡出范围为坐标系，默认使用该配置。\n+ `'series'` 淡出范围为系列。\n+ `'global'` 淡出范围为全局。",
        "uiControl": {
            "default": "'coordinateSystem'",
            "type": "string"
        }
    },
    "elements.arc.onclick": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.onmouseover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.onmouseout": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.onmousemove": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.onmousewheel": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.onmousedown": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.onmouseup": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.ondrag": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.ondragstart": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.ondragend": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.ondragenter": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.ondragleave": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.ondragover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.ondrop": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon": {
        "desc": "多边形。",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.polygon.type": {
        "desc": "用 setOption 首次设定图形元素时必须指定。\n可取值：\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
        "uiControl": {
            "default": "polygon",
            "type": "string"
        }
    },
    "elements.polygon.id": {
        "desc": "id 用于在更新或删除图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\n\n\n### $action(string) = 'merge'\n\nsetOption 时指定本次对该图形元素的操作行为。\n\n可取值：\n+ `'merge'`：如果已有元素，则新的配置项和已有的设定进行 merge。如果没有则新建。\n+ `'replace'`：如果已有元素，删除之，新建元素替代之。\n+ `'remove'`：删除元素。",
        "uiControl": {
            "default": "undefined",
            "type": "string"
        }
    },
    "elements.polygon.x": {
        "desc": "元素的 x 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polygon.y": {
        "desc": "元素的 y 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polygon.rotation": {
        "desc": "元素的旋转",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polygon.scaleX": {
        "desc": "元素在 x 方向上的缩放。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.polygon.scaleY": {
        "desc": "元素在 y 方向上的缩放。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.polygon.originX": {
        "desc": "元素旋转和缩放原点的 x 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polygon.originY": {
        "desc": "元素旋转和缩放原点的 y 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polygon.left": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-polygon.left) 和 [right](~graphic.elements-polygon.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-polygon.left) 或 [right](~graphic.elements-polygon.right)，则 [shape](~graphic.elements-polygon.shape) 里的 `x`、`cx` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.polygon.right": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-polygon.left) 和 [right](~graphic.elements-polygon.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-polygon.left) 或 [right](~graphic.elements-polygon.right)，则 [shape](~graphic.elements-polygon.shape) 里的 `x`、`cx` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.polygon.top": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-polygon.top) 和 [bottom](~graphic.elements-polygon.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-polygon.top) 或 [bottom](~graphic.elements-polygon.bottom)，则 [shape](~graphic.elements-polygon.shape) 里的 `y`、`cy` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.polygon.bottom": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-polygon.top) 和 [bottom](~graphic.elements-polygon.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-polygon.top) 或 [bottom](~graphic.elements-polygon.bottom)，则 [shape](~graphic.elements-polygon.shape) 里的 `y`、`cy` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.polygon.bounding": {
        "desc": "决定此图形元素在定位时，对自身的包围盒计算方式。\n\n参见例子：\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\n可取值：\n\n+ `'all'`：（默认）\n表示用自身以及子节点整体的经过 transform 后的包围盒进行定位。\n这种方式易于使整体都限制在父元素范围中。\n\n+ `'raw'`：\n表示仅仅用自身（不包括子节点）的没经过 tranform 的包围盒进行定位。\n这种方式易于内容超出父元素范围的定位方式。",
        "uiControl": {
            "default": "'all'",
            "type": "string"
        }
    },
    "elements.polygon.z": {
        "desc": "z 方向的高度，决定层叠关系。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polygon.zlevel": {
        "desc": "决定此元素绘制在哪个 canvas 层中。注意，越多 canvas 层会占用越多资源。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polygon.info": {
        "desc": "用户定义的任意数据，可以在 event listener 中访问，如：\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
        "uiControl": {
            "type": "*"
        }
    },
    "elements.polygon.silent": {
        "desc": "是否不响应鼠标以及触摸事件。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polygon.invisible": {
        "desc": "节点是否可见。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polygon.ignore": {
        "desc": "节点是否完全被忽略（既不渲染，也不响应事件）。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polygon.textContent": {
        "desc": "这是一个文本定义，附着在一个节点上，会依据 `textConfig` 配置，相对于节点布局。\n\n\n里面的属性同于 [text](option.html#graphic.elements-text)。",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.polygon.textConfig": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.polygon.textConfig.position": {
        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
        "uiControl": {
            "default": "'inside'",
            "type": ""
        }
    },
    "elements.polygon.textConfig.rotation": {
        "desc": "`textContent` 的旋转弧度。",
        "uiControl": {
            "type": "number"
        }
    },
    "elements.polygon.textConfig.layoutRect": {
        "desc": "`textContent` 根据此矩形来布局位置。\n默认是节点的包围盒。\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.polygon.textConfig.offset": {
        "desc": "`textContent` 的偏移。\n\n`offset` 和 `position` 的区别是，`offset` 是旋转（rotation）后计算。\n\n#### origin\n\n`origin` 相对于节点的包围盒。\n可以是百分数。\n如果指定为 `'center'`，则定位在包围盒中心。\n\n只有当 `position` and `rotation` 都设置时，生效。\n\n+ 如 `[12, 33]`\n+ 或如 `['50%', '50%']`\n+ 'center'",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.polygon.textConfig.distance": {
        "desc": "距离 `layoutRect` 的距离。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.polygon.textConfig.local": {
        "desc": "如果 `true` 的话，会采用节点的 transform。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polygon.textConfig.insideFill": {
        "desc": "`insideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\n在绝大多数场景下，\"auto-calculated-fill\" 是白色。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.polygon.textConfig.insideStroke": {
        "desc": "`insideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会和节点的 `fill` 相同，如果 `fill` 没有的话则为 `null`。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.polygon.textConfig.outsideFill": {
        "desc": "`outsideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 \"inside\"，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.polygon.textConfig.outsideStroke": {
        "desc": "`outsideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 不是 \"inside\"，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会为一个近似于白色的颜色，来区别于背景。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.polygon.textConfig.inside": {
        "desc": "如果确定文本是在节点中的话，则此可设置为 `true`，避免 echarts 额外猜测。",
        "uiControl": {
            "type": "boolean"
        }
    },
    "elements.polygon.cursor": {
        "desc": "鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 `cursor`。",
        "uiControl": {
            "type": "enum",
            "options": "'auto','pointer','move'"
        }
    },
    "elements.polygon.draggable": {
        "desc": "图形元素是否可以被拖拽。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polygon.progressive": {
        "desc": "是否渐进式渲染。当图形元素过多时才使用。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polygon.shape": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.polygon.shape.points": {
        "desc": "点列表，用于定义形状，如 `[[22, 44], [44, 55], [11, 44], ...]`",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.polygon.shape.smooth": {
        "desc": "是否平滑曲线。\n\n+ 如果为 number：表示贝塞尔 (bezier) 差值平滑，smooth 指定了平滑等级，范围 `[0, 1]`。\n+ 如果为 `'spline'`：表示 Catmull-Rom spline 差值平滑。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.polygon.shape.smoothConstraint": {
        "desc": "是否将平滑曲线约束在包围盒中。`smooth` 为 `number`（bezier）时生效。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polygon.style": {
        "desc": "注：关于图形元素中更多的样式设置（例如 [富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)），参见 [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable) 中的 style 相关属性。\n\n注意，这里图形元素的样式属性名称直接源于 zrender，和 `echarts label`、`echarts itemStyle` 等处同样含义的样式属性名称或有不同。例如，有如下对应：\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.polygon.style.fill": {
        "desc": "填充色。",
        "uiControl": {
            "default": "'#000'",
            "type": "string"
        }
    },
    "elements.polygon.style.stroke": {
        "desc": "笔画颜色。",
        "uiControl": {
            "default": "null",
            "type": "string"
        }
    },
    "elements.polygon.style.lineWidth": {
        "desc": "笔画宽度。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polygon.style.shadowBlur": {
        "desc": "阴影宽度。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.polygon.style.shadowOffsetX": {
        "desc": "阴影 X 方向偏移。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.polygon.style.shadowOffsetY": {
        "desc": "阴影 Y 方向偏移。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.polygon.style.shadowColor": {
        "desc": "阴影颜色。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.polygon.focus": {
        "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在高亮图形时，是否淡出其它数据的图形已达到聚焦的效果。支持如下配置：\n\n+ `'none'` 不淡出其它图形，默认使用该配置。\n+ `'self'` 只聚焦（不淡出）当前高亮的数据的图形。\n+ `'series'` 聚焦当前高亮的数据所在的系列的所有图形。",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "elements.polygon.blurScope": {
        "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在开启`focus`的时候，可以通过`blurScope`配置淡出的范围。支持如下配置\n\n+ `'coordinateSystem'` 淡出范围为坐标系，默认使用该配置。\n+ `'series'` 淡出范围为系列。\n+ `'global'` 淡出范围为全局。",
        "uiControl": {
            "default": "'coordinateSystem'",
            "type": "string"
        }
    },
    "elements.polygon.onclick": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.onmouseover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.onmouseout": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.onmousemove": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.onmousewheel": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.onmousedown": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.onmouseup": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.ondrag": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.ondragstart": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.ondragend": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.ondragenter": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.ondragleave": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.ondragover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.ondrop": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline": {
        "desc": "折线。",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.polyline.type": {
        "desc": "用 setOption 首次设定图形元素时必须指定。\n可取值：\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
        "uiControl": {
            "default": "polyline",
            "type": "string"
        }
    },
    "elements.polyline.id": {
        "desc": "id 用于在更新或删除图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\n\n\n### $action(string) = 'merge'\n\nsetOption 时指定本次对该图形元素的操作行为。\n\n可取值：\n+ `'merge'`：如果已有元素，则新的配置项和已有的设定进行 merge。如果没有则新建。\n+ `'replace'`：如果已有元素，删除之，新建元素替代之。\n+ `'remove'`：删除元素。",
        "uiControl": {
            "default": "undefined",
            "type": "string"
        }
    },
    "elements.polyline.x": {
        "desc": "元素的 x 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polyline.y": {
        "desc": "元素的 y 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polyline.rotation": {
        "desc": "元素的旋转",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polyline.scaleX": {
        "desc": "元素在 x 方向上的缩放。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.polyline.scaleY": {
        "desc": "元素在 y 方向上的缩放。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.polyline.originX": {
        "desc": "元素旋转和缩放原点的 x 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polyline.originY": {
        "desc": "元素旋转和缩放原点的 y 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polyline.left": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-polyline.left) 和 [right](~graphic.elements-polyline.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-polyline.left) 或 [right](~graphic.elements-polyline.right)，则 [shape](~graphic.elements-polyline.shape) 里的 `x`、`cx` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.polyline.right": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-polyline.left) 和 [right](~graphic.elements-polyline.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-polyline.left) 或 [right](~graphic.elements-polyline.right)，则 [shape](~graphic.elements-polyline.shape) 里的 `x`、`cx` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.polyline.top": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-polyline.top) 和 [bottom](~graphic.elements-polyline.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-polyline.top) 或 [bottom](~graphic.elements-polyline.bottom)，则 [shape](~graphic.elements-polyline.shape) 里的 `y`、`cy` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.polyline.bottom": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-polyline.top) 和 [bottom](~graphic.elements-polyline.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-polyline.top) 或 [bottom](~graphic.elements-polyline.bottom)，则 [shape](~graphic.elements-polyline.shape) 里的 `y`、`cy` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.polyline.bounding": {
        "desc": "决定此图形元素在定位时，对自身的包围盒计算方式。\n\n参见例子：\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\n可取值：\n\n+ `'all'`：（默认）\n表示用自身以及子节点整体的经过 transform 后的包围盒进行定位。\n这种方式易于使整体都限制在父元素范围中。\n\n+ `'raw'`：\n表示仅仅用自身（不包括子节点）的没经过 tranform 的包围盒进行定位。\n这种方式易于内容超出父元素范围的定位方式。",
        "uiControl": {
            "default": "'all'",
            "type": "string"
        }
    },
    "elements.polyline.z": {
        "desc": "z 方向的高度，决定层叠关系。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polyline.zlevel": {
        "desc": "决定此元素绘制在哪个 canvas 层中。注意，越多 canvas 层会占用越多资源。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polyline.info": {
        "desc": "用户定义的任意数据，可以在 event listener 中访问，如：\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
        "uiControl": {
            "type": "*"
        }
    },
    "elements.polyline.silent": {
        "desc": "是否不响应鼠标以及触摸事件。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polyline.invisible": {
        "desc": "节点是否可见。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polyline.ignore": {
        "desc": "节点是否完全被忽略（既不渲染，也不响应事件）。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polyline.textContent": {
        "desc": "这是一个文本定义，附着在一个节点上，会依据 `textConfig` 配置，相对于节点布局。\n\n\n里面的属性同于 [text](option.html#graphic.elements-text)。",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.polyline.textConfig": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.polyline.textConfig.position": {
        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
        "uiControl": {
            "default": "'inside'",
            "type": ""
        }
    },
    "elements.polyline.textConfig.rotation": {
        "desc": "`textContent` 的旋转弧度。",
        "uiControl": {
            "type": "number"
        }
    },
    "elements.polyline.textConfig.layoutRect": {
        "desc": "`textContent` 根据此矩形来布局位置。\n默认是节点的包围盒。\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.polyline.textConfig.offset": {
        "desc": "`textContent` 的偏移。\n\n`offset` 和 `position` 的区别是，`offset` 是旋转（rotation）后计算。\n\n#### origin\n\n`origin` 相对于节点的包围盒。\n可以是百分数。\n如果指定为 `'center'`，则定位在包围盒中心。\n\n只有当 `position` and `rotation` 都设置时，生效。\n\n+ 如 `[12, 33]`\n+ 或如 `['50%', '50%']`\n+ 'center'",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.polyline.textConfig.distance": {
        "desc": "距离 `layoutRect` 的距离。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.polyline.textConfig.local": {
        "desc": "如果 `true` 的话，会采用节点的 transform。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polyline.textConfig.insideFill": {
        "desc": "`insideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\n在绝大多数场景下，\"auto-calculated-fill\" 是白色。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.polyline.textConfig.insideStroke": {
        "desc": "`insideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会和节点的 `fill` 相同，如果 `fill` 没有的话则为 `null`。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.polyline.textConfig.outsideFill": {
        "desc": "`outsideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 \"inside\"，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.polyline.textConfig.outsideStroke": {
        "desc": "`outsideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 不是 \"inside\"，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会为一个近似于白色的颜色，来区别于背景。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.polyline.textConfig.inside": {
        "desc": "如果确定文本是在节点中的话，则此可设置为 `true`，避免 echarts 额外猜测。",
        "uiControl": {
            "type": "boolean"
        }
    },
    "elements.polyline.cursor": {
        "desc": "鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 `cursor`。",
        "uiControl": {
            "type": "enum",
            "options": "'auto','pointer','move'"
        }
    },
    "elements.polyline.draggable": {
        "desc": "图形元素是否可以被拖拽。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polyline.progressive": {
        "desc": "是否渐进式渲染。当图形元素过多时才使用。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polyline.shape": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.polyline.shape.points": {
        "desc": "点列表，用于定义形状，如 `[[22, 44], [44, 55], [11, 44], ...]`",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.polyline.shape.smooth": {
        "desc": "是否平滑曲线。\n\n+ 如果为 number：表示贝塞尔 (bezier) 差值平滑，smooth 指定了平滑等级，范围 `[0, 1]`。\n+ 如果为 `'spline'`：表示 Catmull-Rom spline 差值平滑。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.polyline.shape.smoothConstraint": {
        "desc": "是否将平滑曲线约束在包围盒中。`smooth` 为 `number`（bezier）时生效。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polyline.style": {
        "desc": "注：关于图形元素中更多的样式设置（例如 [富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)），参见 [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable) 中的 style 相关属性。\n\n注意，这里图形元素的样式属性名称直接源于 zrender，和 `echarts label`、`echarts itemStyle` 等处同样含义的样式属性名称或有不同。例如，有如下对应：\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.polyline.style.fill": {
        "desc": "填充色。",
        "uiControl": {
            "default": "null",
            "type": "string"
        }
    },
    "elements.polyline.style.stroke": {
        "desc": "笔画颜色。",
        "uiControl": {
            "default": "\"#000\"",
            "type": "string"
        }
    },
    "elements.polyline.style.lineWidth": {
        "desc": "笔画宽度。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.polyline.style.shadowBlur": {
        "desc": "阴影宽度。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.polyline.style.shadowOffsetX": {
        "desc": "阴影 X 方向偏移。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.polyline.style.shadowOffsetY": {
        "desc": "阴影 Y 方向偏移。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.polyline.style.shadowColor": {
        "desc": "阴影颜色。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.polyline.focus": {
        "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在高亮图形时，是否淡出其它数据的图形已达到聚焦的效果。支持如下配置：\n\n+ `'none'` 不淡出其它图形，默认使用该配置。\n+ `'self'` 只聚焦（不淡出）当前高亮的数据的图形。\n+ `'series'` 聚焦当前高亮的数据所在的系列的所有图形。",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "elements.polyline.blurScope": {
        "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在开启`focus`的时候，可以通过`blurScope`配置淡出的范围。支持如下配置\n\n+ `'coordinateSystem'` 淡出范围为坐标系，默认使用该配置。\n+ `'series'` 淡出范围为系列。\n+ `'global'` 淡出范围为全局。",
        "uiControl": {
            "default": "'coordinateSystem'",
            "type": "string"
        }
    },
    "elements.polyline.onclick": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.onmouseover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.onmouseout": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.onmousemove": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.onmousewheel": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.onmousedown": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.onmouseup": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.ondrag": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.ondragstart": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.ondragend": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.ondragenter": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.ondragleave": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.ondragover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.ondrop": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line": {
        "desc": "直线。",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.line.type": {
        "desc": "用 setOption 首次设定图形元素时必须指定。\n可取值：\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
        "uiControl": {
            "default": "line",
            "type": "string"
        }
    },
    "elements.line.id": {
        "desc": "id 用于在更新或删除图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\n\n\n### $action(string) = 'merge'\n\nsetOption 时指定本次对该图形元素的操作行为。\n\n可取值：\n+ `'merge'`：如果已有元素，则新的配置项和已有的设定进行 merge。如果没有则新建。\n+ `'replace'`：如果已有元素，删除之，新建元素替代之。\n+ `'remove'`：删除元素。",
        "uiControl": {
            "default": "undefined",
            "type": "string"
        }
    },
    "elements.line.x": {
        "desc": "元素的 x 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.line.y": {
        "desc": "元素的 y 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.line.rotation": {
        "desc": "元素的旋转",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.line.scaleX": {
        "desc": "元素在 x 方向上的缩放。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.line.scaleY": {
        "desc": "元素在 y 方向上的缩放。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.line.originX": {
        "desc": "元素旋转和缩放原点的 x 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.line.originY": {
        "desc": "元素旋转和缩放原点的 y 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.line.left": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-line.left) 和 [right](~graphic.elements-line.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-line.left) 或 [right](~graphic.elements-line.right)，则 [shape](~graphic.elements-line.shape) 里的 `x`、`cx` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.line.right": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-line.left) 和 [right](~graphic.elements-line.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-line.left) 或 [right](~graphic.elements-line.right)，则 [shape](~graphic.elements-line.shape) 里的 `x`、`cx` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.line.top": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-line.top) 和 [bottom](~graphic.elements-line.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-line.top) 或 [bottom](~graphic.elements-line.bottom)，则 [shape](~graphic.elements-line.shape) 里的 `y`、`cy` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.line.bottom": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-line.top) 和 [bottom](~graphic.elements-line.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-line.top) 或 [bottom](~graphic.elements-line.bottom)，则 [shape](~graphic.elements-line.shape) 里的 `y`、`cy` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.line.bounding": {
        "desc": "决定此图形元素在定位时，对自身的包围盒计算方式。\n\n参见例子：\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\n可取值：\n\n+ `'all'`：（默认）\n表示用自身以及子节点整体的经过 transform 后的包围盒进行定位。\n这种方式易于使整体都限制在父元素范围中。\n\n+ `'raw'`：\n表示仅仅用自身（不包括子节点）的没经过 tranform 的包围盒进行定位。\n这种方式易于内容超出父元素范围的定位方式。",
        "uiControl": {
            "default": "'all'",
            "type": "string"
        }
    },
    "elements.line.z": {
        "desc": "z 方向的高度，决定层叠关系。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.line.zlevel": {
        "desc": "决定此元素绘制在哪个 canvas 层中。注意，越多 canvas 层会占用越多资源。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.line.info": {
        "desc": "用户定义的任意数据，可以在 event listener 中访问，如：\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
        "uiControl": {
            "type": "*"
        }
    },
    "elements.line.silent": {
        "desc": "是否不响应鼠标以及触摸事件。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.line.invisible": {
        "desc": "节点是否可见。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.line.ignore": {
        "desc": "节点是否完全被忽略（既不渲染，也不响应事件）。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.line.textContent": {
        "desc": "这是一个文本定义，附着在一个节点上，会依据 `textConfig` 配置，相对于节点布局。\n\n\n里面的属性同于 [text](option.html#graphic.elements-text)。",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.line.textConfig": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.line.textConfig.position": {
        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
        "uiControl": {
            "default": "'inside'",
            "type": ""
        }
    },
    "elements.line.textConfig.rotation": {
        "desc": "`textContent` 的旋转弧度。",
        "uiControl": {
            "type": "number"
        }
    },
    "elements.line.textConfig.layoutRect": {
        "desc": "`textContent` 根据此矩形来布局位置。\n默认是节点的包围盒。\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.line.textConfig.offset": {
        "desc": "`textContent` 的偏移。\n\n`offset` 和 `position` 的区别是，`offset` 是旋转（rotation）后计算。\n\n#### origin\n\n`origin` 相对于节点的包围盒。\n可以是百分数。\n如果指定为 `'center'`，则定位在包围盒中心。\n\n只有当 `position` and `rotation` 都设置时，生效。\n\n+ 如 `[12, 33]`\n+ 或如 `['50%', '50%']`\n+ 'center'",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.line.textConfig.distance": {
        "desc": "距离 `layoutRect` 的距离。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.line.textConfig.local": {
        "desc": "如果 `true` 的话，会采用节点的 transform。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.line.textConfig.insideFill": {
        "desc": "`insideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\n在绝大多数场景下，\"auto-calculated-fill\" 是白色。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.line.textConfig.insideStroke": {
        "desc": "`insideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会和节点的 `fill` 相同，如果 `fill` 没有的话则为 `null`。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.line.textConfig.outsideFill": {
        "desc": "`outsideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 \"inside\"，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.line.textConfig.outsideStroke": {
        "desc": "`outsideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 不是 \"inside\"，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会为一个近似于白色的颜色，来区别于背景。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.line.textConfig.inside": {
        "desc": "如果确定文本是在节点中的话，则此可设置为 `true`，避免 echarts 额外猜测。",
        "uiControl": {
            "type": "boolean"
        }
    },
    "elements.line.cursor": {
        "desc": "鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 `cursor`。",
        "uiControl": {
            "type": "enum",
            "options": "'auto','pointer','move'"
        }
    },
    "elements.line.draggable": {
        "desc": "图形元素是否可以被拖拽。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.line.progressive": {
        "desc": "是否渐进式渲染。当图形元素过多时才使用。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.line.shape": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.line.shape.x1": {
        "desc": "开始点的 x 值。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.line.shape.y1": {
        "desc": "开始点的 y 值。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.line.shape.x2": {
        "desc": "结束点的 x 值。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.line.shape.y2": {
        "desc": "结束点的 y 值。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.line.shape.percent": {
        "desc": "线画到百分之多少就不画了。值的范围：[0, 1]。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.line.style": {
        "desc": "注：关于图形元素中更多的样式设置（例如 [富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)），参见 [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable) 中的 style 相关属性。\n\n注意，这里图形元素的样式属性名称直接源于 zrender，和 `echarts label`、`echarts itemStyle` 等处同样含义的样式属性名称或有不同。例如，有如下对应：\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.line.style.fill": {
        "desc": "填充色。",
        "uiControl": {
            "default": "null",
            "type": "string"
        }
    },
    "elements.line.style.stroke": {
        "desc": "笔画颜色。",
        "uiControl": {
            "default": "\"#000\"",
            "type": "string"
        }
    },
    "elements.line.style.lineWidth": {
        "desc": "笔画宽度。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.line.style.shadowBlur": {
        "desc": "阴影宽度。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.line.style.shadowOffsetX": {
        "desc": "阴影 X 方向偏移。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.line.style.shadowOffsetY": {
        "desc": "阴影 Y 方向偏移。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.line.style.shadowColor": {
        "desc": "阴影颜色。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.line.focus": {
        "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在高亮图形时，是否淡出其它数据的图形已达到聚焦的效果。支持如下配置：\n\n+ `'none'` 不淡出其它图形，默认使用该配置。\n+ `'self'` 只聚焦（不淡出）当前高亮的数据的图形。\n+ `'series'` 聚焦当前高亮的数据所在的系列的所有图形。",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "elements.line.blurScope": {
        "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在开启`focus`的时候，可以通过`blurScope`配置淡出的范围。支持如下配置\n\n+ `'coordinateSystem'` 淡出范围为坐标系，默认使用该配置。\n+ `'series'` 淡出范围为系列。\n+ `'global'` 淡出范围为全局。",
        "uiControl": {
            "default": "'coordinateSystem'",
            "type": "string"
        }
    },
    "elements.line.onclick": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.onmouseover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.onmouseout": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.onmousemove": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.onmousewheel": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.onmousedown": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.onmouseup": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.ondrag": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.ondragstart": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.ondragend": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.ondragenter": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.ondragleave": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.ondragover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.ondrop": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve": {
        "desc": "二次或三次贝塞尔曲线。",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.bezierCurve.type": {
        "desc": "用 setOption 首次设定图形元素时必须指定。\n可取值：\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
        "uiControl": {
            "default": "bezierCurve",
            "type": "string"
        }
    },
    "elements.bezierCurve.id": {
        "desc": "id 用于在更新或删除图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\n\n\n### $action(string) = 'merge'\n\nsetOption 时指定本次对该图形元素的操作行为。\n\n可取值：\n+ `'merge'`：如果已有元素，则新的配置项和已有的设定进行 merge。如果没有则新建。\n+ `'replace'`：如果已有元素，删除之，新建元素替代之。\n+ `'remove'`：删除元素。",
        "uiControl": {
            "default": "undefined",
            "type": "string"
        }
    },
    "elements.bezierCurve.x": {
        "desc": "元素的 x 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.y": {
        "desc": "元素的 y 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.rotation": {
        "desc": "元素的旋转",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.scaleX": {
        "desc": "元素在 x 方向上的缩放。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.bezierCurve.scaleY": {
        "desc": "元素在 y 方向上的缩放。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.bezierCurve.originX": {
        "desc": "元素旋转和缩放原点的 x 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.originY": {
        "desc": "元素旋转和缩放原点的 y 像素位置。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.left": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-bezierCurve.left) 和 [right](~graphic.elements-bezierCurve.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-bezierCurve.left) 或 [right](~graphic.elements-bezierCurve.right)，则 [shape](~graphic.elements-bezierCurve.shape) 里的 `x`、`cx` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.bezierCurve.right": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-bezierCurve.left) 和 [right](~graphic.elements-bezierCurve.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-bezierCurve.left) 或 [right](~graphic.elements-bezierCurve.right)，则 [shape](~graphic.elements-bezierCurve.shape) 里的 `x`、`cx` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.bezierCurve.top": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-bezierCurve.top) 和 [bottom](~graphic.elements-bezierCurve.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-bezierCurve.top) 或 [bottom](~graphic.elements-bezierCurve.bottom)，则 [shape](~graphic.elements-bezierCurve.shape) 里的 `y`、`cy` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.bezierCurve.bottom": {
        "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-bezierCurve.top) 和 [bottom](~graphic.elements-bezierCurve.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-bezierCurve.top) 或 [bottom](~graphic.elements-bezierCurve.bottom)，则 [shape](~graphic.elements-bezierCurve.shape) 里的 `y`、`cy` 等定位属性不再生效。",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.bezierCurve.bounding": {
        "desc": "决定此图形元素在定位时，对自身的包围盒计算方式。\n\n参见例子：\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\n可取值：\n\n+ `'all'`：（默认）\n表示用自身以及子节点整体的经过 transform 后的包围盒进行定位。\n这种方式易于使整体都限制在父元素范围中。\n\n+ `'raw'`：\n表示仅仅用自身（不包括子节点）的没经过 tranform 的包围盒进行定位。\n这种方式易于内容超出父元素范围的定位方式。",
        "uiControl": {
            "default": "'all'",
            "type": "string"
        }
    },
    "elements.bezierCurve.z": {
        "desc": "z 方向的高度，决定层叠关系。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.zlevel": {
        "desc": "决定此元素绘制在哪个 canvas 层中。注意，越多 canvas 层会占用越多资源。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.info": {
        "desc": "用户定义的任意数据，可以在 event listener 中访问，如：\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
        "uiControl": {
            "type": "*"
        }
    },
    "elements.bezierCurve.silent": {
        "desc": "是否不响应鼠标以及触摸事件。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.bezierCurve.invisible": {
        "desc": "节点是否可见。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.bezierCurve.ignore": {
        "desc": "节点是否完全被忽略（既不渲染，也不响应事件）。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.bezierCurve.textContent": {
        "desc": "这是一个文本定义，附着在一个节点上，会依据 `textConfig` 配置，相对于节点布局。\n\n\n里面的属性同于 [text](option.html#graphic.elements-text)。",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.bezierCurve.textConfig": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.bezierCurve.textConfig.position": {
        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
        "uiControl": {
            "default": "'inside'",
            "type": ""
        }
    },
    "elements.bezierCurve.textConfig.rotation": {
        "desc": "`textContent` 的旋转弧度。",
        "uiControl": {
            "type": "number"
        }
    },
    "elements.bezierCurve.textConfig.layoutRect": {
        "desc": "`textContent` 根据此矩形来布局位置。\n默认是节点的包围盒。\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.bezierCurve.textConfig.offset": {
        "desc": "`textContent` 的偏移。\n\n`offset` 和 `position` 的区别是，`offset` 是旋转（rotation）后计算。\n\n#### origin\n\n`origin` 相对于节点的包围盒。\n可以是百分数。\n如果指定为 `'center'`，则定位在包围盒中心。\n\n只有当 `position` and `rotation` 都设置时，生效。\n\n+ 如 `[12, 33]`\n+ 或如 `['50%', '50%']`\n+ 'center'",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.bezierCurve.textConfig.distance": {
        "desc": "距离 `layoutRect` 的距离。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.bezierCurve.textConfig.local": {
        "desc": "如果 `true` 的话，会采用节点的 transform。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.bezierCurve.textConfig.insideFill": {
        "desc": "`insideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\n在绝大多数场景下，\"auto-calculated-fill\" 是白色。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.bezierCurve.textConfig.insideStroke": {
        "desc": "`insideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会和节点的 `fill` 相同，如果 `fill` 没有的话则为 `null`。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.bezierCurve.textConfig.outsideFill": {
        "desc": "`outsideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 \"inside\"，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.bezierCurve.textConfig.outsideStroke": {
        "desc": "`outsideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 不是 \"inside\"，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会为一个近似于白色的颜色，来区别于背景。",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.bezierCurve.textConfig.inside": {
        "desc": "如果确定文本是在节点中的话，则此可设置为 `true`，避免 echarts 额外猜测。",
        "uiControl": {
            "type": "boolean"
        }
    },
    "elements.bezierCurve.cursor": {
        "desc": "鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 `cursor`。",
        "uiControl": {
            "type": "enum",
            "options": "'auto','pointer','move'"
        }
    },
    "elements.bezierCurve.draggable": {
        "desc": "图形元素是否可以被拖拽。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.bezierCurve.progressive": {
        "desc": "是否渐进式渲染。当图形元素过多时才使用。",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.bezierCurve.shape": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.bezierCurve.shape.x1": {
        "desc": "开始点的 x 值。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.shape.y1": {
        "desc": "开始点的 y 值。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.shape.x2": {
        "desc": "结束点的 x 值。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.shape.y2": {
        "desc": "结束点的 y 值。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.shape.cpx1": {
        "desc": "控制点 x 值。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.shape.cpy1": {
        "desc": "控制点 y 值。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.shape.cpx2": {
        "desc": "第二个控制点 x 值。如果设置则开启三阶贝塞尔曲线。",
        "uiControl": {
            "default": "null",
            "type": "number"
        }
    },
    "elements.bezierCurve.shape.cpy2": {
        "desc": "第二个控制点 y 值。如果设置则开启三阶贝塞尔曲线。",
        "uiControl": {
            "default": "null",
            "type": "number"
        }
    },
    "elements.bezierCurve.shape.percent": {
        "desc": "画到百分之多少就不画了。值的范围：[0, 1]。",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.bezierCurve.style": {
        "desc": "注：关于图形元素中更多的样式设置（例如 [富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)），参见 [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable) 中的 style 相关属性。\n\n注意，这里图形元素的样式属性名称直接源于 zrender，和 `echarts label`、`echarts itemStyle` 等处同样含义的样式属性名称或有不同。例如，有如下对应：\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.bezierCurve.style.fill": {
        "desc": "填充色。",
        "uiControl": {
            "default": "'#000'",
            "type": "string"
        }
    },
    "elements.bezierCurve.style.stroke": {
        "desc": "笔画颜色。",
        "uiControl": {
            "default": "null",
            "type": "string"
        }
    },
    "elements.bezierCurve.style.lineWidth": {
        "desc": "笔画宽度。",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.style.shadowBlur": {
        "desc": "阴影宽度。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.bezierCurve.style.shadowOffsetX": {
        "desc": "阴影 X 方向偏移。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.bezierCurve.style.shadowOffsetY": {
        "desc": "阴影 Y 方向偏移。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.bezierCurve.style.shadowColor": {
        "desc": "阴影颜色。",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.bezierCurve.focus": {
        "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在高亮图形时，是否淡出其它数据的图形已达到聚焦的效果。支持如下配置：\n\n+ `'none'` 不淡出其它图形，默认使用该配置。\n+ `'self'` 只聚焦（不淡出）当前高亮的数据的图形。\n+ `'series'` 聚焦当前高亮的数据所在的系列的所有图形。",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "elements.bezierCurve.blurScope": {
        "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在开启`focus`的时候，可以通过`blurScope`配置淡出的范围。支持如下配置\n\n+ `'coordinateSystem'` 淡出范围为坐标系，默认使用该配置。\n+ `'series'` 淡出范围为系列。\n+ `'global'` 淡出范围为全局。",
        "uiControl": {
            "default": "'coordinateSystem'",
            "type": "string"
        }
    },
    "elements.bezierCurve.onclick": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.onmouseover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.onmouseout": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.onmousemove": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.onmousewheel": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.onmousedown": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.onmouseup": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.ondrag": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.ondragstart": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.ondragend": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.ondragenter": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.ondragleave": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.ondragover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.ondrop": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    }
}