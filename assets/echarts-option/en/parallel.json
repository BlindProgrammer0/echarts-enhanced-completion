{
    "id": {
        "desc": " Component ID, not specified by default. If specified, it can be used to refer the component in option or API. ",
        "uiControl": {
            "type": "string"
        }
    },
    "zlevel": {
        "desc": "zlevel value of all graphical elements in . zlevel is used to make layers with Canvas. Graphical elements with different zlevel values will be placed in different Canvases, which is a common optimization technique. We can put those frequently changed elements (like those with animations) to a separate zlevel. Notice that too many Canvases will increase memory cost, and should be used carefully on mobile phones to avoid crash. Canvases with bigger zlevel will be placed on Canvases with smaller zlevel. ",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "z": {
        "desc": "z value of all graphical elements in , which controls order of drawing graphical components. Components with smaller z values may be overwritten by those with larger z values. z has a lower priority to zlevel, and will not create new Canvas. ",
        "uiControl": {
            "default": "2",
            "type": "number"
        }
    },
    "left": {
        "desc": " Distance between parallel component and the left side of the container. left value can be instant pixel value like 20; it can also be a percentage value relative to container width like '20%'; and it can also be 'left', 'center', or 'right'. If the left value is set to be 'left', 'center', or 'right', then the component will be aligned automatically based on position. ",
        "uiControl": {
            "type": "percent",
            "default": "'0%'"
        }
    },
    "top": {
        "desc": " Distance between parallel component and the top side of the container. top value can be instant pixel value like 20; it can also be a percentage value relative to container width like '20%'; and it can also be 'top', 'middle', or 'bottom'. If the left value is set to be 'top', 'middle', or 'bottom', then the component will be aligned automatically based on position. ",
        "uiControl": {
            "type": "percent",
            "default": "'0%'"
        }
    },
    "right": {
        "desc": " Distance between parallel component and the right side of the container. right value can be instant pixel value like 20; it can also be a percentage value relative to container width like '20%'. ",
        "uiControl": {
            "type": "percent",
            "default": "'0%'"
        }
    },
    "bottom": {
        "desc": " Distance between parallel component and the bottom side of the container. bottom value can be instant pixel value like 20; it can also be a percentage value relative to container width like '20%'. ",
        "uiControl": {
            "type": "percent",
            "default": "'0%'"
        }
    },
    "width": {
        "desc": " Width of parallel component. Adaptive by default. ",
        "uiControl": {
            "type": "percent",
            "default": "'50%'"
        }
    },
    "height": {
        "desc": " Height of parallel component. Adaptive by default. ",
        "uiControl": {
            "type": "percent",
            "default": "'50%'"
        }
    },
    "layout": {
        "desc": " Layout modes, whose optional values are: \n\n* 'horizontal': place each axis horizontally.\n* 'vertical': place each axis vertically.\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'horizontal','vertical'"
        }
    },
    "axisExpandable": {
        "desc": " When dimension number is extremely large, say, more than 50 dimensions, there will be more than 50 axes, which may hardly display in a page. In this case, you may use [parallel.axisExpandable][0] to improve the display. See this example: 暂时无法显示 Whether to enable toggling axis on clicking.\n\n[0]: #parallel.axisExpandable",
        "uiControl": {
            "type": "boolean"
        }
    },
    "axisExpandCenter": {
        "desc": " Index of the axis which is used as the center of expanding initially. It doesn't have a default value, and needs to be assigned manually. Please refer to [parallel.axisExpandable][0] for more information.\n\n[0]: parallel.axisExpandable",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "axisExpandCount": {
        "desc": " Defines how many axes are at expanding state initially. We'd suggest you assign this value manually according to dimensions. Please refer to [parallel.axisExpandCenter][0] and [parallel.axisExpandable][1].\n\n[0]: parallel.axisExpandCenter\n[1]: parallel.axisExpandable",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "axisExpandWidth": {
        "desc": " Distance between two axes when at expanding state, in pixels. Please refer to [parallel.axisExpandable][0] for more information.\n\n[0]: parallel.axisExpandable",
        "uiControl": {
            "type": "number",
            "min": "50",
            "step": "1",
            "default": "50"
        }
    },
    "axisExpandTriggerOn": {
        "desc": " Optional values: \n\n* 'click': Trigger expanding when mouse clicking.\n* 'mousemove': Trigger expanding when mouse hovering.\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'click','mousemove'"
        }
    },
    "parallelAxisDefault": {
        "desc": " When configuring multiple [parallelAxis][0], there might be some common attributes in each axis configuration. To avoid writing them repeatly, they can be put under [parallel.parallelAxisDefault][1]. Before initializing axis, configurations in [parallel.parallelAxisDefault][1] will be merged into [parallelAxis][0] to generate the final axis configuration. [See the sample][2].   \n\n\n[0]: #parallelAxis\n[1]: #parallel.parallelAxisDefault\n[2]: https://echarts.apache.org/examples/en/editor.html?c=doc-example/parallel-all&edit=1&reset=1",
        "uiControl": {
            "type": "Object"
        }
    },
    "parallelAxisDefault.type": {
        "desc": " Type of axis. Option: \n\n* 'value' Numerical axis, suitable for continuous data.\n* 'category' Category axis, suitable for discrete category data. Category data can be auto retrieved from [series.data][0] or [dataset.source][1], or can be specified via [parallelAxis.data][2].\n* 'time' Time axis, suitable for continuous time series data. As compared to value axis, it has a better formatting for time and a different tick calculation method. For example, it decides to use month, week, day or hour for tick based on the range of span.\n* 'log' Log axis, suitable for log data.\n\n\n\n[0]: #series.data\n[1]: #dataset.source\n[2]: #parallelAxis.data",
        "uiControl": {
            "default": "'value'",
            "type": "string"
        }
    },
    "parallelAxisDefault.name": {
        "desc": " Name of axis. ",
        "uiControl": {
            "type": "text"
        }
    },
    "parallelAxisDefault.nameLocation": {
        "desc": " Location of axis name. **Options:*** 'start'\n* 'middle' or 'center'\n* 'end'\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'start','middle','end'"
        }
    },
    "parallelAxisDefault.nameTextStyle": {
        "desc": " Text style of axis name. ",
        "uiControl": {
            "type": "Object"
        }
    },
    "parallelAxisDefault.nameTextStyle.color": {
        "desc": " Color of axis name uses [axisLine.lineStyle.color][0] by default.\n\n[0]: #parallelAxis.axisLine.lineStyle.color",
        "uiControl": {
            "type": "color"
        }
    },
    "parallelAxisDefault.nameTextStyle.fontStyle": {
        "desc": " axis name font style. Options are: \n\n* 'normal'\n* 'italic'\n* 'oblique'\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'normal','italic','oblique'"
        }
    },
    "parallelAxisDefault.nameTextStyle.fontWeight": {
        "desc": " axis name font thick weight. Options are: \n\n* 'normal'\n* 'bold'\n* 'bolder'\n* 'lighter'\n* 100 | 200 | 300 | 400...\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'normal','bold','bolder','lighter'"
        }
    },
    "parallelAxisDefault.nameTextStyle.fontFamily": {
        "desc": " axis name font family. Can also be 'serif' , 'monospace', ... ",
        "uiControl": {
            "type": "enum",
            "options": "'sans-serif','serif','monospace','Arial','Courier New'"
        }
    },
    "parallelAxisDefault.nameTextStyle.fontSize": {
        "desc": " axis name font size. ",
        "uiControl": {
            "type": "number",
            "default": "12",
            "min": "1",
            "step": "1"
        }
    },
    "parallelAxisDefault.nameTextStyle.align": {
        "desc": " Horizontal alignment of text, automatic by default. Options are: \n\n* 'left'\n* 'center'\n* 'right'\n\nIf align is not set in rich, align in parent level will be used. For example: \n\n    {\n        align: right,\n        rich: {\n            a: {\n                // `align` is not set, then it will be right\n            }\n        }\n    }\n    \n\n",
        "uiControl": {
            "type": "enum",
            "options": "'left','center','right'"
        }
    },
    "parallelAxisDefault.nameTextStyle.verticalAlign": {
        "desc": " Vertical alignment of text, automatic by default. Options are: \n\n* 'top'\n* 'middle'\n* 'bottom'\n\nIf verticalAlign is not set in rich, verticalAlign in parent level will be used. For example: \n\n    {\n        verticalAlign: bottom,\n        rich: {\n            a: {\n                // `verticalAlign` is not set, then it will be bottom\n            }\n        }\n    }\n    \n\n",
        "uiControl": {
            "type": "enum",
            "options": "'top','middle','bottom'"
        }
    },
    "parallelAxisDefault.nameTextStyle.lineHeight": {
        "desc": " Line height of the text fragment. If lineHeight is not set in rich, lineHeight in parent level will be used. For example: \n\n    {\n        lineHeight: 56,\n        rich: {\n            a: {\n                // `lineHeight` is not set, then it will be 56\n            }\n        }\n    }\n    \n\n",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "12"
        }
    },
    "parallelAxisDefault.nameTextStyle.backgroundColor": {
        "desc": " Background color of the text fragment. Can be color string, like '#123234', 'red', 'rgba(0,23,11,0.3)'. Or image can be used, for example: \n\n    backgroundColor: {\n        image: 'xxx/xxx.png'\n        // It can be URL of a image,\n        // or dataURI,\n        // or HTMLImageElement,\n        // or HTMLCanvasElement.\n    }\n    \n\nwidth or height can be specified when using background image, or auto adapted by default. ",
        "uiControl": {
            "type": "color",
            "default": "'#fff'"
        }
    },
    "parallelAxisDefault.nameTextStyle.borderColor": {
        "desc": " Border color of the text fragment. ",
        "uiControl": {
            "type": "color",
            "default": "'#fff'"
        }
    },
    "parallelAxisDefault.nameTextStyle.borderWidth": {
        "desc": " Border width of the text fragment. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.nameTextStyle.borderType": {
        "desc": " the text fragment border type. Possible values are: \n\n* 'solid'\n* 'dashed'\n* 'dotted'\n\nSince v5.0.0, it can also be a number or a number array to specify the [dash array][0] of the line. With borderDashOffset , we can make the line style more flexible. For example： \n\n    {\n    \n    borderType: [5, 10],\n    \n    borderDashOffset: 5\n    }\n    \n\n\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray",
        "uiControl": {
            "type": "enum",
            "options": "'solid','dashed','dotted'"
        }
    },
    "parallelAxisDefault.nameTextStyle.borderDashOffset": {
        "desc": ">  Since > v5.0.0 To set the line dash offset. With borderType , we can make the line style more flexible. Refer to MDN [lineDashOffset][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "parallelAxisDefault.nameTextStyle.borderRadius": {
        "desc": " Border radius of the text fragment. ",
        "uiControl": {
            "type": "vector",
            "min": "0",
            "dims": "LT,RT, RB, LB",
            "default": "0"
        }
    },
    "parallelAxisDefault.nameTextStyle.padding": {
        "desc": " Padding of the text fragment, for example: \n\n* padding: [3, 4, 5, 6]: represents padding of [top, right, bottom, left].\n* padding: 4: represents padding: [4, 4, 4, 4].\n* padding: [3, 4]: represents padding: [3, 4, 3, 4].\n\nNotice, width and height specifies the width and height of the content, without padding. ",
        "uiControl": {
            "type": "vector",
            "min": "0",
            "dims": "T,R,B,L",
            "default": "0"
        }
    },
    "parallelAxisDefault.nameTextStyle.shadowColor": {
        "desc": " Shadow color of the text block. ",
        "uiControl": {
            "type": "color"
        }
    },
    "parallelAxisDefault.nameTextStyle.shadowBlur": {
        "desc": " Show blur of the text block. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.nameTextStyle.shadowOffsetX": {
        "desc": " Shadow X offset of the text block. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.nameTextStyle.shadowOffsetY": {
        "desc": " Shadow Y offset of the text block. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.nameTextStyle.width": {
        "desc": " Width of text block. ",
        "uiControl": {
            "type": "number",
            "default": "100",
            "min": "1",
            "max": "500",
            "step": "1"
        }
    },
    "parallelAxisDefault.nameTextStyle.height": {
        "desc": " Height of text block. ",
        "uiControl": {
            "type": "number",
            "default": "50",
            "min": "1",
            "max": "500",
            "step": "1"
        }
    },
    "parallelAxisDefault.nameTextStyle.textBorderColor": {
        "desc": " Storke color of the text. ",
        "uiControl": {
            "type": "color"
        }
    },
    "parallelAxisDefault.nameTextStyle.textBorderWidth": {
        "desc": " Storke line width of the text. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.nameTextStyle.textBorderType": {
        "desc": " Stroke line type of the text. Possible values are: \n\n* 'solid'\n* 'dashed'\n* 'dotted'\n\nSince v5.0.0, it can also be a number or a number array to specify the [dash array][0] of the line. With textBorderDashOffset , we can make the line style more flexible. For example： \n\n    {\n    \n    textBorderType: [5, 10],\n    \n    textBorderDashOffset: 5\n    }\n    \n\n\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray",
        "uiControl": {
            "type": "enum",
            "options": "'solid','dashed','dotted'"
        }
    },
    "parallelAxisDefault.nameTextStyle.textBorderDashOffset": {
        "desc": ">  Since > v5.0.0 To set the line dash offset. With textBorderType , we can make the line style more flexible. Refer to MDN [lineDashOffset][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "parallelAxisDefault.nameTextStyle.textShadowColor": {
        "desc": " Shadow color of the text itself. ",
        "uiControl": {
            "type": "color",
            "default": "'#000'"
        }
    },
    "parallelAxisDefault.nameTextStyle.textShadowBlur": {
        "desc": " Shadow blue of the text itself. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.nameTextStyle.textShadowOffsetX": {
        "desc": " Shadow X offset of the text itself. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.nameTextStyle.textShadowOffsetY": {
        "desc": " Shadow Y offset of the text itself. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.nameTextStyle.overflow": {
        "desc": " Determine how to display the text when it's overflow. Available when width is set. \n\n* 'truncate' Truncate the text and trailing with ellipsis.\n* 'break' Break by word\n* 'breakAll' Break by character.\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'truncate','break','breakAll'"
        }
    },
    "parallelAxisDefault.nameTextStyle.ellipsis": {
        "desc": " Ellipsis to be displayed when overflow is set to truncate. ",
        "uiControl": {
            "default": "'...'",
            "type": "string"
        }
    },
    "parallelAxisDefault.nameTextStyle.lineOverflow": {
        "desc": " Determine how to display the text when it's overflow on height. \n\n* 'truncate' Truncate the overflow lines.\n\n",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich": {
        "desc": " \"Rich text styles\" can be defined in this rich property. For example: \n\n    label: {\n        // Styles defined in 'rich' can be applied to some fragments\n        // of text by adding some markers to those fragment, like\n        // `{styleName|text content text content}`.\n        // `'\\n'` is the newline character.\n        formatter: [\n            '{a|Style \"a\" is applied to this snippet}'\n            '{b|Style \"b\" is applied to this snippet}This snippet use default style{x|use style \"x\"}'\n        ].join('\\n'),\n    \n        rich: {\n            a: {\n                color: 'red',\n                lineHeight: 10\n            },\n            b: {\n                backgroundColor: {\n                    image: 'xxx/xxx.jpg'\n                },\n                height: 40\n            },\n            x: {\n                fontSize: 18,\n                fontFamily: 'Microsoft YaHei',\n                borderColor: '#449933',\n                borderRadius: 4\n            },\n            ...\n        }\n    }\n    \n\nFor more details, see [Rich Text][0] please.\n\n[0]: tutorial.html#Rich%20Text",
        "uiControl": {
            "type": "Object"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.color": {
        "desc": " text color. ",
        "uiControl": {
            "type": "color",
            "default": "null"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.fontStyle": {
        "desc": " font style. Options are: \n\n* 'normal'\n* 'italic'\n* 'oblique'\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'normal','italic','oblique'"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.fontWeight": {
        "desc": " font thick weight. Options are: \n\n* 'normal'\n* 'bold'\n* 'bolder'\n* 'lighter'\n* 100 | 200 | 300 | 400...\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'normal','bold','bolder','lighter'"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.fontFamily": {
        "desc": " font family. Can also be 'serif' , 'monospace', ... ",
        "uiControl": {
            "type": "enum",
            "options": "'sans-serif','serif','monospace','Arial','Courier New'"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.fontSize": {
        "desc": " font size. ",
        "uiControl": {
            "type": "number",
            "default": "12",
            "min": "1",
            "step": "1"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.align": {
        "desc": " Horizontal alignment of text, automatic by default. Options are: \n\n* 'left'\n* 'center'\n* 'right'\n\nIf align is not set in rich, align in parent level will be used. For example: \n\n    {\n        align: right,\n        rich: {\n            a: {\n                // `align` is not set, then it will be right\n            }\n        }\n    }\n    \n\n",
        "uiControl": {
            "type": "enum",
            "options": "'left','center','right'"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.verticalAlign": {
        "desc": " Vertical alignment of text, automatic by default. Options are: \n\n* 'top'\n* 'middle'\n* 'bottom'\n\nIf verticalAlign is not set in rich, verticalAlign in parent level will be used. For example: \n\n    {\n        verticalAlign: bottom,\n        rich: {\n            a: {\n                // `verticalAlign` is not set, then it will be bottom\n            }\n        }\n    }\n    \n\n",
        "uiControl": {
            "type": "enum",
            "options": "'top','middle','bottom'"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.lineHeight": {
        "desc": " Line height of the text fragment. If lineHeight is not set in rich, lineHeight in parent level will be used. For example: \n\n    {\n        lineHeight: 56,\n        rich: {\n            a: {\n                // `lineHeight` is not set, then it will be 56\n            }\n        }\n    }\n    \n\n",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "12"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.backgroundColor": {
        "desc": " Background color of the text fragment. Can be color string, like '#123234', 'red', 'rgba(0,23,11,0.3)'. Or image can be used, for example: \n\n    backgroundColor: {\n        image: 'xxx/xxx.png'\n        // It can be URL of a image,\n        // or dataURI,\n        // or HTMLImageElement,\n        // or HTMLCanvasElement.\n    }\n    \n\nwidth or height can be specified when using background image, or auto adapted by default. ",
        "uiControl": {
            "type": "color",
            "default": "'#fff'"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.borderColor": {
        "desc": " Border color of the text fragment. ",
        "uiControl": {
            "type": "color",
            "default": "'#fff'"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.borderWidth": {
        "desc": " Border width of the text fragment. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.borderType": {
        "desc": " the text fragment border type. Possible values are: \n\n* 'solid'\n* 'dashed'\n* 'dotted'\n\nSince v5.0.0, it can also be a number or a number array to specify the [dash array][0] of the line. With borderDashOffset , we can make the line style more flexible. For example： \n\n    {\n    \n    borderType: [5, 10],\n    \n    borderDashOffset: 5\n    }\n    \n\n\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray",
        "uiControl": {
            "type": "enum",
            "options": "'solid','dashed','dotted'"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.borderDashOffset": {
        "desc": ">  Since > v5.0.0 To set the line dash offset. With borderType , we can make the line style more flexible. Refer to MDN [lineDashOffset][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.borderRadius": {
        "desc": " Border radius of the text fragment. ",
        "uiControl": {
            "type": "vector",
            "min": "0",
            "dims": "LT,RT, RB, LB",
            "default": "0"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.padding": {
        "desc": " Padding of the text fragment, for example: \n\n* padding: [3, 4, 5, 6]: represents padding of [top, right, bottom, left].\n* padding: 4: represents padding: [4, 4, 4, 4].\n* padding: [3, 4]: represents padding: [3, 4, 3, 4].\n\nNotice, width and height specifies the width and height of the content, without padding. ",
        "uiControl": {
            "type": "vector",
            "min": "0",
            "dims": "T,R,B,L",
            "default": "0"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.shadowColor": {
        "desc": " Shadow color of the text block. ",
        "uiControl": {
            "type": "color"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.shadowBlur": {
        "desc": " Show blur of the text block. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.shadowOffsetX": {
        "desc": " Shadow X offset of the text block. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.shadowOffsetY": {
        "desc": " Shadow Y offset of the text block. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.width": {
        "desc": " Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see backgroundColor). Notice, width and height specifies the width and height of the content, without padding. width can also be percent string, like '100%', which represents the percent of contentWidth (that is, the width without padding) of its container box. It is based on contentWidth because that each text fragment is layout based on the content box, where it makes no sense that calculating width based on outerWith in prectice. Notice, width and height only work when rich specified. ",
        "uiControl": {
            "type": [
                "number",
                "string"
            ]
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.height": {
        "desc": " Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see backgroundColor). Notice, width and height specifies the width and height of the content, without padding. Notice, width and height only work when rich specified. ",
        "uiControl": {
            "type": [
                "number",
                "string"
            ]
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.textBorderColor": {
        "desc": " Storke color of the text. ",
        "uiControl": {
            "type": "color"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.textBorderWidth": {
        "desc": " Storke line width of the text. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.textBorderType": {
        "desc": " Stroke line type of the text. Possible values are: \n\n* 'solid'\n* 'dashed'\n* 'dotted'\n\nSince v5.0.0, it can also be a number or a number array to specify the [dash array][0] of the line. With textBorderDashOffset , we can make the line style more flexible. For example： \n\n    {\n    \n    textBorderType: [5, 10],\n    \n    textBorderDashOffset: 5\n    }\n    \n\n\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray",
        "uiControl": {
            "type": "enum",
            "options": "'solid','dashed','dotted'"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.textBorderDashOffset": {
        "desc": ">  Since > v5.0.0 To set the line dash offset. With textBorderType , we can make the line style more flexible. Refer to MDN [lineDashOffset][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.textShadowColor": {
        "desc": " Shadow color of the text itself. ",
        "uiControl": {
            "type": "color",
            "default": "'#000'"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.textShadowBlur": {
        "desc": " Shadow blue of the text itself. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.textShadowOffsetX": {
        "desc": " Shadow X offset of the text itself. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.nameTextStyle.rich.<style_name>.textShadowOffsetY": {
        "desc": " Shadow Y offset of the text itself. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.nameGap": {
        "desc": " Gap between axis name and axis line. ",
        "uiControl": {
            "type": "number",
            "step": "0.5",
            "default": "15"
        }
    },
    "parallelAxisDefault.nameRotate": {
        "desc": " Rotation of axis name. ",
        "uiControl": {
            "type": "angle",
            "min": "-360",
            "max": "360",
            "step": "1",
            "default": "-360"
        }
    },
    "parallelAxisDefault.inverse": {
        "desc": " Set this to true to invert the axis. This is a new option available from Echarts 3 and newer. ",
        "uiControl": {
            "type": "boolean"
        }
    },
    "parallelAxisDefault.boundaryGap": {
        "desc": " The boundary gap on both sides of a coordinate axis. The setting and behavior of category axes and non-category axes are different. The boundaryGap of category axis can be set to either true or false. Default value is set to be true, in which case [axisTick][0] is served only as a separation line, and labels and data appear only in the center part of two [axis ticks][0], which is called _band_. For non-category axis, including time, numerical value, and log axes, boundaryGap is an array of two values, representing the spanning range between minimum and maximum value. The value can be set in numeric value or relative percentage, which becomes invalid after setting [min][1] and [max][2]. **Example:**    boundaryGap: ['20%', '20%']\n    \n\n\n\n[0]: #parallelAxis.axisTick\n[1]: #parallelAxis.min\n[2]: #parallelAxis.max",
        "uiControl": {
            "type": "boolean"
        }
    },
    "parallelAxisDefault.min": {
        "desc": " The minimun value of axis. It can be set to a special value 'dataMin' so that the minimum value on this axis is set to be the minimum label. It will be automatically computed to make sure axis tick is equally distributed when not set. In category axis, it can also be set as the ordinal number. For example, if a catergory axis has data: ['categoryA', 'categoryB', 'categoryC'], and the ordinal 2 represents 'categoryC'. Moreover, it can be set as negative number, like -3. If min is specified as a function, it should return a min value, like: \n\n    min: function (value) {\n        return value.min - 20;\n    }\n    \n\nvalue is an object, containing the min value and max value of the data. This function should return the min value of axis, or return null/undefined to make echarts use the auto calculated min value (null/undefined return is only supported since v4.8.0). ",
        "uiControl": {
            "type": "number"
        }
    },
    "parallelAxisDefault.max": {
        "desc": " The maximum value of axis. It can be set to a special value 'dataMax' so that the minimum value on this axis is set to be the maximum label. It will be automatically computed to make sure axis tick is equally distributed when not set. In category axis, it can also be set as the ordinal number. For example, if a catergory axis has data: ['categoryA', 'categoryB', 'categoryC'], and the ordinal 2 represents 'categoryC'. Moreover, it can be set as negative number, like -3. If max is specified as a function, it should return a max value, like: \n\n    max: function (value) {\n        return value.max - 20;\n    }\n    \n\nvalue is an object, containing the min value and max value of the data. This function should return the max value of axis, or return null/undefined to make echarts use the auto calculated max value (null/undefined return is only supported since v4.8.0). ",
        "uiControl": {
            "type": "number"
        }
    },
    "parallelAxisDefault.scale": {
        "desc": " It is available only in numerical axis, i.e., [type][0]: 'value'. It specifies whether not to contain zero position of axis compulsively. When it is set to be true, the axis may not contain zero position, which is useful in the scatter chart for both value axes. This configuration item is unavailable when the [min][1] and [max][2] are set.\n\n[0]: #parallelAxis.type\n[1]: #parallelAxis.min\n[2]: #parallelAxis.max",
        "uiControl": {
            "type": "boolean"
        }
    },
    "parallelAxisDefault.splitNumber": {
        "desc": " Number of segments that the axis is split into. Note that this number serves only as a recommendation, and the true segments may be adjusted based on readability. This is unavailable for category axis. ",
        "uiControl": {
            "type": "number",
            "min": "1",
            "step": "1",
            "default": "5"
        }
    },
    "parallelAxisDefault.minInterval": {
        "desc": " Minimum gap between split lines. For example, it can be set to be 1 to make sure axis label is show as integer. \n\n    {\n        minInterval: 1\n    }\n    \n\nIt is available only for axis of [type][0] 'value' or 'time'.\n\n[0]: #parallelAxis.type",
        "uiControl": {
            "type": "number"
        }
    },
    "parallelAxisDefault.maxInterval": {
        "desc": " Maximum gap between split lines. For example, in time axis ([type][0] is 'time'), it can be set to be 3600 * 24 * 1000 to make sure that the gap between axis labels is less than or equal to one day. \n\n    {\n        maxInterval: 3600 * 1000 * 24\n    }\n    \n\nIt is available only for axis of [type][0] 'value' or 'time'.\n\n[0]: #parallelAxis.type",
        "uiControl": {
            "type": "number"
        }
    },
    "parallelAxisDefault.interval": {
        "desc": " Compulsively set segmentation interval for axis. As [splitNumber][0] is a recommendation value, the calculated tick may not be the same as expected. In this case, interval should be used along with [min][1] and [max][2] to compulsively set tickings. But in most cases, we do not suggest using this, out automatic calculation is enough for most situations. This is unavailable for category axis. Timestamp should be passed for [type][3]: 'time' axis. Logged value should be passed for [type][3]: 'log' axis.\n\n[0]: #parallelAxis.splitNumber\n[1]: #parallelAxis.min\n[2]: #parallelAxis.max\n[3]: #parallelAxis.type",
        "uiControl": {
            "type": "number"
        }
    },
    "parallelAxisDefault.logBase": {
        "desc": " Base of logarithm, which is valid only for numeric axes with [type][0]: 'log'.\n\n[0]: #parallelAxis.type",
        "uiControl": {
            "type": "number",
            "default": "10"
        }
    },
    "parallelAxisDefault.silent": {
        "desc": " Set this to true, to prevent interaction with the axis. ",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "parallelAxisDefault.triggerEvent": {
        "desc": " Set this to true to enable triggering events. Parameters of the event include: \n\n    {\n        // Component type: xAxis, yAxis, radiusAxis, angleAxis\n        // Each of which has an attribute for index, e.g., xAxisIndex for xAxis\n        componentType: string,\n        // Value on axis before being formatted.\n        // Click on value label to trigger event.\n        value: '',\n        // Name of axis.\n        // Click on laben name to trigger event.\n        name: ''\n    }\n    \n\n",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "parallelAxisDefault.axisLine": {
        "desc": " Settings related to axis line. ",
        "uiControl": {
            "type": "Object"
        }
    },
    "parallelAxisDefault.axisLine.show": {
        "desc": " Set this to false to prevent the axis line from showing. ",
        "uiControl": {
            "type": "boolean",
            "default": "true"
        }
    },
    "parallelAxisDefault.axisLine.symbol": {
        "desc": " Symbol of the two ends of the axis. It could be a string, representing the same symbol for two ends; or an array with two string elements, representing the two ends separately. It's set to be 'none' by default, meaning no arrow for either end. If it is set to be 'arrow', there shall be two arrows. If there should only one arrow at the end, it should set to be ['none', 'arrow']. ",
        "uiControl": {
            "type": "icon",
            "default": "'none'"
        }
    },
    "parallelAxisDefault.axisLine.symbolSize": {
        "desc": " Size of the arrows at two ends. The first is the width perpendicular to the axis, the next is the width parallel to the axis. ",
        "uiControl": {
            "type": "vector",
            "default": "10,15"
        }
    },
    "parallelAxisDefault.axisLine.symbolOffset": {
        "desc": " Arrow offset of axis. If is array, the first number is the offset of the arrow at the beginning, and the second number is the offset of the arrow at the end. If is number, it means the arrows have the same offset. ",
        "uiControl": {
            "type": "vector",
            "default": "0,0"
        }
    },
    "parallelAxisDefault.axisLine.lineStyle": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "parallelAxisDefault.axisLine.lineStyle.color": {
        "desc": " line styleLine color. \n\n> Supports setting as solid color using > rgb(255,255,255)> , > rgba(255,255,255,1)> , > #fff> , etc. Also supports setting as gradient color and pattern fill, see [> option.color][0]>  for details \n\n[0]: #color",
        "uiControl": {
            "type": "color"
        }
    },
    "parallelAxisDefault.axisLine.lineStyle.width": {
        "desc": " line style line width. ",
        "uiControl": {
            "type": "number",
            "value": "1",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.axisLine.lineStyle.type": {
        "desc": " line type. Possible values are: \n\n* 'solid'\n* 'dashed'\n* 'dotted'\n\nSince v5.0.0, it can also be a number or a number array to specify the [dash array][0] of the line. With dashOffset , we can make the line style more flexible. For example： \n\n    {\n    \n    type: [5, 10],\n    \n    dashOffset: 5\n    }\n    \n\n\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray",
        "uiControl": {
            "type": "enum",
            "options": "'solid','dashed','dotted'"
        }
    },
    "parallelAxisDefault.axisLine.lineStyle.dashOffset": {
        "desc": ">  Since > v5.0.0 To set the line dash offset. With type , we can make the line style more flexible. Refer to MDN [lineDashOffset][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "parallelAxisDefault.axisLine.lineStyle.cap": {
        "desc": ">  Since > v5.0.0 To specify how to draw the end points of the line. Possible values are: \n\n* 'butt': The ends of lines are squared off at the endpoints.\n* 'round': The ends of lines are rounded.\n* 'square': The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.\n\nDefault value is 'butt'. Refer to MDN [lineCap][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap",
        "uiControl": {
            "type": "enum",
            "options": "'butt','round','square'"
        }
    },
    "parallelAxisDefault.axisLine.lineStyle.join": {
        "desc": ">  Since > v5.0.0 To determine the shape used to join two line segments where they meet. Possible values are: \n\n* 'bevel': Fills an additional triangular area between the common endpoint of connected segments, and the separate outside rectangular corners of each segment.\n* 'round': Rounds off the corners of a shape by filling an additional sector of disc centered at the common endpoint of connected segments. The radius for these rounded corners is equal to the line width.\n* 'miter': Connected segments are joined by extending their outside edges to connect at a single point, with the effect of filling an additional lozenge-shaped area. This setting is affected by the miterLimit property.\n\nDefault value is 'bevel'. Refer to MDN [lineJoin][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin",
        "uiControl": {
            "type": "enum",
            "options": "'bevel','round','miter'"
        }
    },
    "parallelAxisDefault.axisLine.lineStyle.miterLimit": {
        "desc": ">  Since > v5.0.0 To set the miter limit ratio. Only works when join is set as miter. Default value is 10. Negative、0、Infinity and NaN values are ignored. Refer to MDN [miterLimit][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "10"
        }
    },
    "parallelAxisDefault.axisLine.lineStyle.shadowBlur": {
        "desc": " Size of shadow blur. This attribute should be used along with shadowColor,shadowOffsetX, shadowOffsetY to set shadow to component. For example: \n\n    {\n        shadowColor: 'rgba(0, 0, 0, 0.5)',\n        shadowBlur: 10\n    }\n    \n\n",
        "uiControl": {
            "type": "number",
            "default": "0",
            "min": "0",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.axisLine.lineStyle.shadowColor": {
        "desc": " Shadow color. Support same format as color. ",
        "uiControl": {
            "type": "color",
            "default": "''"
        }
    },
    "parallelAxisDefault.axisLine.lineStyle.shadowOffsetX": {
        "desc": " Offset distance on the horizontal direction of shadow. ",
        "uiControl": {
            "type": "number",
            "default": "0",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.axisLine.lineStyle.shadowOffsetY": {
        "desc": " Offset distance on the vertical direction of shadow. ",
        "uiControl": {
            "type": "number",
            "default": "0",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.axisLine.lineStyle.opacity": {
        "desc": " Opacity of the component. Supports value from 0 to 1, and the component will not be drawn when set to 0. ",
        "uiControl": {
            "type": "number",
            "default": "1",
            "min": "0",
            "max": "1",
            "step": "0.01"
        }
    },
    "parallelAxisDefault.axisTick": {
        "desc": " Settings related to axis tick. ",
        "uiControl": {
            "type": "Object"
        }
    },
    "parallelAxisDefault.axisTick.show": {
        "desc": " Set this to false to prevent the axis tick from showing. ",
        "uiControl": {
            "type": "boolean",
            "default": "true"
        }
    },
    "parallelAxisDefault.axisTick.alignWithLabel": {
        "desc": " Align axis tick with label, which is available only when boundaryGap is set to be true in category axis. See the following picture: \n\n![][0]\n\n\n\n[0]: documents/asset/img/axis-align-with-label.png",
        "uiControl": {
            "type": "boolean",
            "default": "false"
        }
    },
    "parallelAxisDefault.axisTick.interval": {
        "desc": " Interval of axisTick, which is available in category axis. is set to be the same as [axisLabel.interval][0] by default. It uses a strategy that labels do not overlap by default. You may set it to be 0 to display all labels compulsively. If it is set to be 1, it means that labels are shown once after one label. And if it is set to be 2, it means labels are shown once after two labels, and so on. On the other hand, you can control by callback function, whose format is shown below: \n\n    (index:number, value: string) => boolean\n    \n\nThe first parameter is index of category, and the second parameter is the name of category. The return values decides whether to display label.\n\n[0]: #parallelAxis.axisLabel.interval",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "parallelAxisDefault.axisTick.inside": {
        "desc": " Set this to true so the axis labels face the inside direction. ",
        "uiControl": {
            "type": "boolean"
        }
    },
    "parallelAxisDefault.axisTick.length": {
        "desc": " The length of the axis tick. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "5"
        }
    },
    "parallelAxisDefault.axisTick.lineStyle": {
        "desc": " Line style of axis ticks. ",
        "uiControl": {
            "type": "Object"
        }
    },
    "parallelAxisDefault.axisTick.lineStyle.color": {
        "desc": " Color of axis label is set to be [axisLine.lineStyle.color][0] by default.\n\n[0]: #parallelAxis.axisLine.lineStyle.color",
        "uiControl": {
            "type": "color"
        }
    },
    "parallelAxisDefault.axisTick.lineStyle.width": {
        "desc": " axisTick line width. ",
        "uiControl": {
            "type": "number",
            "value": "1",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.axisTick.lineStyle.type": {
        "desc": " line type. Possible values are: \n\n* 'solid'\n* 'dashed'\n* 'dotted'\n\nSince v5.0.0, it can also be a number or a number array to specify the [dash array][0] of the line. With dashOffset , we can make the line style more flexible. For example： \n\n    {\n    \n    type: [5, 10],\n    \n    dashOffset: 5\n    }\n    \n\n\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray",
        "uiControl": {
            "type": "enum",
            "options": "'solid','dashed','dotted'"
        }
    },
    "parallelAxisDefault.axisTick.lineStyle.dashOffset": {
        "desc": ">  Since > v5.0.0 To set the line dash offset. With type , we can make the line style more flexible. Refer to MDN [lineDashOffset][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "parallelAxisDefault.axisTick.lineStyle.cap": {
        "desc": ">  Since > v5.0.0 To specify how to draw the end points of the line. Possible values are: \n\n* 'butt': The ends of lines are squared off at the endpoints.\n* 'round': The ends of lines are rounded.\n* 'square': The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.\n\nDefault value is 'butt'. Refer to MDN [lineCap][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap",
        "uiControl": {
            "type": "enum",
            "options": "'butt','round','square'"
        }
    },
    "parallelAxisDefault.axisTick.lineStyle.join": {
        "desc": ">  Since > v5.0.0 To determine the shape used to join two line segments where they meet. Possible values are: \n\n* 'bevel': Fills an additional triangular area between the common endpoint of connected segments, and the separate outside rectangular corners of each segment.\n* 'round': Rounds off the corners of a shape by filling an additional sector of disc centered at the common endpoint of connected segments. The radius for these rounded corners is equal to the line width.\n* 'miter': Connected segments are joined by extending their outside edges to connect at a single point, with the effect of filling an additional lozenge-shaped area. This setting is affected by the miterLimit property.\n\nDefault value is 'bevel'. Refer to MDN [lineJoin][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin",
        "uiControl": {
            "type": "enum",
            "options": "'bevel','round','miter'"
        }
    },
    "parallelAxisDefault.axisTick.lineStyle.miterLimit": {
        "desc": ">  Since > v5.0.0 To set the miter limit ratio. Only works when join is set as miter. Default value is 10. Negative、0、Infinity and NaN values are ignored. Refer to MDN [miterLimit][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "10"
        }
    },
    "parallelAxisDefault.axisTick.lineStyle.shadowBlur": {
        "desc": " Size of shadow blur. This attribute should be used along with shadowColor,shadowOffsetX, shadowOffsetY to set shadow to component. For example: \n\n    {\n        shadowColor: 'rgba(0, 0, 0, 0.5)',\n        shadowBlur: 10\n    }\n    \n\n",
        "uiControl": {
            "type": "number",
            "default": "0",
            "min": "0",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.axisTick.lineStyle.shadowColor": {
        "desc": " Shadow color. Support same format as color. ",
        "uiControl": {
            "type": "color",
            "default": "''"
        }
    },
    "parallelAxisDefault.axisTick.lineStyle.shadowOffsetX": {
        "desc": " Offset distance on the horizontal direction of shadow. ",
        "uiControl": {
            "type": "number",
            "default": "0",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.axisTick.lineStyle.shadowOffsetY": {
        "desc": " Offset distance on the vertical direction of shadow. ",
        "uiControl": {
            "type": "number",
            "default": "0",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.axisTick.lineStyle.opacity": {
        "desc": " Opacity of the component. Supports value from 0 to 1, and the component will not be drawn when set to 0. ",
        "uiControl": {
            "type": "number",
            "default": "1",
            "min": "0",
            "max": "1",
            "step": "0.01"
        }
    },
    "parallelAxisDefault.minorTick": {
        "desc": ">  Since > v4.6.0 Settings related minor ticks. Note: minorTick is not available in the category type axis. Examples: 1) Using minor ticks in function plotting. 暂时无法显示 2) Using minor ticks in log axis. 暂时无法显示 ",
        "uiControl": {
            "type": "Object"
        }
    },
    "parallelAxisDefault.minorTick.show": {
        "desc": " If show minor ticks. ",
        "uiControl": {
            "type": "boolean",
            "default": "true"
        }
    },
    "parallelAxisDefault.minorTick.splitNumber": {
        "desc": " Number of interval splited by minor ticks. ",
        "uiControl": {
            "type": "number",
            "min": "1",
            "step": "1",
            "default": "5"
        }
    },
    "parallelAxisDefault.minorTick.length": {
        "desc": " Length of minor ticks lines。 ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "3"
        }
    },
    "parallelAxisDefault.minorTick.lineStyle": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "parallelAxisDefault.minorTick.lineStyle.color": {
        "desc": " Style configuration of minor ticks lines [axisLine.lineStyle.color][0]。\n\n[0]: #parallelAxis.axisLine.lineStyle.color",
        "uiControl": {
            "type": "color"
        }
    },
    "parallelAxisDefault.minorTick.lineStyle.width": {
        "desc": " minorTick line width. ",
        "uiControl": {
            "type": "number",
            "value": "1",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.minorTick.lineStyle.type": {
        "desc": " line type. Possible values are: \n\n* 'solid'\n* 'dashed'\n* 'dotted'\n\nSince v5.0.0, it can also be a number or a number array to specify the [dash array][0] of the line. With dashOffset , we can make the line style more flexible. For example： \n\n    {\n    \n    type: [5, 10],\n    \n    dashOffset: 5\n    }\n    \n\n\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray",
        "uiControl": {
            "type": "enum",
            "options": "'solid','dashed','dotted'"
        }
    },
    "parallelAxisDefault.minorTick.lineStyle.dashOffset": {
        "desc": ">  Since > v5.0.0 To set the line dash offset. With type , we can make the line style more flexible. Refer to MDN [lineDashOffset][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "parallelAxisDefault.minorTick.lineStyle.cap": {
        "desc": ">  Since > v5.0.0 To specify how to draw the end points of the line. Possible values are: \n\n* 'butt': The ends of lines are squared off at the endpoints.\n* 'round': The ends of lines are rounded.\n* 'square': The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.\n\nDefault value is 'butt'. Refer to MDN [lineCap][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap",
        "uiControl": {
            "type": "enum",
            "options": "'butt','round','square'"
        }
    },
    "parallelAxisDefault.minorTick.lineStyle.join": {
        "desc": ">  Since > v5.0.0 To determine the shape used to join two line segments where they meet. Possible values are: \n\n* 'bevel': Fills an additional triangular area between the common endpoint of connected segments, and the separate outside rectangular corners of each segment.\n* 'round': Rounds off the corners of a shape by filling an additional sector of disc centered at the common endpoint of connected segments. The radius for these rounded corners is equal to the line width.\n* 'miter': Connected segments are joined by extending their outside edges to connect at a single point, with the effect of filling an additional lozenge-shaped area. This setting is affected by the miterLimit property.\n\nDefault value is 'bevel'. Refer to MDN [lineJoin][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin",
        "uiControl": {
            "type": "enum",
            "options": "'bevel','round','miter'"
        }
    },
    "parallelAxisDefault.minorTick.lineStyle.miterLimit": {
        "desc": ">  Since > v5.0.0 To set the miter limit ratio. Only works when join is set as miter. Default value is 10. Negative、0、Infinity and NaN values are ignored. Refer to MDN [miterLimit][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "10"
        }
    },
    "parallelAxisDefault.minorTick.lineStyle.shadowBlur": {
        "desc": " Size of shadow blur. This attribute should be used along with shadowColor,shadowOffsetX, shadowOffsetY to set shadow to component. For example: \n\n    {\n        shadowColor: 'rgba(0, 0, 0, 0.5)',\n        shadowBlur: 10\n    }\n    \n\n",
        "uiControl": {
            "type": "number",
            "default": "0",
            "min": "0",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.minorTick.lineStyle.shadowColor": {
        "desc": " Shadow color. Support same format as color. ",
        "uiControl": {
            "type": "color",
            "default": "''"
        }
    },
    "parallelAxisDefault.minorTick.lineStyle.shadowOffsetX": {
        "desc": " Offset distance on the horizontal direction of shadow. ",
        "uiControl": {
            "type": "number",
            "default": "0",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.minorTick.lineStyle.shadowOffsetY": {
        "desc": " Offset distance on the vertical direction of shadow. ",
        "uiControl": {
            "type": "number",
            "default": "0",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.minorTick.lineStyle.opacity": {
        "desc": " Opacity of the component. Supports value from 0 to 1, and the component will not be drawn when set to 0. ",
        "uiControl": {
            "type": "number",
            "default": "1",
            "min": "0",
            "max": "1",
            "step": "0.01"
        }
    },
    "parallelAxisDefault.axisLabel": {
        "desc": " Settings related to axis label. ",
        "uiControl": {
            "type": "Object"
        }
    },
    "parallelAxisDefault.axisLabel.show": {
        "desc": " Set this to false to prevent the axis label from appearing. ",
        "uiControl": {
            "type": "boolean",
            "default": "true"
        }
    },
    "parallelAxisDefault.axisLabel.interval": {
        "desc": " Interval of Axis label, which is available in category axis. It uses a strategy that labels do not overlap by default. You may set it to be 0 to display all labels compulsively. If it is set to be 1, it means that labels are shown once after one label. And if it is set to be 2, it means labels are shown once after two labels, and so on. On the other hand, you can control by callback function, whose format is shown below: \n\n    (index:number, value: string) => boolean\n    \n\nThe first parameter is index of category, and the second parameter is the name of category. The return values decides whether to display label. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "parallelAxisDefault.axisLabel.inside": {
        "desc": " Set this to true so the axis labels face the inside direction. ",
        "uiControl": {
            "type": "boolean"
        }
    },
    "parallelAxisDefault.axisLabel.rotate": {
        "desc": " Rotation degree of axis label, which is especially useful when there is no enough space for category axis. Rotation degree is from -90 to 90. ",
        "uiControl": {
            "type": "angle",
            "min": "-90",
            "max": "90",
            "step": "1",
            "default": "-90"
        }
    },
    "parallelAxisDefault.axisLabel.margin": {
        "desc": " The margin between the axis label and the axis line. ",
        "uiControl": {
            "type": "number",
            "default": "8",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.axisLabel.formatter": {
        "desc": " Formatter of axis label, which supports string template and callback function. Example: \n\n    // Use string template; template variable is the default label of axis {value}\n    formatter: '{value} kg'\n    // Use callback.\n    formatter: function (value, index) {\n        return value + 'kg';\n    }\n    \n\n- - -\n\nFor axes of time [type][0]: 'time', formatter supports the following forms: \n\n* **String Templates**: an easy and fast way to make frequently used date/time template, formed in string\n* **Callback Functions**: customized formatter to make complex format, formed in Function\n* **Cascading Templates**: to adopt different formatters for different time granularity, formed in object\n\nNext, we are going to introduce these three forms one by one. **String Templates** Using string templates is an easy way to format date/time with frequently used formats. If it can be used to make what you want, you are advised to do so. If not, you could then consider the others. Supported formats are: <table><thead><tr>GroupTemplateValue (EN)Value (ZH)</tr></thead><tbody><tr><td>Year</td><td>{yyyy}</td><td>e.g., 2020, 2021, ...</td><td>例：2020, 2021, ...</td></tr><tr><td></td><td>{yy}</td><td>00-99</td><td>00-99</td></tr><tr><td>Quarter</td><td>{Q}</td><td>1, 2, 3, 4</td><td>1, 2, 3, 4</td></tr><tr><td>Month</td><td>{MMMM}</td><td>e.g., January, February, ...</td><td>一月、二月、……</td></tr><tr><td></td><td>{MMM}</td><td>e.g., Jan, Feb, ...</td><td>1月、2月、……</td></tr><tr><td></td><td>{MM}</td><td>01-12</td><td>01-12</td></tr><tr><td></td><td>{M}</td><td>1-12</td><td>1-12</td></tr><tr><td>Day of Month</td><td>{dd}</td><td>01-31</td><td>01-31</td></tr><tr><td></td><td>{d}</td><td>1-31</td><td>1-31</td></tr><tr><td>Day of Week</td><td>{eeee}</td><td>Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday</td><td>星期日、星期一、星期二、星期三、星期四、星期五、星期六</td></tr><tr><td></td><td>{ee}</td><td>Sun, Mon, Tues, Wed, Thu, Fri, Sat</td><td>日、一、二、三、四、五、六</td></tr><tr><td></td><td>{e}</td><td>1-54</td><td>1-54</td></tr><tr><td>Hour</td><td>{HH}</td><td>00-23</td><td>00-23</td></tr><tr><td></td><td>{H}</td><td>0-23</td><td>0-23</td></tr><tr><td></td><td>{hh}</td><td>01-12</td><td>01-12</td></tr><tr><td></td><td>{h}</td><td>1-12</td><td>1-12</td></tr><tr><td>Minute</td><td>{mm}</td><td>00-59</td><td>00-59</td></tr><tr><td></td><td>{m}</td><td>0-59</td><td>0-59</td></tr><tr><td>Second</td><td>{ss}</td><td>00-59</td><td>00-59</td></tr><tr><td></td><td>{s}</td><td>0-59</td><td>0-59</td></tr><tr><td>Millisecond</td><td>{SSS}</td><td>000-999</td><td>000-999</td></tr><tr><td></td><td>{S}</td><td>0-999</td><td>0-999</td></tr></tbody></table>>  Templates of other languages can be found in [> the language package][1]> . Please refer to [> echarts.registerLocale][2]>  to register a language. Example: \n\n    formatter: '{yyyy}-{MM}-{dd}' // gets labels like '2020-12-02'\n    formatter: 'Day {d}' // gets labels like 'Day 2'\n    \n\n**Callback Functions** Callback functions can be used to get different formats for different axis tick values. Sometimes, if you have complex date/time formatting requirement, third-party libraries like [Moment.js][3] or [date-fns][4] can be used to return formatted labels. Example: \n\n    // Use callback function; function parameters are axis index\n    formatter: function (value, index) {\n        // Formatted to be month/day; display year only in the first label\n        var date = new Date(value);\n        var texts = [(date.getMonth() + 1), date.getDate()];\n        if (index === 0) {\n            texts.unshift(date.getYear());\n        }\n        return texts.join('/');\n    }\n    \n\n**Cascading Templates** Sometimes, we wish to use different formats for different time granularity. For example, in a quarter-year chart, we may wish to see the month name with the first date of the month, while see the date name with others. This can be made with: Example: \n\n    formatter: {\n        month: '{MMMM}', // Jan, Feb, ...\n        day: '{d}' // 1, 2, ...\n    }\n    \n\nSupported levels and their default formatters are: \n\n    {\n        year: '{yyyy}',\n        month: '{MMM}',\n        day: '{d}',\n        hour: '{HH}:{mm}',\n        minute: '{HH}:{mm}',\n        second: '{HH}:{mm}:{ss}',\n        millisecond: '{hh}:{mm}:{ss} {SSS}',\n        none: '{yyyy}-{MM}-{dd} {hh}:{mm}:{ss} {SSS}'\n    }\n    \n\nLet's take day for example. When a tick value is 0 for its hour, minute, second, and millisecond, day level will be used to make formatter. none is used when no other level fulfills, which is for tick values with millisecond values other than 0. **Rich Text** The above three forms all support rich text, so it can be used to make some complex effects. Example: \n\n    xAxis: {\n        type: 'time',\n        axisLabel: {\n            formatter: {\n                // Display year and month information on the first data of a year\n                year: '{yearStyle|{yyyy}}\\n{monthStyle|{MMM}}',\n                month: '{monthStyle|{MMM}}'\n            },\n            rich: {\n                yearStyle: {\n                    // Make yearly text more standing out\n                    color: '#000',\n                    fontWeight: 'bold'\n                },\n                monthStyle: {\n                    color: '#999'\n                }\n            }\n        }\n    },\n    \n\nThe above example can also be made with a callback function: Example: \n\n    xAxis: {\n        type: 'time',\n        axisLabel: {\n            formatter: function (value) {\n                const date = new Date(value);\n                const yearStart = new Date(value);\n                yearStart.setMonth(0);\n                yearStart.setDate(1);\n                yearStart.setHours(0);\n                yearStart.setMinutes(0);\n                yearStart.setSeconds(0);\n                yearStart.setMilliseconds(0);\n                // Whether a tick value is the start of a year\n                if (date.getTime() === yearStart.getTime()) {\n                    return '{year|' + date.getFullYear() + '}\\n'\n                        + '{month|' + (date.getMonth() + 1) + '月}';\n                }\n                else {\n                    return '{month|' + (date.getMonth() + 1) + '月}'\n                }\n            },\n            rich: {\n                year: {\n                    color: '#000',\n                    fontWeight: 'bold'\n                },\n                month: {\n                    color: '#999'\n                }\n            }\n        }\n    },\n    \n\n\n\n[0]: #.type\n[1]: https://github.com/apache/echarts/tree/master/src/i18n\n[2]: api.html#echarts.registerLocale\n[3]: https://momentjs.com/\n[4]: https://date-fns.org/",
        "uiControl": {
            "type": [
                "string",
                "Function"
            ]
        }
    },
    "parallelAxisDefault.axisLabel.showMinLabel": {
        "desc": " Whether to show the label of the min tick. Optional values: true, false, null. It is auto determined by default, that is, if labels are overlapped, the label of the min tick will not be displayed. ",
        "uiControl": {
            "type": "boolean"
        }
    },
    "parallelAxisDefault.axisLabel.showMaxLabel": {
        "desc": " Whether to show the label of the max tick. Optional values: true, false, null. It is auto determined by default, that is, if labels are overlapped, the label of the max tick will not be displayed. ",
        "uiControl": {
            "type": "boolean"
        }
    },
    "parallelAxisDefault.axisLabel.hideOverlap": {
        "desc": ">  Since > v5.2.0 Whether to hide overlapped labels. ",
        "uiControl": {
            "type": "boolean"
        }
    },
    "parallelAxisDefault.axisLabel.color": {
        "desc": " Color of axis label is set to be [axisLine.lineStyle.color][0] by default. Callback function is supported, in the following format: \n\n    (val: string) => Color\n    \n\nParameter is the text of label, and return value is the color. See the following example: \n\n    textStyle: {\n        color: function (value, index) {\n            return value >= 0 ? 'green' : 'red';\n        }\n    }\n    \n\n\n\n[0]: #parallelAxis.axisLine.lineStyle.color",
        "uiControl": {
            "type": "color"
        }
    },
    "parallelAxisDefault.axisLabel.fontStyle": {
        "desc": " font style. Options are: \n\n* 'normal'\n* 'italic'\n* 'oblique'\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'normal','italic','oblique'"
        }
    },
    "parallelAxisDefault.axisLabel.fontWeight": {
        "desc": " font thick weight. Options are: \n\n* 'normal'\n* 'bold'\n* 'bolder'\n* 'lighter'\n* 100 | 200 | 300 | 400...\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'normal','bold','bolder','lighter'"
        }
    },
    "parallelAxisDefault.axisLabel.fontFamily": {
        "desc": " font family. Can also be 'serif' , 'monospace', ... ",
        "uiControl": {
            "type": "enum",
            "options": "'sans-serif','serif','monospace','Arial','Courier New'"
        }
    },
    "parallelAxisDefault.axisLabel.fontSize": {
        "desc": " font size. ",
        "uiControl": {
            "type": "number",
            "default": "12",
            "min": "1",
            "step": "1"
        }
    },
    "parallelAxisDefault.axisLabel.align": {
        "desc": " Horizontal alignment of text, automatic by default. Options are: \n\n* 'left'\n* 'center'\n* 'right'\n\nIf align is not set in rich, align in parent level will be used. For example: \n\n    {\n        align: right,\n        rich: {\n            a: {\n                // `align` is not set, then it will be right\n            }\n        }\n    }\n    \n\n",
        "uiControl": {
            "type": "enum",
            "options": "'left','center','right'"
        }
    },
    "parallelAxisDefault.axisLabel.verticalAlign": {
        "desc": " Vertical alignment of text, automatic by default. Options are: \n\n* 'top'\n* 'middle'\n* 'bottom'\n\nIf verticalAlign is not set in rich, verticalAlign in parent level will be used. For example: \n\n    {\n        verticalAlign: bottom,\n        rich: {\n            a: {\n                // `verticalAlign` is not set, then it will be bottom\n            }\n        }\n    }\n    \n\n",
        "uiControl": {
            "type": "enum",
            "options": "'top','middle','bottom'"
        }
    },
    "parallelAxisDefault.axisLabel.lineHeight": {
        "desc": " Line height of the text fragment. If lineHeight is not set in rich, lineHeight in parent level will be used. For example: \n\n    {\n        lineHeight: 56,\n        rich: {\n            a: {\n                // `lineHeight` is not set, then it will be 56\n            }\n        }\n    }\n    \n\n",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "12"
        }
    },
    "parallelAxisDefault.axisLabel.backgroundColor": {
        "desc": " Background color of the text fragment. Can be color string, like '#123234', 'red', 'rgba(0,23,11,0.3)'. Or image can be used, for example: \n\n    backgroundColor: {\n        image: 'xxx/xxx.png'\n        // It can be URL of a image,\n        // or dataURI,\n        // or HTMLImageElement,\n        // or HTMLCanvasElement.\n    }\n    \n\nwidth or height can be specified when using background image, or auto adapted by default. ",
        "uiControl": {
            "type": "color",
            "default": "'#fff'"
        }
    },
    "parallelAxisDefault.axisLabel.borderColor": {
        "desc": " Border color of the text fragment. ",
        "uiControl": {
            "type": "color",
            "default": "'#fff'"
        }
    },
    "parallelAxisDefault.axisLabel.borderWidth": {
        "desc": " Border width of the text fragment. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.axisLabel.borderType": {
        "desc": " the text fragment border type. Possible values are: \n\n* 'solid'\n* 'dashed'\n* 'dotted'\n\nSince v5.0.0, it can also be a number or a number array to specify the [dash array][0] of the line. With borderDashOffset , we can make the line style more flexible. For example： \n\n    {\n    \n    borderType: [5, 10],\n    \n    borderDashOffset: 5\n    }\n    \n\n\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray",
        "uiControl": {
            "type": "enum",
            "options": "'solid','dashed','dotted'"
        }
    },
    "parallelAxisDefault.axisLabel.borderDashOffset": {
        "desc": ">  Since > v5.0.0 To set the line dash offset. With borderType , we can make the line style more flexible. Refer to MDN [lineDashOffset][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "parallelAxisDefault.axisLabel.borderRadius": {
        "desc": " Border radius of the text fragment. ",
        "uiControl": {
            "type": "vector",
            "min": "0",
            "dims": "LT,RT, RB, LB",
            "default": "0"
        }
    },
    "parallelAxisDefault.axisLabel.padding": {
        "desc": " Padding of the text fragment, for example: \n\n* padding: [3, 4, 5, 6]: represents padding of [top, right, bottom, left].\n* padding: 4: represents padding: [4, 4, 4, 4].\n* padding: [3, 4]: represents padding: [3, 4, 3, 4].\n\nNotice, width and height specifies the width and height of the content, without padding. ",
        "uiControl": {
            "type": "vector",
            "min": "0",
            "dims": "T,R,B,L",
            "default": "0"
        }
    },
    "parallelAxisDefault.axisLabel.shadowColor": {
        "desc": " Shadow color of the text block. ",
        "uiControl": {
            "type": "color"
        }
    },
    "parallelAxisDefault.axisLabel.shadowBlur": {
        "desc": " Show blur of the text block. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.axisLabel.shadowOffsetX": {
        "desc": " Shadow X offset of the text block. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.axisLabel.shadowOffsetY": {
        "desc": " Shadow Y offset of the text block. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.axisLabel.width": {
        "desc": " Width of text block. ",
        "uiControl": {
            "type": "number",
            "default": "100",
            "min": "1",
            "max": "500",
            "step": "1"
        }
    },
    "parallelAxisDefault.axisLabel.height": {
        "desc": " Height of text block. ",
        "uiControl": {
            "type": "number",
            "default": "50",
            "min": "1",
            "max": "500",
            "step": "1"
        }
    },
    "parallelAxisDefault.axisLabel.textBorderColor": {
        "desc": " Storke color of the text. ",
        "uiControl": {
            "type": "color"
        }
    },
    "parallelAxisDefault.axisLabel.textBorderWidth": {
        "desc": " Storke line width of the text. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.axisLabel.textBorderType": {
        "desc": " Stroke line type of the text. Possible values are: \n\n* 'solid'\n* 'dashed'\n* 'dotted'\n\nSince v5.0.0, it can also be a number or a number array to specify the [dash array][0] of the line. With textBorderDashOffset , we can make the line style more flexible. For example： \n\n    {\n    \n    textBorderType: [5, 10],\n    \n    textBorderDashOffset: 5\n    }\n    \n\n\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray",
        "uiControl": {
            "type": "enum",
            "options": "'solid','dashed','dotted'"
        }
    },
    "parallelAxisDefault.axisLabel.textBorderDashOffset": {
        "desc": ">  Since > v5.0.0 To set the line dash offset. With textBorderType , we can make the line style more flexible. Refer to MDN [lineDashOffset][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "parallelAxisDefault.axisLabel.textShadowColor": {
        "desc": " Shadow color of the text itself. ",
        "uiControl": {
            "type": "color",
            "default": "'#000'"
        }
    },
    "parallelAxisDefault.axisLabel.textShadowBlur": {
        "desc": " Shadow blue of the text itself. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.axisLabel.textShadowOffsetX": {
        "desc": " Shadow X offset of the text itself. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.axisLabel.textShadowOffsetY": {
        "desc": " Shadow Y offset of the text itself. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.axisLabel.overflow": {
        "desc": " Determine how to display the text when it's overflow. Available when width is set. \n\n* 'truncate' Truncate the text and trailing with ellipsis.\n* 'break' Break by word\n* 'breakAll' Break by character.\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'truncate','break','breakAll'"
        }
    },
    "parallelAxisDefault.axisLabel.ellipsis": {
        "desc": " Ellipsis to be displayed when overflow is set to truncate. ",
        "uiControl": {
            "default": "'...'",
            "type": "string"
        }
    },
    "parallelAxisDefault.axisLabel.lineOverflow": {
        "desc": " Determine how to display the text when it's overflow on height. \n\n* 'truncate' Truncate the overflow lines.\n\n",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "parallelAxisDefault.axisLabel.rich": {
        "desc": " \"Rich text styles\" can be defined in this rich property. For example: \n\n    label: {\n        // Styles defined in 'rich' can be applied to some fragments\n        // of text by adding some markers to those fragment, like\n        // `{styleName|text content text content}`.\n        // `'\\n'` is the newline character.\n        formatter: [\n            '{a|Style \"a\" is applied to this snippet}'\n            '{b|Style \"b\" is applied to this snippet}This snippet use default style{x|use style \"x\"}'\n        ].join('\\n'),\n    \n        rich: {\n            a: {\n                color: 'red',\n                lineHeight: 10\n            },\n            b: {\n                backgroundColor: {\n                    image: 'xxx/xxx.jpg'\n                },\n                height: 40\n            },\n            x: {\n                fontSize: 18,\n                fontFamily: 'Microsoft YaHei',\n                borderColor: '#449933',\n                borderRadius: 4\n            },\n            ...\n        }\n    }\n    \n\nFor more details, see [Rich Text][0] please.\n\n[0]: tutorial.html#Rich%20Text",
        "uiControl": {
            "type": "Object"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.color": {
        "desc": " text color. ",
        "uiControl": {
            "type": "color",
            "default": "null"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.fontStyle": {
        "desc": " font style. Options are: \n\n* 'normal'\n* 'italic'\n* 'oblique'\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'normal','italic','oblique'"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.fontWeight": {
        "desc": " font thick weight. Options are: \n\n* 'normal'\n* 'bold'\n* 'bolder'\n* 'lighter'\n* 100 | 200 | 300 | 400...\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'normal','bold','bolder','lighter'"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.fontFamily": {
        "desc": " font family. Can also be 'serif' , 'monospace', ... ",
        "uiControl": {
            "type": "enum",
            "options": "'sans-serif','serif','monospace','Arial','Courier New'"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.fontSize": {
        "desc": " font size. ",
        "uiControl": {
            "type": "number",
            "default": "12",
            "min": "1",
            "step": "1"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.align": {
        "desc": " Horizontal alignment of text, automatic by default. Options are: \n\n* 'left'\n* 'center'\n* 'right'\n\nIf align is not set in rich, align in parent level will be used. For example: \n\n    {\n        align: right,\n        rich: {\n            a: {\n                // `align` is not set, then it will be right\n            }\n        }\n    }\n    \n\n",
        "uiControl": {
            "type": "enum",
            "options": "'left','center','right'"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.verticalAlign": {
        "desc": " Vertical alignment of text, automatic by default. Options are: \n\n* 'top'\n* 'middle'\n* 'bottom'\n\nIf verticalAlign is not set in rich, verticalAlign in parent level will be used. For example: \n\n    {\n        verticalAlign: bottom,\n        rich: {\n            a: {\n                // `verticalAlign` is not set, then it will be bottom\n            }\n        }\n    }\n    \n\n",
        "uiControl": {
            "type": "enum",
            "options": "'top','middle','bottom'"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.lineHeight": {
        "desc": " Line height of the text fragment. If lineHeight is not set in rich, lineHeight in parent level will be used. For example: \n\n    {\n        lineHeight: 56,\n        rich: {\n            a: {\n                // `lineHeight` is not set, then it will be 56\n            }\n        }\n    }\n    \n\n",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "12"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.backgroundColor": {
        "desc": " Background color of the text fragment. Can be color string, like '#123234', 'red', 'rgba(0,23,11,0.3)'. Or image can be used, for example: \n\n    backgroundColor: {\n        image: 'xxx/xxx.png'\n        // It can be URL of a image,\n        // or dataURI,\n        // or HTMLImageElement,\n        // or HTMLCanvasElement.\n    }\n    \n\nwidth or height can be specified when using background image, or auto adapted by default. ",
        "uiControl": {
            "type": "color",
            "default": "'#fff'"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.borderColor": {
        "desc": " Border color of the text fragment. ",
        "uiControl": {
            "type": "color",
            "default": "'#fff'"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.borderWidth": {
        "desc": " Border width of the text fragment. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.borderType": {
        "desc": " the text fragment border type. Possible values are: \n\n* 'solid'\n* 'dashed'\n* 'dotted'\n\nSince v5.0.0, it can also be a number or a number array to specify the [dash array][0] of the line. With borderDashOffset , we can make the line style more flexible. For example： \n\n    {\n    \n    borderType: [5, 10],\n    \n    borderDashOffset: 5\n    }\n    \n\n\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray",
        "uiControl": {
            "type": "enum",
            "options": "'solid','dashed','dotted'"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.borderDashOffset": {
        "desc": ">  Since > v5.0.0 To set the line dash offset. With borderType , we can make the line style more flexible. Refer to MDN [lineDashOffset][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.borderRadius": {
        "desc": " Border radius of the text fragment. ",
        "uiControl": {
            "type": "vector",
            "min": "0",
            "dims": "LT,RT, RB, LB",
            "default": "0"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.padding": {
        "desc": " Padding of the text fragment, for example: \n\n* padding: [3, 4, 5, 6]: represents padding of [top, right, bottom, left].\n* padding: 4: represents padding: [4, 4, 4, 4].\n* padding: [3, 4]: represents padding: [3, 4, 3, 4].\n\nNotice, width and height specifies the width and height of the content, without padding. ",
        "uiControl": {
            "type": "vector",
            "min": "0",
            "dims": "T,R,B,L",
            "default": "0"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.shadowColor": {
        "desc": " Shadow color of the text block. ",
        "uiControl": {
            "type": "color"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.shadowBlur": {
        "desc": " Show blur of the text block. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.shadowOffsetX": {
        "desc": " Shadow X offset of the text block. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.shadowOffsetY": {
        "desc": " Shadow Y offset of the text block. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.width": {
        "desc": " Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see backgroundColor). Notice, width and height specifies the width and height of the content, without padding. width can also be percent string, like '100%', which represents the percent of contentWidth (that is, the width without padding) of its container box. It is based on contentWidth because that each text fragment is layout based on the content box, where it makes no sense that calculating width based on outerWith in prectice. Notice, width and height only work when rich specified. ",
        "uiControl": {
            "type": [
                "number",
                "string"
            ]
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.height": {
        "desc": " Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see backgroundColor). Notice, width and height specifies the width and height of the content, without padding. Notice, width and height only work when rich specified. ",
        "uiControl": {
            "type": [
                "number",
                "string"
            ]
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.textBorderColor": {
        "desc": " Storke color of the text. ",
        "uiControl": {
            "type": "color"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.textBorderWidth": {
        "desc": " Storke line width of the text. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.textBorderType": {
        "desc": " Stroke line type of the text. Possible values are: \n\n* 'solid'\n* 'dashed'\n* 'dotted'\n\nSince v5.0.0, it can also be a number or a number array to specify the [dash array][0] of the line. With textBorderDashOffset , we can make the line style more flexible. For example： \n\n    {\n    \n    textBorderType: [5, 10],\n    \n    textBorderDashOffset: 5\n    }\n    \n\n\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray",
        "uiControl": {
            "type": "enum",
            "options": "'solid','dashed','dotted'"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.textBorderDashOffset": {
        "desc": ">  Since > v5.0.0 To set the line dash offset. With textBorderType , we can make the line style more flexible. Refer to MDN [lineDashOffset][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.textShadowColor": {
        "desc": " Shadow color of the text itself. ",
        "uiControl": {
            "type": "color",
            "default": "'#000'"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.textShadowBlur": {
        "desc": " Shadow blue of the text itself. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.textShadowOffsetX": {
        "desc": " Shadow X offset of the text itself. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.axisLabel.rich.<style_name>.textShadowOffsetY": {
        "desc": " Shadow Y offset of the text itself. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.data": {
        "desc": " Category data, available in [type][0]: 'category' axis. If [type][0] is not specified, but axis.data is specified, the [type][0] is auto set as 'category'. If [type][0] is specified as 'category', but axis.data is not specified, axis.data will be auto collected from [series.data][1]. It brings convenience, but we should notice that axis.data provides then value range of the 'category' axis. If it is auto collected from [series.data][1], Only the values appearing in [series.data][1] can be collected. For example, if [series.data][1] is empty, nothing will be collected. Example: \n\n    // Name list of all categories\n    data: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    // Each item could also be a specific configuration item.\n    // In this case, `value` is used as the category name.\n    data: [{\n        value: 'Monday',\n        // Highlight Monday\n        textStyle: {\n            fontSize: 20,\n            color: 'red'\n        }\n    }, 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    \n\n\n\n[0]: #parallelAxis.type\n[1]: #series.data",
        "uiControl": {
            "type": "Array"
        }
    },
    "parallelAxisDefault.data.value": {
        "desc": " Name of a category. ",
        "uiControl": {
            "type": "string"
        }
    },
    "parallelAxisDefault.data.textStyle": {
        "desc": " Text style of the category. ",
        "uiControl": {
            "type": "Object"
        }
    },
    "parallelAxisDefault.data.textStyle.color": {
        "desc": " text color. ",
        "uiControl": {
            "type": "color",
            "default": "null"
        }
    },
    "parallelAxisDefault.data.textStyle.fontStyle": {
        "desc": " font style. Options are: \n\n* 'normal'\n* 'italic'\n* 'oblique'\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'normal','italic','oblique'"
        }
    },
    "parallelAxisDefault.data.textStyle.fontWeight": {
        "desc": " font thick weight. Options are: \n\n* 'normal'\n* 'bold'\n* 'bolder'\n* 'lighter'\n* 100 | 200 | 300 | 400...\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'normal','bold','bolder','lighter'"
        }
    },
    "parallelAxisDefault.data.textStyle.fontFamily": {
        "desc": " font family. Can also be 'serif' , 'monospace', ... ",
        "uiControl": {
            "type": "enum",
            "options": "'sans-serif','serif','monospace','Arial','Courier New'"
        }
    },
    "parallelAxisDefault.data.textStyle.fontSize": {
        "desc": " font size. ",
        "uiControl": {
            "type": "number",
            "default": "12",
            "min": "1",
            "step": "1"
        }
    },
    "parallelAxisDefault.data.textStyle.align": {
        "desc": " Horizontal alignment of text, automatic by default. Options are: \n\n* 'left'\n* 'center'\n* 'right'\n\nIf align is not set in rich, align in parent level will be used. For example: \n\n    {\n        align: right,\n        rich: {\n            a: {\n                // `align` is not set, then it will be right\n            }\n        }\n    }\n    \n\n",
        "uiControl": {
            "type": "enum",
            "options": "'left','center','right'"
        }
    },
    "parallelAxisDefault.data.textStyle.verticalAlign": {
        "desc": " Vertical alignment of text, automatic by default. Options are: \n\n* 'top'\n* 'middle'\n* 'bottom'\n\nIf verticalAlign is not set in rich, verticalAlign in parent level will be used. For example: \n\n    {\n        verticalAlign: bottom,\n        rich: {\n            a: {\n                // `verticalAlign` is not set, then it will be bottom\n            }\n        }\n    }\n    \n\n",
        "uiControl": {
            "type": "enum",
            "options": "'top','middle','bottom'"
        }
    },
    "parallelAxisDefault.data.textStyle.lineHeight": {
        "desc": " Line height of the text fragment. If lineHeight is not set in rich, lineHeight in parent level will be used. For example: \n\n    {\n        lineHeight: 56,\n        rich: {\n            a: {\n                // `lineHeight` is not set, then it will be 56\n            }\n        }\n    }\n    \n\n",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "12"
        }
    },
    "parallelAxisDefault.data.textStyle.backgroundColor": {
        "desc": " Background color of the text fragment. Can be color string, like '#123234', 'red', 'rgba(0,23,11,0.3)'. Or image can be used, for example: \n\n    backgroundColor: {\n        image: 'xxx/xxx.png'\n        // It can be URL of a image,\n        // or dataURI,\n        // or HTMLImageElement,\n        // or HTMLCanvasElement.\n    }\n    \n\nwidth or height can be specified when using background image, or auto adapted by default. ",
        "uiControl": {
            "type": "color",
            "default": "'#fff'"
        }
    },
    "parallelAxisDefault.data.textStyle.borderColor": {
        "desc": " Border color of the text fragment. ",
        "uiControl": {
            "type": "color",
            "default": "'#fff'"
        }
    },
    "parallelAxisDefault.data.textStyle.borderWidth": {
        "desc": " Border width of the text fragment. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.data.textStyle.borderType": {
        "desc": " the text fragment border type. Possible values are: \n\n* 'solid'\n* 'dashed'\n* 'dotted'\n\nSince v5.0.0, it can also be a number or a number array to specify the [dash array][0] of the line. With borderDashOffset , we can make the line style more flexible. For example： \n\n    {\n    \n    borderType: [5, 10],\n    \n    borderDashOffset: 5\n    }\n    \n\n\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray",
        "uiControl": {
            "type": "enum",
            "options": "'solid','dashed','dotted'"
        }
    },
    "parallelAxisDefault.data.textStyle.borderDashOffset": {
        "desc": ">  Since > v5.0.0 To set the line dash offset. With borderType , we can make the line style more flexible. Refer to MDN [lineDashOffset][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "parallelAxisDefault.data.textStyle.borderRadius": {
        "desc": " Border radius of the text fragment. ",
        "uiControl": {
            "type": "vector",
            "min": "0",
            "dims": "LT,RT, RB, LB",
            "default": "0"
        }
    },
    "parallelAxisDefault.data.textStyle.padding": {
        "desc": " Padding of the text fragment, for example: \n\n* padding: [3, 4, 5, 6]: represents padding of [top, right, bottom, left].\n* padding: 4: represents padding: [4, 4, 4, 4].\n* padding: [3, 4]: represents padding: [3, 4, 3, 4].\n\nNotice, width and height specifies the width and height of the content, without padding. ",
        "uiControl": {
            "type": "vector",
            "min": "0",
            "dims": "T,R,B,L",
            "default": "0"
        }
    },
    "parallelAxisDefault.data.textStyle.shadowColor": {
        "desc": " Shadow color of the text block. ",
        "uiControl": {
            "type": "color"
        }
    },
    "parallelAxisDefault.data.textStyle.shadowBlur": {
        "desc": " Show blur of the text block. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.data.textStyle.shadowOffsetX": {
        "desc": " Shadow X offset of the text block. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.data.textStyle.shadowOffsetY": {
        "desc": " Shadow Y offset of the text block. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.data.textStyle.width": {
        "desc": " Width of text block. ",
        "uiControl": {
            "type": "number",
            "default": "100",
            "min": "1",
            "max": "500",
            "step": "1"
        }
    },
    "parallelAxisDefault.data.textStyle.height": {
        "desc": " Height of text block. ",
        "uiControl": {
            "type": "number",
            "default": "50",
            "min": "1",
            "max": "500",
            "step": "1"
        }
    },
    "parallelAxisDefault.data.textStyle.textBorderColor": {
        "desc": " Storke color of the text. ",
        "uiControl": {
            "type": "color"
        }
    },
    "parallelAxisDefault.data.textStyle.textBorderWidth": {
        "desc": " Storke line width of the text. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.data.textStyle.textBorderType": {
        "desc": " Stroke line type of the text. Possible values are: \n\n* 'solid'\n* 'dashed'\n* 'dotted'\n\nSince v5.0.0, it can also be a number or a number array to specify the [dash array][0] of the line. With textBorderDashOffset , we can make the line style more flexible. For example： \n\n    {\n    \n    textBorderType: [5, 10],\n    \n    textBorderDashOffset: 5\n    }\n    \n\n\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray",
        "uiControl": {
            "type": "enum",
            "options": "'solid','dashed','dotted'"
        }
    },
    "parallelAxisDefault.data.textStyle.textBorderDashOffset": {
        "desc": ">  Since > v5.0.0 To set the line dash offset. With textBorderType , we can make the line style more flexible. Refer to MDN [lineDashOffset][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "parallelAxisDefault.data.textStyle.textShadowColor": {
        "desc": " Shadow color of the text itself. ",
        "uiControl": {
            "type": "color",
            "default": "'#000'"
        }
    },
    "parallelAxisDefault.data.textStyle.textShadowBlur": {
        "desc": " Shadow blue of the text itself. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.data.textStyle.textShadowOffsetX": {
        "desc": " Shadow X offset of the text itself. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.data.textStyle.textShadowOffsetY": {
        "desc": " Shadow Y offset of the text itself. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.data.textStyle.overflow": {
        "desc": " Determine how to display the text when it's overflow. Available when width is set. \n\n* 'truncate' Truncate the text and trailing with ellipsis.\n* 'break' Break by word\n* 'breakAll' Break by character.\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'truncate','break','breakAll'"
        }
    },
    "parallelAxisDefault.data.textStyle.ellipsis": {
        "desc": " Ellipsis to be displayed when overflow is set to truncate. ",
        "uiControl": {
            "default": "'...'",
            "type": "string"
        }
    },
    "parallelAxisDefault.data.textStyle.lineOverflow": {
        "desc": " Determine how to display the text when it's overflow on height. \n\n* 'truncate' Truncate the overflow lines.\n\n",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "parallelAxisDefault.data.textStyle.rich": {
        "desc": " \"Rich text styles\" can be defined in this rich property. For example: \n\n    label: {\n        // Styles defined in 'rich' can be applied to some fragments\n        // of text by adding some markers to those fragment, like\n        // `{styleName|text content text content}`.\n        // `'\\n'` is the newline character.\n        formatter: [\n            '{a|Style \"a\" is applied to this snippet}'\n            '{b|Style \"b\" is applied to this snippet}This snippet use default style{x|use style \"x\"}'\n        ].join('\\n'),\n    \n        rich: {\n            a: {\n                color: 'red',\n                lineHeight: 10\n            },\n            b: {\n                backgroundColor: {\n                    image: 'xxx/xxx.jpg'\n                },\n                height: 40\n            },\n            x: {\n                fontSize: 18,\n                fontFamily: 'Microsoft YaHei',\n                borderColor: '#449933',\n                borderRadius: 4\n            },\n            ...\n        }\n    }\n    \n\nFor more details, see [Rich Text][0] please.\n\n[0]: tutorial.html#Rich%20Text",
        "uiControl": {
            "type": "Object"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.color": {
        "desc": " text color. ",
        "uiControl": {
            "type": "color",
            "default": "null"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.fontStyle": {
        "desc": " font style. Options are: \n\n* 'normal'\n* 'italic'\n* 'oblique'\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'normal','italic','oblique'"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.fontWeight": {
        "desc": " font thick weight. Options are: \n\n* 'normal'\n* 'bold'\n* 'bolder'\n* 'lighter'\n* 100 | 200 | 300 | 400...\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'normal','bold','bolder','lighter'"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.fontFamily": {
        "desc": " font family. Can also be 'serif' , 'monospace', ... ",
        "uiControl": {
            "type": "enum",
            "options": "'sans-serif','serif','monospace','Arial','Courier New'"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.fontSize": {
        "desc": " font size. ",
        "uiControl": {
            "type": "number",
            "default": "12",
            "min": "1",
            "step": "1"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.align": {
        "desc": " Horizontal alignment of text, automatic by default. Options are: \n\n* 'left'\n* 'center'\n* 'right'\n\nIf align is not set in rich, align in parent level will be used. For example: \n\n    {\n        align: right,\n        rich: {\n            a: {\n                // `align` is not set, then it will be right\n            }\n        }\n    }\n    \n\n",
        "uiControl": {
            "type": "enum",
            "options": "'left','center','right'"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.verticalAlign": {
        "desc": " Vertical alignment of text, automatic by default. Options are: \n\n* 'top'\n* 'middle'\n* 'bottom'\n\nIf verticalAlign is not set in rich, verticalAlign in parent level will be used. For example: \n\n    {\n        verticalAlign: bottom,\n        rich: {\n            a: {\n                // `verticalAlign` is not set, then it will be bottom\n            }\n        }\n    }\n    \n\n",
        "uiControl": {
            "type": "enum",
            "options": "'top','middle','bottom'"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.lineHeight": {
        "desc": " Line height of the text fragment. If lineHeight is not set in rich, lineHeight in parent level will be used. For example: \n\n    {\n        lineHeight: 56,\n        rich: {\n            a: {\n                // `lineHeight` is not set, then it will be 56\n            }\n        }\n    }\n    \n\n",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "12"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.backgroundColor": {
        "desc": " Background color of the text fragment. Can be color string, like '#123234', 'red', 'rgba(0,23,11,0.3)'. Or image can be used, for example: \n\n    backgroundColor: {\n        image: 'xxx/xxx.png'\n        // It can be URL of a image,\n        // or dataURI,\n        // or HTMLImageElement,\n        // or HTMLCanvasElement.\n    }\n    \n\nwidth or height can be specified when using background image, or auto adapted by default. ",
        "uiControl": {
            "type": "color",
            "default": "'#fff'"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.borderColor": {
        "desc": " Border color of the text fragment. ",
        "uiControl": {
            "type": "color",
            "default": "'#fff'"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.borderWidth": {
        "desc": " Border width of the text fragment. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.borderType": {
        "desc": " the text fragment border type. Possible values are: \n\n* 'solid'\n* 'dashed'\n* 'dotted'\n\nSince v5.0.0, it can also be a number or a number array to specify the [dash array][0] of the line. With borderDashOffset , we can make the line style more flexible. For example： \n\n    {\n    \n    borderType: [5, 10],\n    \n    borderDashOffset: 5\n    }\n    \n\n\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray",
        "uiControl": {
            "type": "enum",
            "options": "'solid','dashed','dotted'"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.borderDashOffset": {
        "desc": ">  Since > v5.0.0 To set the line dash offset. With borderType , we can make the line style more flexible. Refer to MDN [lineDashOffset][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.borderRadius": {
        "desc": " Border radius of the text fragment. ",
        "uiControl": {
            "type": "vector",
            "min": "0",
            "dims": "LT,RT, RB, LB",
            "default": "0"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.padding": {
        "desc": " Padding of the text fragment, for example: \n\n* padding: [3, 4, 5, 6]: represents padding of [top, right, bottom, left].\n* padding: 4: represents padding: [4, 4, 4, 4].\n* padding: [3, 4]: represents padding: [3, 4, 3, 4].\n\nNotice, width and height specifies the width and height of the content, without padding. ",
        "uiControl": {
            "type": "vector",
            "min": "0",
            "dims": "T,R,B,L",
            "default": "0"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.shadowColor": {
        "desc": " Shadow color of the text block. ",
        "uiControl": {
            "type": "color"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.shadowBlur": {
        "desc": " Show blur of the text block. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.shadowOffsetX": {
        "desc": " Shadow X offset of the text block. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.shadowOffsetY": {
        "desc": " Shadow Y offset of the text block. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.width": {
        "desc": " Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see backgroundColor). Notice, width and height specifies the width and height of the content, without padding. width can also be percent string, like '100%', which represents the percent of contentWidth (that is, the width without padding) of its container box. It is based on contentWidth because that each text fragment is layout based on the content box, where it makes no sense that calculating width based on outerWith in prectice. Notice, width and height only work when rich specified. ",
        "uiControl": {
            "type": [
                "number",
                "string"
            ]
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.height": {
        "desc": " Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see backgroundColor). Notice, width and height specifies the width and height of the content, without padding. Notice, width and height only work when rich specified. ",
        "uiControl": {
            "type": [
                "number",
                "string"
            ]
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.textBorderColor": {
        "desc": " Storke color of the text. ",
        "uiControl": {
            "type": "color"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.textBorderWidth": {
        "desc": " Storke line width of the text. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.textBorderType": {
        "desc": " Stroke line type of the text. Possible values are: \n\n* 'solid'\n* 'dashed'\n* 'dotted'\n\nSince v5.0.0, it can also be a number or a number array to specify the [dash array][0] of the line. With textBorderDashOffset , we can make the line style more flexible. For example： \n\n    {\n    \n    textBorderType: [5, 10],\n    \n    textBorderDashOffset: 5\n    }\n    \n\n\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray",
        "uiControl": {
            "type": "enum",
            "options": "'solid','dashed','dotted'"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.textBorderDashOffset": {
        "desc": ">  Since > v5.0.0 To set the line dash offset. With textBorderType , we can make the line style more flexible. Refer to MDN [lineDashOffset][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.textShadowColor": {
        "desc": " Shadow color of the text itself. ",
        "uiControl": {
            "type": "color",
            "default": "'#000'"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.textShadowBlur": {
        "desc": " Shadow blue of the text itself. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.textShadowOffsetX": {
        "desc": " Shadow X offset of the text itself. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "parallelAxisDefault.data.textStyle.rich.<style_name>.textShadowOffsetY": {
        "desc": " Shadow Y offset of the text itself. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    }
}