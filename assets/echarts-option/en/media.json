{
    "query": {
        "desc": "If more than one properties used, it means \"and\".",
        "uiControl": {
            "type": "Object"
        }
    },
    "query.minWidth": {
        "desc": "",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "query.maxHeight": {
        "desc": "",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "query.minAspectRatio": {
        "desc": "That is the radio of `width / height`. The value can be like `1.3`.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "option": {
        "desc": "Each item of this array is an echarts option (`ECUnitOption`). It will be applied when this query is matched.\n\nColor can be represented in RGB, for example `'rgb(128, 128, 128)'`. RGBA can be used when you need alpha channel, for example `'rgba(128, 128, 128, 0.5)'`. You may also use hexadecimal format, for example `'#ccc'`. Gradient color and texture are also supported besides single colors.\n\n```js\n// Linear gradient. First four parameters are x0, y0, x2, and y2, each ranged from 0 to 1, standing for percentage in the bounding box. If global is `true`, then the first four parameters are in absolute pixel positions.\ncolor: {\ntype: 'linear',\nx: 0,\ny: 0,\nx2: 0,\ny2: 1,\ncolorStops: [{\noffset: 0, color: 'red' // color at 0% position\n}, {\noffset: 1, color: 'blue' // color at 100% position\n}],\nglobal: false // false by default\n}\n// Radial gradient. First three parameters are x and y positions of center, and radius, similar to linear gradient.\ncolor: {\ntype: 'radial',\nx: 0.5,\ny: 0.5,\nr: 0.5,\ncolorStops: [{\noffset: 0, color: 'red' // color at 0% position\n}, {\noffset: 1, color: 'blue' // color at 100% position\n}],\nglobal: false // false by default\n}\n// Fill with texture\ncolor: {\nimage: imageDom, // HTMLImageElement, and HTMLCanvasElement are supported, while string path is not supported\nrepeat: 'repeat' // whether to repeat texture, whose value can be repeat-x, repeat-y, or no-repeat\n}\n```",
        "uiControl": {
            "type": "Object"
        }
    }
}