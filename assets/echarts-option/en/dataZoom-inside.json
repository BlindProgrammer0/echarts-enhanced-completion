{
    "id": {
        "desc": " Component ID, not specified by default. If specified, it can be used to refer the component in option or API. "
    },
    "disabled": {
        "desc": " Whether disable inside zoom. ",
        "uiControl": {
            "type": "boolean"
        }
    },
    "xAxisIndex": {
        "desc": " Specify which [xAxis][0] is/are controlled by the dataZoom-inside when [catesian coordinate system][1] is used. By default the first xAxis that parallel to dataZoom are controlled when [dataZoom-inside.orient][2] is set as 'horizontal'. But it is recommended to specify it explicitly but not use default value. If it is set as a single number, one axis is controlled, while if it is set as an Array , multiple axes are controlled. For example: \n\n    option: {\n        xAxis: [\n            {...}, // The first xAxis\n            {...}, // The second xAxis\n            {...}, // The third xAxis\n            {...}  // The fourth xAxis\n        ],\n        dataZoom: [\n            { // The first dataZoom component\n                xAxisIndex: [0, 2] // Indicates that this dataZoom component\n                                         // controls the first and the third xAxis\n            },\n            { // The second dataZoom component\n                xAxisIndex: 3      // indicates that this dataZoom component\n                                         // controls the fourth xAxis\n            }\n        ]\n    }\n    \n\n\n\n[0]: #xAxis\n[1]: #grid\n[2]: #dataZoom-inside.orient"
    },
    "yAxisIndex": {
        "desc": " Specify which [yAxis][0] is/are controlled by the dataZoom-inside when [catesian coordinate system][1] is used. By default the first yAxis that parallel to dataZoom are controlled when [dataZoom-inside.orient][2] is set as 'vertical'. But it is recommended to specify it explicitly but not use default value. If it is set as a single number, one axis is controlled, while if it is set as an Array , multiple axes are controlled. For example: \n\n    option: {\n        yAxis: [\n            {...}, // The first yAxis\n            {...}, // The second yAxis\n            {...}, // The third yAxis\n            {...}  // The fourth yAxis\n        ],\n        dataZoom: [\n            { // The first dataZoom component\n                yAxisIndex: [0, 2] // Indicates that this dataZoom component\n                                         // controls the first and the third yAxis\n            },\n            { // The second dataZoom component\n                yAxisIndex: 3      // indicates that this dataZoom component\n                                         // controls the fourth yAxis\n            }\n        ]\n    }\n    \n\n\n\n[0]: #yAxis\n[1]: #grid\n[2]: #dataZoom-inside.orient"
    },
    "radiusAxisIndex": {
        "desc": " Specify which [radiusAxis][0] is/are controlled by the dataZoom-inside when [polar coordinate system][1] is used. If it is set as a single number, one axis is controlled, while if it is set as an Array , multiple axes are controlled. For example: \n\n    option: {\n        radiusAxis: [\n            {...}, // The first radiusAxis\n            {...}, // The second radiusAxis\n            {...}, // The third radiusAxis\n            {...}  // The fourth radiusAxis\n        ],\n        dataZoom: [\n            { // The first dataZoom component\n                radiusAxisIndex: [0, 2] // Indicates that this dataZoom component\n                                         // controls the first and the third radiusAxis\n            },\n            { // The second dataZoom component\n                radiusAxisIndex: 3      // indicates that this dataZoom component\n                                         // controls the fourth radiusAxis\n            }\n        ]\n    }\n    \n\n\n\n[0]: #radiusAxis\n[1]: #polar"
    },
    "angleAxisIndex": {
        "desc": " Specify which [angleAxis][0] is/are controlled by the dataZoom-inside when [polar coordinate system][1] is used. If it is set as a single number, one axis is controlled, while if it is set as an Array , multiple axes are controlled. For example: \n\n    option: {\n        angleAxis: [\n            {...}, // The first angleAxis\n            {...}, // The second angleAxis\n            {...}, // The third angleAxis\n            {...}  // The fourth angleAxis\n        ],\n        dataZoom: [\n            { // The first dataZoom component\n                angleAxisIndex: [0, 2] // Indicates that this dataZoom component\n                                         // controls the first and the third angleAxis\n            },\n            { // The second dataZoom component\n                angleAxisIndex: 3      // indicates that this dataZoom component\n                                         // controls the fourth angleAxis\n            }\n        ]\n    }\n    \n\n\n\n[0]: #angleAxis\n[1]: #polar"
    },
    "filterMode": {
        "desc": " Generally dataZoom component zoom or roam coordinate system through data filtering and set the windows of axes internally. Its behaviours vary according to filtering mode settings ([dataZoom.filterMode][0]). Possible values: \n\n* 'filter': data that outside the window will be **filtered**, which may lead to some changes of windows of other axes. For each data item, it will be filtered if one of the relevant dimensions is out of the window.\n* 'weakFilter': data that outside the window will be **filtered**, which may lead to some changes of windows of other axes. For each data item, it will be filtered only if all of the relevant dimensions are out of the same side of the window.\n* 'empty': data that outside the window will be **set to NaN**, which will not lead to changes of windows of other axes.\n* 'none': Do not filter data.\n\nHow to set filterMode is up to users, depending on the requirments and scenarios. Expirically: \n\n* If only xAxis or only yAxis is controlled by dataZoom, filterMode: 'filter' is typically used, which enable the other axis auto adapte its window to the extent of the filtered data.\n* If both xAxis and yAxis are operated by dataZoom: \n  * If xAxis and yAxis should not effect mutually (e.g. a scatter chart with both axes on the type of 'value'), they should be set to be filterMode: 'empty'.\n  * If xAxis is the main axis and yAxis is the auxiliary axis (or vise versa) (e.g., in a bar chart, when dragging dataZoomX to change the window of xAxis, we need the yAxis to adapt to the clipped data, but when dragging dataZoomY to change the window of yAxis, we need the xAxis not to be changed), in this case, xAxis should be set to be fiterMode: 'filter', while yAxis should be set to be fiterMode: 'empty'.\n\nIt can be demonstrated by the sample: \n\n    option = {\n        dataZoom: [\n            {\n                id: 'dataZoomX',\n                type: 'slider',\n                xAxisIndex: [0],\n                filterMode: 'filter'\n            },\n            {\n                id: 'dataZoomY',\n                type: 'slider',\n                yAxisIndex: [0],\n                filterMode: 'empty'\n            }\n        ],\n        xAxis: {type: 'value'},\n        yAxis: {type: 'value'},\n        series{\n            type: 'bar',\n            data: [\n                // The first column corresponds to xAxis,\n                // and the second coloum corresponds to yAxis.\n                [12, 24, 36],\n                [90, 80, 70],\n                [3, 9, 27],\n                [1, 11, 111]\n            ]\n        }\n    }\n    \n\nIn the sample above, dataZoomX is set as filterMode: 'filter'. When use drags dataZoomX (do not touch dataZoomY) and the valueWindow of xAxis is changed to [2, 50] consequently, dataZoomX travel the first column of series.data and filter items that out of the window. The series.data turns out to be: \n\n    [\n        [12, 24, 36],\n        // [90, 80, 70] This item is filtered, as 90 is out of the window.\n        [3, 9, 27]\n        // [1, 11, 111] This item is filtered, as 1 is out of the window.\n    ]\n    \n\nBefore filtering, the second column, which corresponds to yAxis, has values 24, 80, 9, 11. After filtering, only 24 and 9 are left. Then the extent of yAxis is adjusted to adapt the two values (if yAxis.min and yAxis.max are not set). So filterMode: 'filter' can be used to enable the other axis to auto adapt the filtered data. Then let's review the sample from the beginning, dataZoomY is set as filterMode: 'empty'. So if user drags dataZoomY (do not touch dataZoomX) and its window is changed to [10, 60] consequently, dataZoomY travels the second column of series.data and set NaN to all of the values that outside the window (NaN cause the graphical elements, i.e., bar elements, do not show, but still hold the place). The series.data turns out to be: \n\n    [\n        [12, 24, 36],\n        [90, NaN, 70], // Set to NaN\n        [3, NaN, 27],  // Set to NaN\n        [1, 11, 111]\n    ]\n    \n\nIn this case, the first column (i.e., 12, 90, 3, 1, which corresponds to xAxis), will not be changed at all. So dragging yAxis will not change extent of xAxis, which is good for requirements like outlier filtering. See this example: 暂时无法显示\n\n[0]: #dataZoom.filterMode",
        "uiControl": {
            "type": "enum",
            "options": "'filter','weakFilter','empty','none'"
        }
    },
    "start": {
        "desc": " The start percentage of the window out of the data extent, in the range of 0 ~ 100. [dataZoom-inside.start][0] and [dataZoom-inside.end][1] define the window of the data in **percent** form. More info about the relationship between dataZoom-inside.start and axis extent can be checked in [dataZoom-inside.rangeMode][2].\n\n[0]: #dataZoom-inside.start\n[1]: #dataZoom-inside.end\n[2]: #dataZoom-inside.rangeMode",
        "uiControl": {
            "type": "number",
            "min": "0",
            "max": "100",
            "step": "0.5",
            "default": "0"
        }
    },
    "end": {
        "desc": " The end percentage of the window out of the data extent, in the range of 0 ~ 100. [dataZoom-inside.start][0] and [dataZoom-inside.end][1] define the window of the data in **percent** form. More info about the relationship between dataZoom-inside.end and axis extent can be checked in [dataZoom-inside.rangeMode][2].\n\n[0]: #dataZoom-inside.start\n[1]: #dataZoom-inside.end\n[2]: #dataZoom-inside.rangeMode",
        "uiControl": {
            "type": "number",
            "min": "0",
            "max": "100",
            "default": "100",
            "step": "0.5"
        }
    },
    "startValue": {
        "desc": " The start absolute value of the window, not works when [dataZoom-inside.start][0] is set. [dataZoom-inside.startValue][1] and [dataZoom-inside.endValue][2] define the window of the data window in **absolute value** form. Notice, if an axis is set to be category, startValue could be set as index of the array of axis.data or as the array value itself. In the latter case, it will internally and automatically translate to the index of array. More info about the relationship between dataZoom-inside.startValue and axis extent can be checked in [dataZoom-inside.rangeMode][3].\n\n[0]: #dataZoom-inside.start\n[1]: #dataZoom-inside.startValue\n[2]: #dataZoom-inside.endValue\n[3]: #dataZoom-inside.rangeMode"
    },
    "endValue": {
        "desc": " The end absolute value of the window, doesn't work when [dataZoom-inside.end][0] is set. [dataZoom-inside.startValue][1] and [dataZoom-inside.endValue][2] define the window of the data window in **absolute value** form. Notice, if an axis is set to be category, startValue could be set as index of the array of axis.data or as the array value itself. In the latter case, it will internally and automatically translate to the index of array. More info about the relationship between dataZoom-inside.endValue and axis extent can be checked in [dataZoom-inside.rangeMode][3].\n\n[0]: #dataZoom-inside.end\n[1]: #dataZoom-inside.startValue\n[2]: #dataZoom-inside.endValue\n[3]: #dataZoom-inside.rangeMode"
    },
    "minSpan": {
        "desc": " Used to restrict minimal window size, in percent, which value is in the range of [0, 100]. If [dataZoom-inside.minValueSpan][0] is set, minSpan does not work any more.\n\n[0]: #dataZoom-inside.minValueSpan",
        "uiControl": {
            "type": "number",
            "min": "0",
            "max": "100",
            "step": "0.5",
            "default": "0"
        }
    },
    "maxSpan": {
        "desc": " Used to restrict maximal window size, in percent, which value is in the range of [0, 100]. If [dataZoom-inside.maxValueSpan][0] is set, maxSpan does not work any more.\n\n[0]: #dataZoom-inside.maxValueSpan",
        "uiControl": {
            "type": "number",
            "min": "0",
            "max": "100",
            "step": "0.5",
            "default": "0"
        }
    },
    "minValueSpan": {
        "desc": " Used to restrict minimal window size. For example: In time axis it can be set as 3600 * 24 * 1000 * 5 to represent \"5 day\". In category axis it can be set as 5 to represent 5 categories. "
    },
    "maxValueSpan": {
        "desc": " Used to restrict maximal window size. For example: In time axis it can be set as 3600 * 24 * 1000 * 5 to represent \"5 day\". In category axis it can be set as 5 to represent 5 categories. "
    },
    "orient": {
        "desc": " Specify whether the layout of dataZoom component is horizontal or vertical. What's more, it indicates whether the horizontal axis or vertical axis is controlled by default in catesian coordinate system. Valid values: \n\n* 'horizontal': horizontal.\n* 'vertical': vertical.\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'horizontal','vertical'"
        }
    },
    "zoomLock": {
        "desc": " Specify whether to lock the size of window (selected area). When set as true, the size of window is locked, that is, only the translation (by mouse drag or touch drag) is avialable but zoom is not. ",
        "uiControl": {
            "type": "boolean"
        }
    },
    "throttle": {
        "desc": " Specify the frame rate of views refreshing, with unit millisecond (ms). If [animation][0] set as true and [animationDurationUpdate][1] set as bigger than 0, you can keep throttle as the default value 100 (or set it as a value bigger than 0), otherwise it might be not smooth when dragging. If [animation][0] set as false or [animationDurationUpdate][1] set as 0, and data size is not very large, and it seems to be not smooth when dragging, you can set throttle as 0 to improve that.\n\n[0]: #animation\n[1]: #animationDurationUpdate",
        "uiControl": {
            "type": "number",
            "default": "100",
            "min": "0",
            "step": "20"
        }
    },
    "rangeMode": {
        "desc": " The format is [rangeModeForStart, rangeModeForEnd]. For example rangeMode: ['value', 'percent'] means that use absolute value in start and percent value in end. Optional value for each item: 'value', 'percent'. \n\n* 'value' mode: the axis extent will always only be determined by dataZoom.startValue and dataZoom.endValue, despite how data like and how axis.min and axis.max are.\n* 'percent' mode: 100 represents 100% of the [dMin, dMax], where dMin is axis.min if axis.min specified, otherwise data.extent[0], and dMax is axis.max if axis.max specified, otherwise data.extent[1]. Axis extent will only be determined by the result of the percent of [dMin, dMax].\n\nrangeMode are auto determined by whether option.start/option.end are specified (represents 'percent' mode) or option.startValue/option.endValue specified (represents 'value' mode). And when user behavior trigger the changing of the view, the rangeMode would be modified automatically. For example, if triggered by toolbox.dataZoom, it will be modefied to 'value', and if triggered by dataZoom-inside or dataZoom-slider, it will be modified to 'percent'. If we specify rangeMode manually in option, it only works when both start and startValue specified or both end and endValue specified. So usually we do not need to specify dataZoom.rangeMode manually. Take a scenario as an example. When we are using dynamic data (update data periodically via setOption), if in 'value' mode, the window will be kept in a fixed value range despite how data are appended, while if in 'percent' mode, whe window range will be changed alone with the appended data (suppose axis.min and axis.max are not specified). "
    },
    "zoomOnMouseWheel": {
        "desc": " How to trigger zoom. Optional values: \n\n* true：Mouse wheel triggers zoom.\n* false：Mouse wheel can not triggers zoom.\n* 'shift'：Holding shift and mouse wheel triggers zoom.\n* 'ctrl'：Holding ctrl and mouse wheel triggers zoom.\n* 'alt'：Holding alt and mouse wheel triggers zoom.\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'true','false','shift','ctrl','alt'"
        }
    },
    "moveOnMouseMove": {
        "desc": " How to trigger data window move. Optional values: \n\n* true：Mouse move triggers data window move.\n* false：Mouse move can not triggers data window move.\n* 'shift'：Holding shift and mouse move triggers data window move.\n* 'ctrl'：Holding ctrl and mouse move triggers data window move.\n* 'alt'：Holding alt and mouse move triggers data window move.\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'true','false','shift','ctrl','alt'"
        }
    },
    "moveOnMouseWheel": {
        "desc": " How to trigger data window move. Optional values: \n\n* true：Mouse wheel triggers data window move.\n* false：Mouse wheel can not triggers data window move.\n* 'shift'：Holding shift and mouse wheel triggers data window move.\n* 'ctrl'：Holding ctrl and mouse wheel triggers data window move.\n* 'alt'：Holding alt and mouse wheel triggers data window move.\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'true','false','shift','ctrl','alt'"
        }
    },
    "preventDefaultMouseMove": {
        "desc": " Whether to prevent default behavior of mouse move event. ",
        "uiControl": {
            "type": "boolean",
            "default": "true"
        }
    }
}