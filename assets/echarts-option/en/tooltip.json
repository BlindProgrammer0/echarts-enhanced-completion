{
    "show": {
        "desc": " Whether to show the tooltip component. including tooltip floating layer and [axisPointer][0].\n\n[0]: #tooltip.axisPointer",
        "uiControl": {
            "type": "boolean",
            "default": "true"
        }
    },
    "trigger": {
        "desc": " Type of triggering. Options: \n\n* 'item' Triggered by data item, which is mainly used for charts that don't have a category axis like scatter charts or pie charts.\n* 'axis' Triggered by axes, which is mainly used for charts that have category axes, like bar charts or line charts. ECharts 2.x only supports axis trigger for category axis. In ECharts 3, it is supported for all types of axes in [grid][0] or [polar][1]. Also, you may assign axis with [axisPointer.axis][2].\n* 'none' Trigger nothing.\n\n\n\n[0]: #grid\n[1]: #polar\n[2]: #tooltip.axisPointer.axis",
        "uiControl": {
            "type": "enum",
            "options": "'item','axis','none'"
        }
    },
    "axisPointer": {
        "desc": " Configuration item for axisPointer. tooltip.axisPointer is like syntactic sugar of axisPointer settings on axes (for example, [xAxis.axisPointer][0] or [angleAxis.axisPointer][1]). More detailed features can be configured on someAxis.axisPointer. But in common cases, using tooltip.axisPointer is more convenient. \n\n**> Notice:**>  configurations of > tooltip.axisPointer>  has lower priority than that of > someAxis.axisPointer> . - - -\n\naxisPointer is a tool for displaying reference line and axis value under mouse pointer. For example: 暂时无法显示 In the demo above, [axisPointer.link][2] is used to link axisPointer from different coordinate systems. axisPointer can also be used on touch device, where user can drag the button to move the reference line and label. 暂时无法显示 In the cases that more than one axis exist, axisPointer helps to look inside the data. 暂时无法显示 暂时无法显示 \n\n- - -\n\n**> Notice:**>  Generally, axisPointers is configured in each axes who need them (for example [> xAxis.axisPointer][0]> ), or configured in > tooltip>  (for example [> tooltip.axisPointer][3]> ). > But these configurations can only be configured in global axisPointer: [> axisPointer.triggerOn][4]> , [> axisPointer.link][2]> . - - -\n\n- - -\n\n**How to display axisPointer:** In [cartesian (grid)][5] and [polar](~polar) and (single axis][6], each axis has its own axisPointer. Those axisPointer will not be displayed by default, utill configured as follows: \n\n* Set someAxis.axisPointer.show (like [xAxis.axisPointer.show][7]) as true. Then axisPointer of this axis will be displayed.\n* Set [tooltip.trigger][8] as 'axis', or set [tooltip.axisPointer.type][9] as 'cross'. Then coordinate system will automatically chose the axes who will display their axisPointers. ([tooltip.axisPointer.axis][10] can be used to change the choice.) Notice, axis.axisPointer will override tooltip.axisPointer settings.\n\n- - -\n\n**How to display the label of axisPointer:** The label of axisPointer will not be displayed by default(namely, only reference line will be displayed by default), utill configured as follows: \n\n* Set someAxis.axisPointer.label.show (for example [xAxis.axisPointer.label.show][7]) as true. Then the label of the axisPointer will be displayed.\n* Set [tooltip.axisPointer.type][9] as 'cross'. Then the label of the crossed axisPointers will be displayed.\n\n- - -\n\n**How to configure axisPointer on touch device:** Set someAxis.axisPointer.handle.show (for example [xAxis.axisPointer.handle.show][11] as true. Then the button for dragging will be displayed. (This feature is not supported on polar). **Notice:** If tooltip does not work well in this case, try to set[tooltip.triggerOn][12] as 'none' (for the effect: show tooltip when finger holding on the button, and hide tooltip after finger left the button), or set [tooltip.alwaysShowContent][13] as true (then tooltip will always be displayed). See the [example][14]. \n\n- - -\n\n**Snap to point** In value axis and time axis, if [snap][15] is set as true, axisPointer will snap to point automatically. \n\n- - -\n\n\n\n[0]: #xAxis.axisPointer\n[1]: #angleAxis.axisPointer\n[2]: #axisPointer.link\n[3]: #tooltip.axisPointer\n[4]: #axisPointer.triggerOn\n[5]: #grid\n[6]: #single\n[7]: #xAxis.axisPointer.show\n[8]: #tooltip.trigger\n[9]: #tooltip.axisPointer.type\n[10]: #tooltip.axisPointer.axis\n[11]: #xAxis.axisPointer.handle.show\n[12]: #tooltip.triggerOn\n[13]: #tooltip.alwaysShowContent\n[14]: https://echarts.apache.org/examples/en/editor.html?c=line-tooltip-touch&edit=1&reset=1\n[15]: #xAxis.axisPointer.snap",
        "uiControl": {
            "type": "Object"
        }
    },
    "axisPointer.type": {
        "desc": " Indicator type. Options: \n\n* 'line' line indicator.\n* 'shadow' shadow crosshair indicator.\n* 'none' no indicator displayed.\n* 'cross' crosshair indicator, which is actually the shortcut of enable two axisPointers of two orthometric axes.\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'none','line','shadow','cross'"
        }
    },
    "axisPointer.axis": {
        "desc": " The coordinate axis, which could be 'x', 'y', 'radius', or 'angle'. By default, each coordinate system will automatically chose the axes whose will display its axisPointer (category axis or time axis is used by default). ",
        "uiControl": {
            "default": "'auto'",
            "type": "string"
        }
    },
    "axisPointer.snap": {
        "desc": " Whether snap to point automatically. The default value is auto determined. This feature usually makes sense in value axis and time axis, where tiny points can be seeked automatically. ",
        "uiControl": {
            "type": "boolean"
        }
    },
    "axisPointer.z": {
        "desc": " z value, which controls order of drawing graphical components. Components with smaller z values may be overwritten by those with larger z values. ",
        "uiControl": {
            "type": "number"
        }
    },
    "axisPointer.label": {
        "desc": " label of axisPointer ",
        "uiControl": {
            "type": "Object"
        }
    },
    "axisPointer.label.show": {
        "desc": " Whether show label. Label will not show by default. But if [tooltip.axisPointer.type][0] is set as 'cross', label will be displayed automatically.\n\n[0]: #tooltip.axisPointer.type",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "axisPointer.label.precision": {
        "desc": " The precision of value in label. It is auto determined by default. You can also set it as '2', which indicates that two decimal fractions are reserved. ",
        "uiControl": {
            "default": "'auto'",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "axisPointer.label.formatter": {
        "desc": " The formatter of label. If set as string, for example it can be: formatter: 'some text {value} some text, where {value} will be replaced by axis value automatically. If set as function: **Parameters:**{Object} params: Including fields as follows: {Object} params.value: current value of this axis. If axis.type is 'category', it is one of the value in axis.data. If axis.type is 'time', it is a timestamp. {Array.} params.seriesData: An array, containing info of nearest points. Each item is: {string} params.axisDimension: The dimension name of the axis. For example, in catesian it will be 'x', 'y', and in polar it will be 'radius', 'angle'. {number} params.axisIndex: The index of the axis, for example, 0,1, 2, ... \n\n    {\n        componentType: 'series',\n        // Series type\n        seriesType: string,\n        // Series index in option.series\n        seriesIndex: number,\n        // Series name\n        seriesName: string,\n        // Data name, or category name\n        name: string,\n        // Data index in input data array\n        dataIndex: number,\n        // Original data as input\n        data: Object,\n        // Value of data. In most series it is the same as data.\n        // But in some series it is some part of the data (e.g., in map, radar)\n        value: number|Array|Object,\n        // encoding info of coordinate system\n        // Key: coord, like ('x' 'y' 'radius' 'angle')\n        // value: Must be an array, not null/undefined. Contain dimension indices, like:\n        // {\n        //     x: [2] // values on dimension index 2 are mapped to x axis.\n        //     y: [0] // values on dimension index 0 are mapped to y axis.\n        // }\n        encode: Object,\n        // dimension names list\n        dimensionNames: Array,\n        // data dimension index, for example 0 or 1 or 2 ...\n        // Only work in `radar` series.\n        dimensionIndex: number,\n        // Color of data\n        color: string,\n    \n    \n    \n    }\n    \n\nNote: the usage of encode and dimensionNames can be: If data is: \n\n    dataset: {\n        source: [\n            ['Matcha Latte', 43.3, 85.8, 93.7],\n            ['Milk Tea', 83.1, 73.4, 55.1],\n            ['Cheese Cocoa', 86.4, 65.2, 82.5],\n            ['Walnut Brownie', 72.4, 53.9, 39.1]\n        ]\n    }\n    \n\nWe can get values that corresponding to y axis by: \n\n    params.value[params.encode.y[0]]\n    \n\nIf data is: \n\n    dataset: {\n        dimensions: ['product', '2015', '2016', '2017'],\n        source: [\n            {product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n            {product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n            {product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n            {product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n        ]\n    }\n    \n\nWe can get values that corresponding to y axis by: \n\n    params.value[params.dimensionNames[params.encode.y[0]]]\n    \n\nEach item also includes axis infomation: \n\n    {\n        axisDim: 'x', // 'x', 'y', 'angle', 'radius', 'single'\n        axisId: 'xxx',\n        axisName: 'xxx',\n        axisIndex: 3,\n        axisValue: 121, // The current value of axisPointer\n        axisValueLabel: 'text of value'\n    }\n    \n\n**Return:** The string to be displayed. For example: \n\n    formatter: function (params) {\n        // If axis.type is 'time'\n        return 'some text' + echarts.format.formatTime(params.value);\n    }\n    \n\n",
        "uiControl": {
            "type": [
                "string",
                "Function"
            ]
        }
    },
    "axisPointer.label.margin": {
        "desc": " Distance between label and axis. ",
        "uiControl": {
            "default": "3",
            "type": "boolean"
        }
    },
    "axisPointer.label.color": {
        "desc": " text color. ",
        "uiControl": {
            "type": "color",
            "default": "'#fff'"
        }
    },
    "axisPointer.label.fontStyle": {
        "desc": " font style. Options are: \n\n* 'normal'\n* 'italic'\n* 'oblique'\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'normal','italic','oblique'"
        }
    },
    "axisPointer.label.fontWeight": {
        "desc": " font thick weight. Options are: \n\n* 'normal'\n* 'bold'\n* 'bolder'\n* 'lighter'\n* 100 | 200 | 300 | 400...\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'normal','bold','bolder','lighter'"
        }
    },
    "axisPointer.label.fontFamily": {
        "desc": " font family. Can also be 'serif' , 'monospace', ... ",
        "uiControl": {
            "type": "enum",
            "options": "'sans-serif','serif','monospace','Arial','Courier New'"
        }
    },
    "axisPointer.label.fontSize": {
        "desc": " font size. ",
        "uiControl": {
            "type": "number",
            "default": "12",
            "min": "1",
            "step": "1"
        }
    },
    "axisPointer.label.lineHeight": {
        "desc": " Line height of the text fragment. If lineHeight is not set in rich, lineHeight in parent level will be used. For example: \n\n    {\n        lineHeight: 56,\n        rich: {\n            a: {\n                // `lineHeight` is not set, then it will be 56\n            }\n        }\n    }\n    \n\n",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "12"
        }
    },
    "axisPointer.label.width": {
        "desc": " Width of text block. ",
        "uiControl": {
            "type": "number",
            "default": "100",
            "min": "1",
            "max": "500",
            "step": "1"
        }
    },
    "axisPointer.label.height": {
        "desc": " Height of text block. ",
        "uiControl": {
            "type": "number",
            "default": "50",
            "min": "1",
            "max": "500",
            "step": "1"
        }
    },
    "axisPointer.label.textBorderColor": {
        "desc": " Storke color of the text. ",
        "uiControl": {
            "type": "color"
        }
    },
    "axisPointer.label.textBorderWidth": {
        "desc": " Storke line width of the text. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "axisPointer.label.textBorderType": {
        "desc": " Stroke line type of the text. Possible values are: \n\n* 'solid'\n* 'dashed'\n* 'dotted'\n\nSince v5.0.0, it can also be a number or a number array to specify the [dash array][0] of the line. With textBorderDashOffset , we can make the line style more flexible. For example： \n\n    {\n    \n    textBorderType: [5, 10],\n    \n    textBorderDashOffset: 5\n    }\n    \n\n\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray",
        "uiControl": {
            "type": "enum",
            "options": "'solid','dashed','dotted'"
        }
    },
    "axisPointer.label.textBorderDashOffset": {
        "desc": ">  Since > v5.0.0 To set the line dash offset. With textBorderType , we can make the line style more flexible. Refer to MDN [lineDashOffset][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "axisPointer.label.textShadowColor": {
        "desc": " Shadow color of the text itself. ",
        "uiControl": {
            "type": "color",
            "default": "'#000'"
        }
    },
    "axisPointer.label.textShadowBlur": {
        "desc": " Shadow blue of the text itself. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "axisPointer.label.textShadowOffsetX": {
        "desc": " Shadow X offset of the text itself. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "axisPointer.label.textShadowOffsetY": {
        "desc": " Shadow Y offset of the text itself. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "axisPointer.label.overflow": {
        "desc": " Determine how to display the text when it's overflow. Available when width is set. \n\n* 'truncate' Truncate the text and trailing with ellipsis.\n* 'break' Break by word\n* 'breakAll' Break by character.\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'truncate','break','breakAll'"
        }
    },
    "axisPointer.label.ellipsis": {
        "desc": " Ellipsis to be displayed when overflow is set to truncate. ",
        "uiControl": {
            "default": "'...'",
            "type": "string"
        }
    },
    "axisPointer.label.lineOverflow": {
        "desc": " Determine how to display the text when it's overflow on height. \n\n* 'truncate' Truncate the overflow lines.\n\n",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "axisPointer.label.padding": {
        "desc": " axisPointer space around content. The unit is px. Default values for each position are 5. And they can be set to different values with left, right, top, and bottom. Examples: \n\n    // Set padding to be 5\n    padding: 5\n    // Set the top and bottom paddings to be 5, and left and right paddings to be 10\n    padding: [5, 10]\n    // Set each of the four paddings seperately\n    padding: [\n        5,  // up\n        10, // right\n        5,  // down\n        10, // left\n    ]\n    \n\n",
        "uiControl": {
            "type": "vector",
            "min": "0",
            "dims": "T,R,B,L",
            "default": "0"
        }
    },
    "axisPointer.label.backgroundColor": {
        "desc": " Background color of label, the same as [axis.axisLine.lineStyle.color][0] by default.\n\n[0]: #xAxis.axisLine.lineStyle.color",
        "uiControl": {
            "default": "'auto'",
            "type": "string"
        }
    },
    "axisPointer.label.borderColor": {
        "desc": " Border color of label. ",
        "uiControl": {
            "type": "string"
        }
    },
    "axisPointer.label.borderWidth": {
        "desc": " Border width of label. ",
        "uiControl": {
            "default": "0",
            "type": "string"
        }
    },
    "axisPointer.label.shadowBlur": {
        "desc": " Size of shadow blur. This attribute should be used along with shadowColor,shadowOffsetX, shadowOffsetY to set shadow to component. For example: \n\n    {\n        shadowColor: 'rgba(0, 0, 0, 0.5)',\n        shadowBlur: 10\n    }\n    \n\n",
        "uiControl": {
            "type": "number",
            "default": "3",
            "min": "0",
            "step": "0.5"
        }
    },
    "axisPointer.label.shadowColor": {
        "desc": " Shadow color. Support same format as color. ",
        "uiControl": {
            "type": "color",
            "default": "'#aaa'"
        }
    },
    "axisPointer.label.shadowOffsetX": {
        "desc": " Offset distance on the horizontal direction of shadow. ",
        "uiControl": {
            "type": "number",
            "default": "0",
            "step": "0.5"
        }
    },
    "axisPointer.label.shadowOffsetY": {
        "desc": " Offset distance on the vertical direction of shadow. ",
        "uiControl": {
            "type": "number",
            "default": "0",
            "step": "0.5"
        }
    },
    "axisPointer.lineStyle": {
        "desc": " It is valid when [axisPointer.type][0] is 'line'.\n\n[0]: #tooltip.axisPointer.type",
        "uiControl": {
            "type": "Object"
        }
    },
    "axisPointer.lineStyle.color": {
        "desc": " Line color. \n\n> Supports setting as solid color using > rgb(255,255,255)> , > rgba(255,255,255,1)> , > #fff> , etc. Also supports setting as gradient color and pattern fill, see [> option.color][0]>  for details \n\n[0]: #color",
        "uiControl": {
            "type": "color"
        }
    },
    "axisPointer.lineStyle.width": {
        "desc": " line width. ",
        "uiControl": {
            "type": "number",
            "value": "1",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "axisPointer.lineStyle.type": {
        "desc": " line type. Possible values are: \n\n* 'solid'\n* 'dashed'\n* 'dotted'\n\nSince v5.0.0, it can also be a number or a number array to specify the [dash array][0] of the line. With dashOffset , we can make the line style more flexible. For example： \n\n    {\n    \n    type: [5, 10],\n    \n    dashOffset: 5\n    }\n    \n\n\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray",
        "uiControl": {
            "type": "enum",
            "options": "'solid','dashed','dotted'"
        }
    },
    "axisPointer.lineStyle.dashOffset": {
        "desc": ">  Since > v5.0.0 To set the line dash offset. With type , we can make the line style more flexible. Refer to MDN [lineDashOffset][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "axisPointer.lineStyle.cap": {
        "desc": ">  Since > v5.0.0 To specify how to draw the end points of the line. Possible values are: \n\n* 'butt': The ends of lines are squared off at the endpoints.\n* 'round': The ends of lines are rounded.\n* 'square': The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.\n\nDefault value is 'butt'. Refer to MDN [lineCap][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap",
        "uiControl": {
            "type": "enum",
            "options": "'butt','round','square'"
        }
    },
    "axisPointer.lineStyle.join": {
        "desc": ">  Since > v5.0.0 To determine the shape used to join two line segments where they meet. Possible values are: \n\n* 'bevel': Fills an additional triangular area between the common endpoint of connected segments, and the separate outside rectangular corners of each segment.\n* 'round': Rounds off the corners of a shape by filling an additional sector of disc centered at the common endpoint of connected segments. The radius for these rounded corners is equal to the line width.\n* 'miter': Connected segments are joined by extending their outside edges to connect at a single point, with the effect of filling an additional lozenge-shaped area. This setting is affected by the miterLimit property.\n\nDefault value is 'bevel'. Refer to MDN [lineJoin][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin",
        "uiControl": {
            "type": "enum",
            "options": "'bevel','round','miter'"
        }
    },
    "axisPointer.lineStyle.miterLimit": {
        "desc": ">  Since > v5.0.0 To set the miter limit ratio. Only works when join is set as miter. Default value is 10. Negative、0、Infinity and NaN values are ignored. Refer to MDN [miterLimit][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "10"
        }
    },
    "axisPointer.lineStyle.shadowBlur": {
        "desc": " Size of shadow blur. This attribute should be used along with shadowColor,shadowOffsetX, shadowOffsetY to set shadow to component. For example: \n\n    {\n        shadowColor: 'rgba(0, 0, 0, 0.5)',\n        shadowBlur: 10\n    }\n    \n\n",
        "uiControl": {
            "type": "number",
            "default": "0",
            "min": "0",
            "step": "0.5"
        }
    },
    "axisPointer.lineStyle.shadowColor": {
        "desc": " Shadow color. Support same format as color. ",
        "uiControl": {
            "type": "color",
            "default": "''"
        }
    },
    "axisPointer.lineStyle.shadowOffsetX": {
        "desc": " Offset distance on the horizontal direction of shadow. ",
        "uiControl": {
            "type": "number",
            "default": "0",
            "step": "0.5"
        }
    },
    "axisPointer.lineStyle.shadowOffsetY": {
        "desc": " Offset distance on the vertical direction of shadow. ",
        "uiControl": {
            "type": "number",
            "default": "0",
            "step": "0.5"
        }
    },
    "axisPointer.lineStyle.opacity": {
        "desc": " Opacity of the component. Supports value from 0 to 1, and the component will not be drawn when set to 0. ",
        "uiControl": {
            "type": "number",
            "default": "1",
            "min": "0",
            "max": "1",
            "step": "0.01"
        }
    },
    "axisPointer.shadowStyle": {
        "desc": " It is valid when [axisPointer.type][0] is 'shadow'.\n\n[0]: #tooltip.axisPointer.type",
        "uiControl": {
            "type": "Object"
        }
    },
    "axisPointer.shadowStyle.color": {
        "desc": " Fill color. \n\n> Supports setting as solid color using > rgb(255,255,255)> , > rgba(255,255,255,1)> , > #fff> , etc. Also supports setting as gradient color and pattern fill, see [> option.color][0]>  for details \n\n[0]: #color",
        "uiControl": {
            "type": "color"
        }
    },
    "axisPointer.shadowStyle.shadowBlur": {
        "desc": " Size of shadow blur. This attribute should be used along with shadowColor,shadowOffsetX, shadowOffsetY to set shadow to component. For example: \n\n    {\n        shadowColor: 'rgba(0, 0, 0, 0.5)',\n        shadowBlur: 10\n    }\n    \n\n",
        "uiControl": {
            "type": "number",
            "default": "0",
            "min": "0",
            "step": "0.5"
        }
    },
    "axisPointer.shadowStyle.shadowColor": {
        "desc": " Shadow color. Support same format as color. ",
        "uiControl": {
            "type": "color",
            "default": "''"
        }
    },
    "axisPointer.shadowStyle.shadowOffsetX": {
        "desc": " Offset distance on the horizontal direction of shadow. ",
        "uiControl": {
            "type": "number",
            "default": "0",
            "step": "0.5"
        }
    },
    "axisPointer.shadowStyle.shadowOffsetY": {
        "desc": " Offset distance on the vertical direction of shadow. ",
        "uiControl": {
            "type": "number",
            "default": "0",
            "step": "0.5"
        }
    },
    "axisPointer.shadowStyle.opacity": {
        "desc": " Opacity of the component. Supports value from 0 to 1, and the component will not be drawn when set to 0. ",
        "uiControl": {
            "type": "number",
            "default": "1",
            "min": "0",
            "max": "1",
            "step": "0.01"
        }
    },
    "axisPointer.crossStyle": {
        "desc": " It is valid when [axisPointer.type][0] is 'cross'.\n\n[0]: #tooltip.axisPointer.type",
        "uiControl": {
            "type": "Object"
        }
    },
    "axisPointer.crossStyle.color": {
        "desc": " Line color. \n\n> Supports setting as solid color using > rgb(255,255,255)> , > rgba(255,255,255,1)> , > #fff> , etc. Also supports setting as gradient color and pattern fill, see [> option.color][0]>  for details \n\n[0]: #color",
        "uiControl": {
            "type": "color"
        }
    },
    "axisPointer.crossStyle.width": {
        "desc": " line width. ",
        "uiControl": {
            "type": "number",
            "value": "1",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "axisPointer.crossStyle.type": {
        "desc": " line type. Possible values are: \n\n* 'solid'\n* 'dashed'\n* 'dotted'\n\nSince v5.0.0, it can also be a number or a number array to specify the [dash array][0] of the line. With dashOffset , we can make the line style more flexible. For example： \n\n    {\n    \n    type: [5, 10],\n    \n    dashOffset: 5\n    }\n    \n\n\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray",
        "uiControl": {
            "type": "enum",
            "options": "'solid','dashed','dotted'"
        }
    },
    "axisPointer.crossStyle.dashOffset": {
        "desc": ">  Since > v5.0.0 To set the line dash offset. With type , we can make the line style more flexible. Refer to MDN [lineDashOffset][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "axisPointer.crossStyle.cap": {
        "desc": ">  Since > v5.0.0 To specify how to draw the end points of the line. Possible values are: \n\n* 'butt': The ends of lines are squared off at the endpoints.\n* 'round': The ends of lines are rounded.\n* 'square': The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.\n\nDefault value is 'butt'. Refer to MDN [lineCap][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap",
        "uiControl": {
            "type": "enum",
            "options": "'butt','round','square'"
        }
    },
    "axisPointer.crossStyle.join": {
        "desc": ">  Since > v5.0.0 To determine the shape used to join two line segments where they meet. Possible values are: \n\n* 'bevel': Fills an additional triangular area between the common endpoint of connected segments, and the separate outside rectangular corners of each segment.\n* 'round': Rounds off the corners of a shape by filling an additional sector of disc centered at the common endpoint of connected segments. The radius for these rounded corners is equal to the line width.\n* 'miter': Connected segments are joined by extending their outside edges to connect at a single point, with the effect of filling an additional lozenge-shaped area. This setting is affected by the miterLimit property.\n\nDefault value is 'bevel'. Refer to MDN [lineJoin][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin",
        "uiControl": {
            "type": "enum",
            "options": "'bevel','round','miter'"
        }
    },
    "axisPointer.crossStyle.miterLimit": {
        "desc": ">  Since > v5.0.0 To set the miter limit ratio. Only works when join is set as miter. Default value is 10. Negative、0、Infinity and NaN values are ignored. Refer to MDN [miterLimit][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "10"
        }
    },
    "axisPointer.crossStyle.shadowBlur": {
        "desc": " Size of shadow blur. This attribute should be used along with shadowColor,shadowOffsetX, shadowOffsetY to set shadow to component. For example: \n\n    {\n        shadowColor: 'rgba(0, 0, 0, 0.5)',\n        shadowBlur: 10\n    }\n    \n\n",
        "uiControl": {
            "type": "number",
            "default": "0",
            "min": "0",
            "step": "0.5"
        }
    },
    "axisPointer.crossStyle.shadowColor": {
        "desc": " Shadow color. Support same format as color. ",
        "uiControl": {
            "type": "color",
            "default": "''"
        }
    },
    "axisPointer.crossStyle.shadowOffsetX": {
        "desc": " Offset distance on the horizontal direction of shadow. ",
        "uiControl": {
            "type": "number",
            "default": "0",
            "step": "0.5"
        }
    },
    "axisPointer.crossStyle.shadowOffsetY": {
        "desc": " Offset distance on the vertical direction of shadow. ",
        "uiControl": {
            "type": "number",
            "default": "0",
            "step": "0.5"
        }
    },
    "axisPointer.crossStyle.opacity": {
        "desc": " Opacity of the component. Supports value from 0 to 1, and the component will not be drawn when set to 0. ",
        "uiControl": {
            "type": "number",
            "default": "1",
            "min": "0",
            "max": "1",
            "step": "0.01"
        }
    },
    "axisPointer.animation": {
        "desc": " Whether to enable animation. ",
        "uiControl": {
            "type": "boolean",
            "default": "true",
            "clean": "true"
        }
    },
    "axisPointer.animationThreshold": {
        "desc": " Whether to set graphic number threshold to animation. Animation will be disabled when graphic number is larger than threshold. ",
        "uiControl": {
            "default": "2000",
            "type": "number"
        }
    },
    "axisPointer.animationDuration": {
        "desc": " Duration of the first animation, which supports callback function for different data to have different animation effect: \n\n    animationDuration: function (idx) {\n        // delay for later data is larger\n        return idx * 100;\n    }\n    \n\n",
        "uiControl": {
            "type": "number",
            "min": "0",
            "default": "1000",
            "step": "20",
            "clean": "true"
        }
    },
    "axisPointer.animationEasing": {
        "desc": " Easing method used for the first animation. Varied easing effects can be found at [easing effect example][0].\n\n[0]: https://echarts.apache.org/examples/en/editor.html?c=line-easing",
        "uiControl": {
            "type": "enum",
            "options": "'linear','quadraticIn','quadraticOut','quadraticInOut','cubicIn','cubicOut','cubicInOut','quarticIn','quarticOut','quarticInOut','quinticIn','quinticOut','quinticInOut','sinusoidalIn','sinusoidalOut','sinusoidalInOut','exponentialIn','exponentialOut','exponentialInOut','circularIn','circularOut','circularInOut','elasticIn','elasticOut','elasticInOut','backIn','backOut','backInOut','bounceIn','bounceOut','bounceInOut'",
            "clean": "true"
        }
    },
    "axisPointer.animationDelay": {
        "desc": " Delay before updating the first animation, which supports callback function for different data to have different animation effect. For example: \n\n    animationDelay: function (idx) {\n        // delay for later data is larger\n        return idx * 100;\n    }\n    \n\nSee [this example][0] for more information.\n\n[0]: https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay",
        "uiControl": {
            "default": "0",
            "type": [
                "number",
                "Function"
            ]
        }
    },
    "axisPointer.animationDurationUpdate": {
        "desc": " Time for animation to complete, which supports callback function for different data to have different animation effect: \n\n    animationDurationUpdate: function (idx) {\n        // delay for later data is larger\n        return idx * 100;\n    }\n    \n\n",
        "uiControl": {
            "type": "number",
            "min": "0",
            "default": "1000",
            "step": "20"
        }
    },
    "axisPointer.animationEasingUpdate": {
        "desc": " Easing method used for animation. ",
        "uiControl": {
            "type": "enum",
            "options": "'linear','quadraticIn','quadraticOut','quadraticInOut','cubicIn','cubicOut','cubicInOut','quarticIn','quarticOut','quarticInOut','quinticIn','quinticOut','quinticInOut','sinusoidalIn','sinusoidalOut','sinusoidalInOut','exponentialIn','exponentialOut','exponentialInOut','circularIn','circularOut','circularInOut','elasticIn','elasticOut','elasticInOut','backIn','backOut','backInOut','bounceIn','bounceOut','bounceInOut'"
        }
    },
    "axisPointer.animationDelayUpdate": {
        "desc": " Delay before updating animation, which supports callback function for different data to have different animation effects. For example: \n\n    animationDelayUpdate: function (idx) {\n        // delay for later data is larger\n        return idx * 100;\n    }\n    \n\nSee [this example][0] for more information.\n\n[0]: https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay",
        "uiControl": {
            "default": "0",
            "type": [
                "number",
                "Function"
            ]
        }
    },
    "showContent": {
        "desc": " Whether to show the tooltip floating layer, whose default value is true. It should be configurated to be false, if you only need tooltip to trigger the event or show the axisPointer without content. ",
        "uiControl": {
            "type": "boolean",
            "default": "true"
        }
    },
    "alwaysShowContent": {
        "desc": " Whether to show tooltip content all the time. By default, it will be hidden [after some time][0]. It can be set to be true to preserve displaying. This attribute is newly added to ECharts 3.0.\n\n[0]: #tooltip.hideDelay",
        "uiControl": {
            "type": "boolean",
            "default": "false"
        }
    },
    "triggerOn": {
        "desc": " Conditions to trigger tooltip. Options: \n\n* 'mousemove' Trigger when mouse moves.\n* 'click' Trigger when mouse clicks.\n* 'mousemove|click' Trigger when mouse clicks and moves.\n* 'none' Do not triggered by 'mousemove' and 'click'. Tooltip can be triggered and hidden manually by calling [action.tooltip.showTip][0] and [action.tooltip.hideTip][1]. It can also be triggered by [axisPointer.handle][2] in this case.\n\nThis attribute is new to ECharts 3.0.\n\n[0]: api.html#action.tooltip.showTip\n[1]: api.html#action.tooltip.hideTip\n[2]: #xAxis.axisPointer.handle",
        "uiControl": {
            "type": "enum",
            "options": "'mousemove','click'"
        }
    },
    "showDelay": {
        "desc": " Delay time for showing tooltip, in ms. No delay by default, and it is not recommended to set. Only valid when [triggerOn][0] is set to be 'mousemove'.\n\n[0]: #tooltip.triggerOn",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "20",
            "default": "0"
        }
    },
    "hideDelay": {
        "desc": " Delay time for hiding tooltip, in ms. It will be invalid when [alwaysShowContent][0] is true.\n\n[0]: #tooltip.alwaysShowContent",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "20",
            "default": "100"
        }
    },
    "enterable": {
        "desc": " Whether mouse is allowed to enter the floating layer of tooltip, whose default value is false. If you need to interact in the tooltip like with links or buttons, it can be set as true. ",
        "uiControl": {
            "type": "boolean",
            "default": "false"
        }
    },
    "renderMode": {
        "desc": " Render mode for tooltip. By default, it is set to be 'html' so that extra DOM element is used for tooltip. It can also set to be 'richText' so that the tooltip will be rendered inside Canvas (SVG rich text is not implemented yet). This is very useful for environments that don't have DOM, such as Wechat applications. ",
        "uiControl": {
            "type": "enum",
            "options": "'html','richText'"
        }
    },
    "confine": {
        "desc": " Whether confine tooltip content in the view rect of chart instance. Useful when tooltip is cut because of 'overflow: hidden' set on outer dom of chart instance, or because of narrow screen on mobile. ",
        "uiControl": {
            "type": "boolean",
            "default": "false"
        }
    },
    "appendToBody": {
        "desc": ">  Since > v4.7.0Whether to append the tooltip DOM element as a child of the of the HTML page, when using [renderMode][0]'html'. By default false, means that the tooltip DOM element will be one of a descendant of its echarts DOM container. But that means that the tooltip might be cut when overflow the container if some of the ancestors DOM element of the echarts container are styled with overflow: hidden. This case could also be resolved by setting [tooltip.confine][1], but it might not suitable for all scenarios. Here we provide appendToBody: trueto auto append the tooltip element to, which is a common way to resolve this kind of issue. But true is not set as a default value because to void to bring break change for some cases where tooltip is deeply customized and to void some unexpected bad cases. Note that it also works when CSS transform used.\n\n[0]: #tooltip.renderMode\n[1]: #tooltip.confine",
        "uiControl": {
            "type": "boolean",
            "default": "false"
        }
    },
    "className": {
        "desc": ">  Since > v5.0.0 Specify the classes for the tooltip root DOM. (Only works in [html][0] render mode). Example: \n\n    className: 'echarts-tooltip echarts-tooltip-dark'\n    \n\n\n\n[0]: #tooltip.renderMode",
        "uiControl": {
            "type": "text"
        }
    },
    "transitionDuration": {
        "desc": " The transition duration of tooltip's animation, in seconds. When it is set to be 0, it would move closely with the mouse. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.1",
            "default": "0.4"
        }
    },
    "position": {
        "desc": "\n提示框浮层的位置，默认不设置时位置会跟随鼠标的位置。\n\n可选：\n\n* Array\n\n通过数组表示提示框浮层的位置，支持数字设置绝对位置，百分比设置相对位置。\n\n示例:\n```javascript\n// 绝对位置，相对于容器左侧 10px, 上侧 10 px\nposition: [10, 10]\n// 相对位置，放置在容器正中间\nposition: ['50%', '50%']\n```\n\n* Function\n\n回调函数，格式如下：\n\n```javascript\n(point: Array, params: Object|Array.<Object>, dom: HTMLDomElement, rect: Object, size: Object) => Array\n```\n\n**参数**\npoint: 鼠标位置，如 [20, 40]。\nparams: 同 formatter 的参数相同。\ndom: tooltip 的 dom 对象。\nrect: 只有鼠标在图形上时有效，是一个用 x , y , width , height四个属性表达的图形包围盒。\nsize: 包括 dom 的尺寸和 echarts 容器的当前尺寸，例如：{contentSize: [width, height], viewSize: [width, height]}。\n\n**返回值：**\n可以是一个表示 tooltip 位置的数组，数组值可以是绝对的像素值，也可以是相 百分比。\n也可以是一个对象，如：{left: 10, top: 30}，或者 {right: '20%', bottom: 40}。\n\n如下示例：\n\n```javascript\nposition: function (point, params, dom, rect, size) {\n    // 固定在顶部\n    return [point[0], '10%'];\n}\n```\n\n或者：\n\n```javascript\nposition: function (pos, params, dom, rect, size) {\n    // 鼠标在左侧时 tooltip 显示到右侧，鼠标在右侧时 tooltip 显示到左侧。\n    var obj = {top: 60};\n    obj[['left', 'right'][+(pos[0] < size.viewSize[0] / 2)]] = 5;\n    return obj;\n}\n```\n\n* 'inside'\n    鼠标所在图形的内部中心位置，只在 trigger 为 'item' 的时候有效。\n\n* 'top'\n    鼠标所在图形上侧，只在 trigger 为 'item' 的时候有效。\n\n* 'left'\n    鼠标所在图形左侧，只在 trigger 为 'item' 的时候有效。\n\n* 'right'\n    鼠标所在图形右侧，只在 trigger 为 'item' 的时候有效。\n\n* 'bottom'\n    鼠标所在图形底侧，只在 trigger 为 'item' 的时候有效。\n",
        "uiControl": {
            "type": [
                "string",
                "Array"
            ]
        }
    },
    "formatter": {
        "desc": " The content formatter of tooltip's floating layer which supports string template and callback function. **1. String template** The template variables are {a}, {b}, {c}, {d} and {e}, which stands for series name, data name and data value and ect. When [trigger][0] is set to be 'axis', there may be data from multiple series. In this time, series index can be refered as {a0}, {a1}, or {a2}. {a}, {b}, {c}, {d} have different meanings for different series types: \n\n* Line (area) charts, bar (column) charts, K charts: {a} for series name, {b} for category name, {c} for data value, {d} for none;\n* Scatter (bubble) charts: {a} for series name, {b} for data name, {c} for data value, {d} for none;\n* Map: {a} for series name, {b} for area name, {c} for merging data, {d} for none;\n* Pie charts, gauge charts, funnel charts: {a} for series name, {b} for data item name, {c} for data value, {d} for percentage.\n\n**Example:**    formatter: '{b0}: {c0}  \n{b1}: {c1}'\n    \n\n**2. Callback function** The format of callback function: \n\n    (params: Object|Array, ticket: string, callback: (ticket: string, html: string)) => string | HTMLElement | HTMLElement[]\n    \n\nThe first parameter params is the data that the formatter needs. Its format is shown as follows: \n\n    {\n        componentType: 'series',\n        // Series type\n        seriesType: string,\n        // Series index in option.series\n        seriesIndex: number,\n        // Series name\n        seriesName: string,\n        // Data name, or category name\n        name: string,\n        // Data index in input data array\n        dataIndex: number,\n        // Original data as input\n        data: Object,\n        // Value of data. In most series it is the same as data.\n        // But in some series it is some part of the data (e.g., in map, radar)\n        value: number|Array|Object,\n        // encoding info of coordinate system\n        // Key: coord, like ('x' 'y' 'radius' 'angle')\n        // value: Must be an array, not null/undefined. Contain dimension indices, like:\n        // {\n        //     x: [2] // values on dimension index 2 are mapped to x axis.\n        //     y: [0] // values on dimension index 0 are mapped to y axis.\n        // }\n        encode: Object,\n        // dimension names list\n        dimensionNames: Array,\n        // data dimension index, for example 0 or 1 or 2 ...\n        // Only work in `radar` series.\n        dimensionIndex: number,\n        // Color of data\n        color: string,\n    \n    \n        // the percentage of pie chart\n        percent: number,\n    \n    \n    }\n    \n\nNote: the usage of encode and dimensionNames can be: If data is: \n\n    dataset: {\n        source: [\n            ['Matcha Latte', 43.3, 85.8, 93.7],\n            ['Milk Tea', 83.1, 73.4, 55.1],\n            ['Cheese Cocoa', 86.4, 65.2, 82.5],\n            ['Walnut Brownie', 72.4, 53.9, 39.1]\n        ]\n    }\n    \n\nWe can get values that corresponding to y axis by: \n\n    params.value[params.encode.y[0]]\n    \n\nIf data is: \n\n    dataset: {\n        dimensions: ['product', '2015', '2016', '2017'],\n        source: [\n            {product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n            {product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n            {product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n            {product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n        ]\n    }\n    \n\nWe can get values that corresponding to y axis by: \n\n    params.value[params.dimensionNames[params.encode.y[0]]]\n    \n\nWhen [trigger][0] is 'axis', or when tooltip is triggered by [axisPointer][1], params is the data array of multiple series. The content of each item of the array is the same as above. Besides, \n\n    {\n        componentType: 'series',\n        // Series type\n        seriesType: string,\n        // Series index in option.series\n        seriesIndex: number,\n        // Series name\n        seriesName: string,\n        // Data name, or category name\n        name: string,\n        // Data index in input data array\n        dataIndex: number,\n        // Original data as input\n        data: Object,\n        // Value of data. In most series it is the same as data.\n        // But in some series it is some part of the data (e.g., in map, radar)\n        value: number|Array|Object,\n        // encoding info of coordinate system\n        // Key: coord, like ('x' 'y' 'radius' 'angle')\n        // value: Must be an array, not null/undefined. Contain dimension indices, like:\n        // {\n        //     x: [2] // values on dimension index 2 are mapped to x axis.\n        //     y: [0] // values on dimension index 0 are mapped to y axis.\n        // }\n        encode: Object,\n        // dimension names list\n        dimensionNames: Array,\n        // data dimension index, for example 0 or 1 or 2 ...\n        // Only work in `radar` series.\n        dimensionIndex: number,\n        // Color of data\n        color: string,\n    \n    \n    \n    }\n    \n\nNote: the usage of encode and dimensionNames can be: If data is: \n\n    dataset: {\n        source: [\n            ['Matcha Latte', 43.3, 85.8, 93.7],\n            ['Milk Tea', 83.1, 73.4, 55.1],\n            ['Cheese Cocoa', 86.4, 65.2, 82.5],\n            ['Walnut Brownie', 72.4, 53.9, 39.1]\n        ]\n    }\n    \n\nWe can get values that corresponding to y axis by: \n\n    params.value[params.encode.y[0]]\n    \n\nIf data is: \n\n    dataset: {\n        dimensions: ['product', '2015', '2016', '2017'],\n        source: [\n            {product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n            {product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n            {product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n            {product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n        ]\n    }\n    \n\nWe can get values that corresponding to y axis by: \n\n    params.value[params.dimensionNames[params.encode.y[0]]]\n    \n\n**Note:**Using array to present all the parameters in ECharts 2.x is not supported anymore. The second parameter ticket is the asynchronous callback flag which should be used along with the third parameter callback when it is used. The third parameter callback is asynchronous callback. When the content of tooltip is acquired asynchronously, ticket and htm as introduced above can be used to update tooltip with callback. Example: \n\n    formatter: function (params, ticket, callback) {\n        $.get('detail?name=' + params.name, function (content) {\n            callback(ticket, toHTML(content));\n        });\n        return 'Loading';\n    }\n    \n\n\n\n[0]: #tooltip.trigger\n[1]: #xAxis.axisPointer",
        "uiControl": {
            "type": [
                "string",
                "Function"
            ]
        }
    },
    "backgroundColor": {
        "desc": " The background color of tooltip's floating layer. ",
        "uiControl": {
            "default": "'rgba(50,50,50,0.7)'",
            "type": "color"
        }
    },
    "borderColor": {
        "desc": " The border color of tooltip's floating layer. ",
        "uiControl": {
            "type": "color",
            "default": "'#333'"
        }
    },
    "borderWidth": {
        "desc": " The border width of tooltip's floating layer. ",
        "uiControl": {
            "type": "number",
            "default": "0",
            "step": "0.5"
        }
    },
    "padding": {
        "desc": " The floating layer of tooltip space around content. The unit is px. Default values for each position are 5. And they can be set to different values with left, right, top, and bottom. Examples: \n\n    // Set padding to be 5\n    padding: 5\n    // Set the top and bottom paddings to be 5, and left and right paddings to be 10\n    padding: [5, 10]\n    // Set each of the four paddings seperately\n    padding: [\n        5,  // up\n        10, // right\n        5,  // down\n        10, // left\n    ]\n    \n\n",
        "uiControl": {
            "type": "vector",
            "min": "0",
            "dims": "T,R,B,L",
            "default": "0"
        }
    },
    "textStyle": {
        "desc": " The text syle of tooltip's floating layer. ",
        "uiControl": {
            "type": "Object"
        }
    },
    "textStyle.color": {
        "desc": " text color. ",
        "uiControl": {
            "type": "color",
            "default": "'#fff'"
        }
    },
    "textStyle.fontStyle": {
        "desc": " font style. Options are: \n\n* 'normal'\n* 'italic'\n* 'oblique'\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'normal','italic','oblique'"
        }
    },
    "textStyle.fontWeight": {
        "desc": " font thick weight. Options are: \n\n* 'normal'\n* 'bold'\n* 'bolder'\n* 'lighter'\n* 100 | 200 | 300 | 400...\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'normal','bold','bolder','lighter'"
        }
    },
    "textStyle.fontFamily": {
        "desc": " font family. Can also be 'serif' , 'monospace', ... ",
        "uiControl": {
            "type": "enum",
            "options": "'sans-serif','serif','monospace','Arial','Courier New'"
        }
    },
    "textStyle.fontSize": {
        "desc": " font size. ",
        "uiControl": {
            "type": "number",
            "default": "14",
            "min": "1",
            "step": "1"
        }
    },
    "textStyle.lineHeight": {
        "desc": " Line height of the text fragment. If lineHeight is not set in rich, lineHeight in parent level will be used. For example: \n\n    {\n        lineHeight: 56,\n        rich: {\n            a: {\n                // `lineHeight` is not set, then it will be 56\n            }\n        }\n    }\n    \n\n",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "12"
        }
    },
    "textStyle.width": {
        "desc": " Width of text block. ",
        "uiControl": {
            "type": "number",
            "default": "100",
            "min": "1",
            "max": "500",
            "step": "1"
        }
    },
    "textStyle.height": {
        "desc": " Height of text block. ",
        "uiControl": {
            "type": "number",
            "default": "50",
            "min": "1",
            "max": "500",
            "step": "1"
        }
    },
    "textStyle.textBorderColor": {
        "desc": " Storke color of the text. ",
        "uiControl": {
            "type": "color"
        }
    },
    "textStyle.textBorderWidth": {
        "desc": " Storke line width of the text. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "textStyle.textBorderType": {
        "desc": " Stroke line type of the text. Possible values are: \n\n* 'solid'\n* 'dashed'\n* 'dotted'\n\nSince v5.0.0, it can also be a number or a number array to specify the [dash array][0] of the line. With textBorderDashOffset , we can make the line style more flexible. For example： \n\n    {\n    \n    textBorderType: [5, 10],\n    \n    textBorderDashOffset: 5\n    }\n    \n\n\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray",
        "uiControl": {
            "type": "enum",
            "options": "'solid','dashed','dotted'"
        }
    },
    "textStyle.textBorderDashOffset": {
        "desc": ">  Since > v5.0.0 To set the line dash offset. With textBorderType , we can make the line style more flexible. Refer to MDN [lineDashOffset][0] for more details.\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "1",
            "default": "0"
        }
    },
    "textStyle.textShadowColor": {
        "desc": " Shadow color of the text itself. ",
        "uiControl": {
            "type": "color",
            "default": "'#000'"
        }
    },
    "textStyle.textShadowBlur": {
        "desc": " Shadow blue of the text itself. ",
        "uiControl": {
            "type": "number",
            "min": "0",
            "step": "0.5",
            "default": "0"
        }
    },
    "textStyle.textShadowOffsetX": {
        "desc": " Shadow X offset of the text itself. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "textStyle.textShadowOffsetY": {
        "desc": " Shadow Y offset of the text itself. ",
        "uiControl": {
            "type": "number",
            "step": "0.5"
        }
    },
    "textStyle.overflow": {
        "desc": " Determine how to display the text when it's overflow. Available when width is set. \n\n* 'truncate' Truncate the text and trailing with ellipsis.\n* 'break' Break by word\n* 'breakAll' Break by character.\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'truncate','break','breakAll'"
        }
    },
    "textStyle.ellipsis": {
        "desc": " Ellipsis to be displayed when overflow is set to truncate. ",
        "uiControl": {
            "default": "'...'",
            "type": "string"
        }
    },
    "textStyle.lineOverflow": {
        "desc": " Determine how to display the text when it's overflow on height. \n\n* 'truncate' Truncate the overflow lines.\n\n",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "extraCssText": {
        "desc": " Extra CSS style for floating layer. The following is an example for adding shadow. \n\n    extraCssText: 'box-shadow: 0 0 3px rgba(0, 0, 0, 0.3);'\n    \n\n",
        "uiControl": {
            "type": "text"
        }
    },
    "order": {
        "desc": ">  Since > v5.0.0 Tooltip order for multiple series. Defaults is 'seriesAsc'. Conditions to order tooltip. Options: \n\n* 'seriesAsc' Base on series declaration, ascending order tooltip.\n* 'seriesDesc' Base on series declaration, descending order tooltip.\n* 'valueAsc' Base on value, ascending order tooltip, only for numberic value.\n* 'valueDesc' Base on value, descending order tooltip, only for numberic value.\n\n",
        "uiControl": {
            "type": "enum",
            "options": "'seriesAsc','seriesDesc','valueAsc','valueDesc'"
        }
    }
}