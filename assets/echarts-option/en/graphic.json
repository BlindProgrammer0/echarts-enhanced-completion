{
    "id": {
        "desc": "Component ID, not specified by default. If specified, it can be used to refer the component in option or API.",
        "uiControl": {
            "type": "string"
        }
    },
    "elements": {
        "desc": "A list of all graphic elements.\n\nNote, the standard configuration of graphic component is:\n```javascript\n{\ngraphic: {\nelements: [\n{type: 'rect', ...}, {type: 'circle', ...}, ...\n]\n}\n}\n```\n\nBut we always use short patterns for convenience:\n```javascript\n{\ngraphic: { // Declare only one graphic element.\ntype: 'rect',\n...\n}\n}\n```\n\nOr:\n```javascript\n{\ngraphic: [ // Declare multiple graphic elements.\n{type: 'rect', ...}, {type: 'circle', ...}, ...\n]\n}\n```",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.group": {
        "desc": "`group` is the only type that can contain children, so that a group of elements can be positioned and transformed together.",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.group.type": {
        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
        "uiControl": {
            "default": "group",
            "type": "string"
        }
    },
    "elements.group.id": {
        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.\n\n\n### $action(string) = 'merge'\n\nSpecify the operation should be performed to the element when calling `setOption`.\nDefault value is 'merge', other values can be 'replace' or 'remove'.\n\nOptional values:\n\n+ `'merge'`: merge the given option to existing element (if any), otherwise create a new element.\n+ `'replace'`: create a new element according to the given option and replace the existing element (if any).\n+ `'remove'`: delete the existing element (if any).",
        "uiControl": {
            "default": "undefined",
            "type": "string"
        }
    },
    "elements.group.x": {
        "desc": "x position of element. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.group.y": {
        "desc": "y position of element. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.group.rotation": {
        "desc": "Degree value of rotation.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.group.scaleX": {
        "desc": "Scale on x.",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.group.scaleY": {
        "desc": "Scale on y.",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.group.originX": {
        "desc": "x value of element scale and rotation origin. In pixels",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.group.originY": {
        "desc": "y value of element scale and rotation origin. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.group.left": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the height of its parent.\n+ `'center'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [left](~graphic.elements-group.left) and [right](~graphic.elements-group.right) can work.\n\nIf [left](~graphic.elements-group.left) or [right](~graphic.elements-group.right) is specified, positioning attributes in [shape](~graphic.elements-group.shape) (like `x`, `cx`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.group.right": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the height of its parent.\n+ `'center'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [left](~graphic.elements-group.left) and [right](~graphic.elements-group.right) can work.\n\nIf [left](~graphic.elements-group.left) or [right](~graphic.elements-group.right) is specified, positioning attributes in [shape](~graphic.elements-group.shape) (like `x`, `cx`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.group.top": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the width of its parent.\n+ `'middle'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [top](~graphic.elements-group.top) and [bottom](~graphic.elements-group.bottom) can work.\n\nIf [top](~graphic.elements-group.top) or [bottom](~graphic.elements-group.bottom) is specified, positioning attributes in [shape](~graphic.elements-group.shape) (like `y`, `cy`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.group.bottom": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the width of its parent.\n+ `'middle'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [top](~graphic.elements-group.top) and [bottom](~graphic.elements-group.bottom) can work.\n\nIf [top](~graphic.elements-group.top) or [bottom](~graphic.elements-group.bottom) is specified, positioning attributes in [shape](~graphic.elements-group.shape) (like `y`, `cy`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.group.bounding": {
        "desc": "Used to specify whether the entire transformed element (containing children if is group) is confined in its container.\n\nSee sample:\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\nOptional values:\n\n+ `'all'`: (default)\nUse the transformed bounding box of itself and its descendants to perform position calculation, which confine the entire body in the boundary of its parent.\n\n+ `'raw'`:\nOnly use the untransformed bounding box of itself (without its descentant) to perform position calculation, which is suitable when the content in the element need to be overflow its parent.",
        "uiControl": {
            "default": "'all'",
            "type": "string"
        }
    },
    "elements.group.z": {
        "desc": "z value of the elements, determine the overlap order.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.group.zlevel": {
        "desc": "Determine which canvas layer this element should be in.\n\nNotice: Multiple canvas layer may affect performance.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.group.info": {
        "desc": "User defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
        "uiControl": {
            "type": "*"
        }
    },
    "elements.group.silent": {
        "desc": "Whether response to mouse events / touch events.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.group.invisible": {
        "desc": "Whether the element is visible.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.group.ignore": {
        "desc": "Whether the element is totally ignored (neither render nor listen events).",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.group.textContent": {
        "desc": "Text block attached to an element and layout based on the element by `textConfig`.\n\n\nThe props the the same as [text](option.html#graphic.elements-text).",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.group.textConfig": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.group.textConfig.position": {
        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
        "uiControl": {
            "default": "'inside'",
            "type": ""
        }
    },
    "elements.group.textConfig.rotation": {
        "desc": "Rotation of `textContent`. In radian.",
        "uiControl": {
            "type": "number"
        }
    },
    "elements.group.textConfig.layoutRect": {
        "desc": "Rect that `textContent` will be positioned.\nDefault to be the bounding box of host element.\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.group.textConfig.offset": {
        "desc": "Offset of the `textContent`.\n\nThe difference of `offset` and `position` is that `offset` will be applied in the rotation.\n\n#### origin\n\n`origin` is relative to the bounding box of the host element.\nCan be percent value. Relative to the bounding box.\nIf `'center'` specified, it will be center of the bounding box.\n\nOnly available when position and rotation are both set.\n\n+ like `[12, 33]`\n+ or like `['50%', '50%']`\n+ 'center'",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.group.textConfig.distance": {
        "desc": "Distance to the `layoutRect`。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.group.textConfig.local": {
        "desc": "If `true`, it will apply host's transform.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.group.textConfig.insideFill": {
        "desc": "`insideFill` is a color string or left empty.\n\nIf a `textContent` is `\"inside\"`, its final `fill` will be picked by this priority:\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\nIn most cases, \"auto-calculated-fill\" is white.",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.group.textConfig.insideStroke": {
        "desc": "`insideStroke` is a color string or left empty.\n\nIf a `textContent` is `\"inside\"`, its final `stroke` will be picked by this priority:\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\nThe rule of getting \"auto-calculated-stroke\":\n\n+ If\n+ (A) the `fill` is specified in style (either in `textContent.style` or `textContent.style.rich`)\n+ or (B) needed to draw text background (either defined in `textContent.style` or `textContent.style.rich`)\n+ \"auto-calculated-stroke\" will be null.\n+ Otherwise\n+ \"auto-calculated-stroke\" will be the same as `fill` of this element if possible, or null.",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.group.textConfig.outsideFill": {
        "desc": "`outsideFill` is a color string or left empty.\n\nIf a `textContent` is \"inside\", its final `fill` will be picked by this priority:\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.group.textConfig.outsideStroke": {
        "desc": "`outsideStroke` is a color string or left empty.\n\nIf a `textContent` is not \"inside\", its final `stroke` will be picked by this priority:\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\nThe rule of getting \"auto-calculated-stroke\":\n\n+ If\n+ (A) the `fill` is specified in style (either in `textContent.style` or `textContent.style.rich`)\n+ or (B) needed to draw text background (either defined in `textContent.style` or `textContent.style.rich`)\n+ \"auto-calculated-stroke\" will be null.\n+ Otherwise\n+ \"auto-calculated-stroke\" will be a near white color to distinguish \"front end\" label with messy background (like other text label, line or other graphic).",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.group.textConfig.inside": {
        "desc": "Tell echarts that I can make sure this text is inside or not.",
        "uiControl": {
            "type": "boolean"
        }
    },
    "elements.group.cursor": {
        "desc": "The mouse style when mouse hovers on an element, the same as `cursor` property in `CSS`.",
        "uiControl": {
            "default": "'pointer'",
            "type": "enum",
            "options": "'auto','pointer','move'"
        }
    },
    "elements.group.draggable": {
        "desc": "Can be dragged or not.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.group.progressive": {
        "desc": "Whether use progressive render to improve performance. Usually used when number of element is too large.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.group.width": {
        "desc": "Specify width of this `group`.\n\nThis width is only used for the positioning of its children.\n\nWhen width is `0`, children can also be positioned according to its parent using `left: 'center'`.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.group.height": {
        "desc": "Specify height of this `group`.\n\nThis height is only used for the positioning of its children.\n\nWhen height is `0`, children can also be positioned according to its parent using `top: 'middle'`.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.group.diffChildrenByName": {
        "desc": "In [custom series](~series-custom), when `diffChildrenByName` is set as `true`, for each [group](~graphic.elements-group) returned from [renderItem](~series-custom.renderItem), \"diff\" will be performed to its [children](~graphic.elements-group.children) according to the [name](~graphic.elements-polygon.name) attribute of each graphic elements. Here \"diff\" means that map the coming graphic elements to the existing graphic elements when repainting according to `name`, which enables the transition animation if data is modified.\n\nBut notice that the operation is performance consuming, do not use it for large data amount.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.group.children": {
        "desc": "A list of children, each item is a declaration of an element.",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.group.onclick": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.onmouseover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.onmouseout": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.onmousemove": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.onmousewheel": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.onmousedown": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.onmouseup": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.ondrag": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.ondragstart": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.ondragend": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.ondragenter": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.ondragleave": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.ondragover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.group.ondrop": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.image.type": {
        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
        "uiControl": {
            "default": "image",
            "type": "string"
        }
    },
    "elements.image.id": {
        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.\n\n\n### $action(string) = 'merge'\n\nSpecify the operation should be performed to the element when calling `setOption`.\nDefault value is 'merge', other values can be 'replace' or 'remove'.\n\nOptional values:\n\n+ `'merge'`: merge the given option to existing element (if any), otherwise create a new element.\n+ `'replace'`: create a new element according to the given option and replace the existing element (if any).\n+ `'remove'`: delete the existing element (if any).",
        "uiControl": {
            "default": "undefined",
            "type": "string"
        }
    },
    "elements.image.x": {
        "desc": "x position of element. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.image.y": {
        "desc": "y position of element. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.image.rotation": {
        "desc": "Degree value of rotation.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.image.scaleX": {
        "desc": "Scale on x.",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.image.scaleY": {
        "desc": "Scale on y.",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.image.originX": {
        "desc": "x value of element scale and rotation origin. In pixels",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.image.originY": {
        "desc": "y value of element scale and rotation origin. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.image.left": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the height of its parent.\n+ `'center'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [left](~graphic.elements-image.left) and [right](~graphic.elements-image.right) can work.\n\nIf [left](~graphic.elements-image.left) or [right](~graphic.elements-image.right) is specified, positioning attributes in [shape](~graphic.elements-image.shape) (like `x`, `cx`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.image.right": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the height of its parent.\n+ `'center'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [left](~graphic.elements-image.left) and [right](~graphic.elements-image.right) can work.\n\nIf [left](~graphic.elements-image.left) or [right](~graphic.elements-image.right) is specified, positioning attributes in [shape](~graphic.elements-image.shape) (like `x`, `cx`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.image.top": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the width of its parent.\n+ `'middle'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [top](~graphic.elements-image.top) and [bottom](~graphic.elements-image.bottom) can work.\n\nIf [top](~graphic.elements-image.top) or [bottom](~graphic.elements-image.bottom) is specified, positioning attributes in [shape](~graphic.elements-image.shape) (like `y`, `cy`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.image.bottom": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the width of its parent.\n+ `'middle'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [top](~graphic.elements-image.top) and [bottom](~graphic.elements-image.bottom) can work.\n\nIf [top](~graphic.elements-image.top) or [bottom](~graphic.elements-image.bottom) is specified, positioning attributes in [shape](~graphic.elements-image.shape) (like `y`, `cy`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.image.bounding": {
        "desc": "Used to specify whether the entire transformed element (containing children if is group) is confined in its container.\n\nSee sample:\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\nOptional values:\n\n+ `'all'`: (default)\nUse the transformed bounding box of itself and its descendants to perform position calculation, which confine the entire body in the boundary of its parent.\n\n+ `'raw'`:\nOnly use the untransformed bounding box of itself (without its descentant) to perform position calculation, which is suitable when the content in the element need to be overflow its parent.",
        "uiControl": {
            "default": "'all'",
            "type": "string"
        }
    },
    "elements.image.z": {
        "desc": "z value of the elements, determine the overlap order.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.image.zlevel": {
        "desc": "Determine which canvas layer this element should be in.\n\nNotice: Multiple canvas layer may affect performance.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.image.info": {
        "desc": "User defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
        "uiControl": {
            "type": "*"
        }
    },
    "elements.image.silent": {
        "desc": "Whether response to mouse events / touch events.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.image.invisible": {
        "desc": "Whether the element is visible.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.image.ignore": {
        "desc": "Whether the element is totally ignored (neither render nor listen events).",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.image.textContent": {
        "desc": "Text block attached to an element and layout based on the element by `textConfig`.\n\n\nThe props the the same as [text](option.html#graphic.elements-text).",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.image.textConfig": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.image.textConfig.position": {
        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
        "uiControl": {
            "default": "'inside'",
            "type": ""
        }
    },
    "elements.image.textConfig.rotation": {
        "desc": "Rotation of `textContent`. In radian.",
        "uiControl": {
            "type": "number"
        }
    },
    "elements.image.textConfig.layoutRect": {
        "desc": "Rect that `textContent` will be positioned.\nDefault to be the bounding box of host element.\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.image.textConfig.offset": {
        "desc": "Offset of the `textContent`.\n\nThe difference of `offset` and `position` is that `offset` will be applied in the rotation.\n\n#### origin\n\n`origin` is relative to the bounding box of the host element.\nCan be percent value. Relative to the bounding box.\nIf `'center'` specified, it will be center of the bounding box.\n\nOnly available when position and rotation are both set.\n\n+ like `[12, 33]`\n+ or like `['50%', '50%']`\n+ 'center'",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.image.textConfig.distance": {
        "desc": "Distance to the `layoutRect`。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.image.textConfig.local": {
        "desc": "If `true`, it will apply host's transform.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.image.textConfig.insideFill": {
        "desc": "`insideFill` is a color string or left empty.\n\nIf a `textContent` is `\"inside\"`, its final `fill` will be picked by this priority:\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\nIn most cases, \"auto-calculated-fill\" is white.",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.image.textConfig.insideStroke": {
        "desc": "`insideStroke` is a color string or left empty.\n\nIf a `textContent` is `\"inside\"`, its final `stroke` will be picked by this priority:\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\nThe rule of getting \"auto-calculated-stroke\":\n\n+ If\n+ (A) the `fill` is specified in style (either in `textContent.style` or `textContent.style.rich`)\n+ or (B) needed to draw text background (either defined in `textContent.style` or `textContent.style.rich`)\n+ \"auto-calculated-stroke\" will be null.\n+ Otherwise\n+ \"auto-calculated-stroke\" will be the same as `fill` of this element if possible, or null.",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.image.textConfig.outsideFill": {
        "desc": "`outsideFill` is a color string or left empty.\n\nIf a `textContent` is \"inside\", its final `fill` will be picked by this priority:\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.image.textConfig.outsideStroke": {
        "desc": "`outsideStroke` is a color string or left empty.\n\nIf a `textContent` is not \"inside\", its final `stroke` will be picked by this priority:\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\nThe rule of getting \"auto-calculated-stroke\":\n\n+ If\n+ (A) the `fill` is specified in style (either in `textContent.style` or `textContent.style.rich`)\n+ or (B) needed to draw text background (either defined in `textContent.style` or `textContent.style.rich`)\n+ \"auto-calculated-stroke\" will be null.\n+ Otherwise\n+ \"auto-calculated-stroke\" will be a near white color to distinguish \"front end\" label with messy background (like other text label, line or other graphic).",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.image.textConfig.inside": {
        "desc": "Tell echarts that I can make sure this text is inside or not.",
        "uiControl": {
            "type": "boolean"
        }
    },
    "elements.image.cursor": {
        "desc": "The mouse style when mouse hovers on an element, the same as `cursor` property in `CSS`.",
        "uiControl": {
            "default": "'pointer'",
            "type": "enum",
            "options": "'auto','pointer','move'"
        }
    },
    "elements.image.draggable": {
        "desc": "Can be dragged or not.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.image.progressive": {
        "desc": "Whether use progressive render to improve performance. Usually used when number of element is too large.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.image.style": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.image.style.image": {
        "desc": "Specify content of the image, can be a URL, or [dataURI](https://tools.ietf.org/html/rfc2397).",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.image.style.x": {
        "desc": "The x value of the left-top corner of the element in the coordinate system of its parent.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.image.style.y": {
        "desc": "The y value of the left-top corner of the element in the coordinate system of its parent.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.image.style.width": {
        "desc": "The width of the shape of the element.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.image.style.height": {
        "desc": "The height of the shape of the element.\n\n\n\n\n\n\n\nMore attributes in `style` (for example, [rich text](tutorial.html#Rich%20Text)), see the `style` related attributes in [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable).\n\nNotice, the attribute names of the `style` of graphic elements is derived from `zrender`, which may be different from the attribute names in `echarts label`, `echarts itemStyle`, etc., although they have the same meaning. For example:\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
        "uiControl": {
            "default": "0",
            "type": "numbr"
        }
    },
    "elements.image.style.fill": {
        "desc": "Color filled in this element.",
        "uiControl": {
            "default": "'#000'",
            "type": "string"
        }
    },
    "elements.image.style.stroke": {
        "desc": "Color of stroke.",
        "uiControl": {
            "default": "null",
            "type": "string"
        }
    },
    "elements.image.style.lineWidth": {
        "desc": "Width of stroke.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.image.style.shadowBlur": {
        "desc": "Width of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.image.style.shadowOffsetX": {
        "desc": "X offset of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.image.style.shadowOffsetY": {
        "desc": "Y offset of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.image.style.shadowColor": {
        "desc": "color of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.image.focus": {
        "desc": "> Since `v5.0.0`\n\n\n\nWhen it's highlighted, whether to fade out of other data to focus the highlighted. The following configurations are supported:\n\n+ `'none'` Do not fade out other data, it's by default.\n+ `'self'` Only focus (not fade out) the element of the currently highlighted data.\n+ `'series'` Focus on all elements of the series which the currently highlighted data belongs to.",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "elements.image.blurScope": {
        "desc": "> Since `v5.0.0`\n\n\n\nThe range of fade out when `focus` is enabled. Support the following configurations\n\n+ `'coordinateSystem'`\n+ `'series'`\n+ `'global'`",
        "uiControl": {
            "default": "'coordinateSystem'",
            "type": "string"
        }
    },
    "elements.image.onclick": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.onmouseover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.onmouseout": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.onmousemove": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.onmousewheel": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.onmousedown": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.onmouseup": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.ondrag": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.ondragstart": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.ondragend": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.ondragenter": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.ondragleave": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.ondragover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.image.ondrop": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text": {
        "desc": "Text block.",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.text.type": {
        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
        "uiControl": {
            "default": "text",
            "type": "string"
        }
    },
    "elements.text.id": {
        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.\n\n\n### $action(string) = 'merge'\n\nSpecify the operation should be performed to the element when calling `setOption`.\nDefault value is 'merge', other values can be 'replace' or 'remove'.\n\nOptional values:\n\n+ `'merge'`: merge the given option to existing element (if any), otherwise create a new element.\n+ `'replace'`: create a new element according to the given option and replace the existing element (if any).\n+ `'remove'`: delete the existing element (if any).",
        "uiControl": {
            "default": "undefined",
            "type": "string"
        }
    },
    "elements.text.x": {
        "desc": "x position of element. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.text.y": {
        "desc": "y position of element. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.text.rotation": {
        "desc": "Degree value of rotation.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.text.scaleX": {
        "desc": "Scale on x.",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.text.scaleY": {
        "desc": "Scale on y.",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.text.originX": {
        "desc": "x value of element scale and rotation origin. In pixels",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.text.originY": {
        "desc": "y value of element scale and rotation origin. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.text.left": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the height of its parent.\n+ `'center'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [left](~graphic.elements-text.left) and [right](~graphic.elements-text.right) can work.\n\nIf [left](~graphic.elements-text.left) or [right](~graphic.elements-text.right) is specified, positioning attributes in [shape](~graphic.elements-text.shape) (like `x`, `cx`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.text.right": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the height of its parent.\n+ `'center'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [left](~graphic.elements-text.left) and [right](~graphic.elements-text.right) can work.\n\nIf [left](~graphic.elements-text.left) or [right](~graphic.elements-text.right) is specified, positioning attributes in [shape](~graphic.elements-text.shape) (like `x`, `cx`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.text.top": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the width of its parent.\n+ `'middle'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [top](~graphic.elements-text.top) and [bottom](~graphic.elements-text.bottom) can work.\n\nIf [top](~graphic.elements-text.top) or [bottom](~graphic.elements-text.bottom) is specified, positioning attributes in [shape](~graphic.elements-text.shape) (like `y`, `cy`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.text.bottom": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the width of its parent.\n+ `'middle'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [top](~graphic.elements-text.top) and [bottom](~graphic.elements-text.bottom) can work.\n\nIf [top](~graphic.elements-text.top) or [bottom](~graphic.elements-text.bottom) is specified, positioning attributes in [shape](~graphic.elements-text.shape) (like `y`, `cy`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.text.bounding": {
        "desc": "Used to specify whether the entire transformed element (containing children if is group) is confined in its container.\n\nSee sample:\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\nOptional values:\n\n+ `'all'`: (default)\nUse the transformed bounding box of itself and its descendants to perform position calculation, which confine the entire body in the boundary of its parent.\n\n+ `'raw'`:\nOnly use the untransformed bounding box of itself (without its descentant) to perform position calculation, which is suitable when the content in the element need to be overflow its parent.",
        "uiControl": {
            "default": "'all'",
            "type": "string"
        }
    },
    "elements.text.z": {
        "desc": "z value of the elements, determine the overlap order.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.text.zlevel": {
        "desc": "Determine which canvas layer this element should be in.\n\nNotice: Multiple canvas layer may affect performance.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.text.info": {
        "desc": "User defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
        "uiControl": {
            "type": "*"
        }
    },
    "elements.text.silent": {
        "desc": "Whether response to mouse events / touch events.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.text.invisible": {
        "desc": "Whether the element is visible.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.text.ignore": {
        "desc": "Whether the element is totally ignored (neither render nor listen events).",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.text.textContent": {
        "desc": "Text block attached to an element and layout based on the element by `textConfig`.\n\n\nThe props the the same as [text](option.html#graphic.elements-text).",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.text.textConfig": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.text.textConfig.position": {
        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
        "uiControl": {
            "default": "'inside'",
            "type": ""
        }
    },
    "elements.text.textConfig.rotation": {
        "desc": "Rotation of `textContent`. In radian.",
        "uiControl": {
            "type": "number"
        }
    },
    "elements.text.textConfig.layoutRect": {
        "desc": "Rect that `textContent` will be positioned.\nDefault to be the bounding box of host element.\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.text.textConfig.offset": {
        "desc": "Offset of the `textContent`.\n\nThe difference of `offset` and `position` is that `offset` will be applied in the rotation.\n\n#### origin\n\n`origin` is relative to the bounding box of the host element.\nCan be percent value. Relative to the bounding box.\nIf `'center'` specified, it will be center of the bounding box.\n\nOnly available when position and rotation are both set.\n\n+ like `[12, 33]`\n+ or like `['50%', '50%']`\n+ 'center'",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.text.textConfig.distance": {
        "desc": "Distance to the `layoutRect`。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.text.textConfig.local": {
        "desc": "If `true`, it will apply host's transform.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.text.textConfig.insideFill": {
        "desc": "`insideFill` is a color string or left empty.\n\nIf a `textContent` is `\"inside\"`, its final `fill` will be picked by this priority:\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\nIn most cases, \"auto-calculated-fill\" is white.",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.text.textConfig.insideStroke": {
        "desc": "`insideStroke` is a color string or left empty.\n\nIf a `textContent` is `\"inside\"`, its final `stroke` will be picked by this priority:\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\nThe rule of getting \"auto-calculated-stroke\":\n\n+ If\n+ (A) the `fill` is specified in style (either in `textContent.style` or `textContent.style.rich`)\n+ or (B) needed to draw text background (either defined in `textContent.style` or `textContent.style.rich`)\n+ \"auto-calculated-stroke\" will be null.\n+ Otherwise\n+ \"auto-calculated-stroke\" will be the same as `fill` of this element if possible, or null.",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.text.textConfig.outsideFill": {
        "desc": "`outsideFill` is a color string or left empty.\n\nIf a `textContent` is \"inside\", its final `fill` will be picked by this priority:\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.text.textConfig.outsideStroke": {
        "desc": "`outsideStroke` is a color string or left empty.\n\nIf a `textContent` is not \"inside\", its final `stroke` will be picked by this priority:\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\nThe rule of getting \"auto-calculated-stroke\":\n\n+ If\n+ (A) the `fill` is specified in style (either in `textContent.style` or `textContent.style.rich`)\n+ or (B) needed to draw text background (either defined in `textContent.style` or `textContent.style.rich`)\n+ \"auto-calculated-stroke\" will be null.\n+ Otherwise\n+ \"auto-calculated-stroke\" will be a near white color to distinguish \"front end\" label with messy background (like other text label, line or other graphic).",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.text.textConfig.inside": {
        "desc": "Tell echarts that I can make sure this text is inside or not.",
        "uiControl": {
            "type": "boolean"
        }
    },
    "elements.text.cursor": {
        "desc": "The mouse style when mouse hovers on an element, the same as `cursor` property in `CSS`.",
        "uiControl": {
            "default": "'pointer'",
            "type": "enum",
            "options": "'auto','pointer','move'"
        }
    },
    "elements.text.draggable": {
        "desc": "Can be dragged or not.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.text.progressive": {
        "desc": "Whether use progressive render to improve performance. Usually used when number of element is too large.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.text.style": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.text.style.text": {
        "desc": "Text content. `\\n` can be used as a line break.",
        "uiControl": {
            "default": "''",
            "type": "string"
        }
    },
    "elements.text.style.x": {
        "desc": "The x value of the left-top corner of the element in the coordinate system of its parent.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.text.style.y": {
        "desc": "The y value of the left-top corner of the element in the coordinate system of its parent.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.text.style.font": {
        "desc": "Font size, font type, font weight, font color, follow the form of [css font](https://developer.mozilla.org/en-US/docs/Web/CSS/font).\n\nFor example:\n```\n// size | family\nfont: '2em \"STHeiti\", sans-serif'\n\n// style | weight | size | family\nfont: 'italic bolder 16px cursive'\n\n// weight | size | family\nfont: 'bolder 2em \"Microsoft YaHei\", sans-serif'\n```",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.text.style.textAlign": {
        "desc": "Text horizontal alignment. Optional values: `'left'`, `'center'`, `'right'`.\n\n`'left'` means the left side of the text block is specified by the [style.x](~graphic.elements-text.style.x), while `'right'` means the right side of the text block is specified by [style.y](~graphic.elements-text.style.y).",
        "uiControl": {
            "default": "'left'",
            "type": "string"
        }
    },
    "elements.text.style.textVerticalAlign": {
        "desc": "Text vertical alignment. Optional values: `'top'`, `'middle'`, `'bottom'`.\n\n\n\nMore attributes in `style` (for example, [rich text](tutorial.html#Rich%20Text)), see the `style` related attributes in [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable).\n\nNotice, the attribute names of the `style` of graphic elements is derived from `zrender`, which may be different from the attribute names in `echarts label`, `echarts itemStyle`, etc., although they have the same meaning. For example:\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.text.style.fill": {
        "desc": "Color filled in this element.",
        "uiControl": {
            "default": "'#000'",
            "type": "string"
        }
    },
    "elements.text.style.stroke": {
        "desc": "Color of stroke.",
        "uiControl": {
            "default": "null",
            "type": "string"
        }
    },
    "elements.text.style.lineWidth": {
        "desc": "Width of stroke.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.text.style.shadowBlur": {
        "desc": "Width of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.text.style.shadowOffsetX": {
        "desc": "X offset of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.text.style.shadowOffsetY": {
        "desc": "Y offset of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.text.style.shadowColor": {
        "desc": "color of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.text.focus": {
        "desc": "> Since `v5.0.0`\n\n\n\nWhen it's highlighted, whether to fade out of other data to focus the highlighted. The following configurations are supported:\n\n+ `'none'` Do not fade out other data, it's by default.\n+ `'self'` Only focus (not fade out) the element of the currently highlighted data.\n+ `'series'` Focus on all elements of the series which the currently highlighted data belongs to.",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "elements.text.blurScope": {
        "desc": "> Since `v5.0.0`\n\n\n\nThe range of fade out when `focus` is enabled. Support the following configurations\n\n+ `'coordinateSystem'`\n+ `'series'`\n+ `'global'`",
        "uiControl": {
            "default": "'coordinateSystem'",
            "type": "string"
        }
    },
    "elements.text.onclick": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.onmouseover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.onmouseout": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.onmousemove": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.onmousewheel": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.onmousedown": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.onmouseup": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.ondrag": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.ondragstart": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.ondragend": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.ondragenter": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.ondragleave": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.ondragover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.text.ondrop": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect": {
        "desc": "Rectangle element.",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.rect.type": {
        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
        "uiControl": {
            "default": "rect",
            "type": "string"
        }
    },
    "elements.rect.id": {
        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.\n\n\n### $action(string) = 'merge'\n\nSpecify the operation should be performed to the element when calling `setOption`.\nDefault value is 'merge', other values can be 'replace' or 'remove'.\n\nOptional values:\n\n+ `'merge'`: merge the given option to existing element (if any), otherwise create a new element.\n+ `'replace'`: create a new element according to the given option and replace the existing element (if any).\n+ `'remove'`: delete the existing element (if any).",
        "uiControl": {
            "default": "undefined",
            "type": "string"
        }
    },
    "elements.rect.x": {
        "desc": "x position of element. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.rect.y": {
        "desc": "y position of element. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.rect.rotation": {
        "desc": "Degree value of rotation.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.rect.scaleX": {
        "desc": "Scale on x.",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.rect.scaleY": {
        "desc": "Scale on y.",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.rect.originX": {
        "desc": "x value of element scale and rotation origin. In pixels",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.rect.originY": {
        "desc": "y value of element scale and rotation origin. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.rect.left": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the height of its parent.\n+ `'center'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [left](~graphic.elements-rect.left) and [right](~graphic.elements-rect.right) can work.\n\nIf [left](~graphic.elements-rect.left) or [right](~graphic.elements-rect.right) is specified, positioning attributes in [shape](~graphic.elements-rect.shape) (like `x`, `cx`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.rect.right": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the height of its parent.\n+ `'center'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [left](~graphic.elements-rect.left) and [right](~graphic.elements-rect.right) can work.\n\nIf [left](~graphic.elements-rect.left) or [right](~graphic.elements-rect.right) is specified, positioning attributes in [shape](~graphic.elements-rect.shape) (like `x`, `cx`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.rect.top": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the width of its parent.\n+ `'middle'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [top](~graphic.elements-rect.top) and [bottom](~graphic.elements-rect.bottom) can work.\n\nIf [top](~graphic.elements-rect.top) or [bottom](~graphic.elements-rect.bottom) is specified, positioning attributes in [shape](~graphic.elements-rect.shape) (like `y`, `cy`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.rect.bottom": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the width of its parent.\n+ `'middle'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [top](~graphic.elements-rect.top) and [bottom](~graphic.elements-rect.bottom) can work.\n\nIf [top](~graphic.elements-rect.top) or [bottom](~graphic.elements-rect.bottom) is specified, positioning attributes in [shape](~graphic.elements-rect.shape) (like `y`, `cy`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.rect.bounding": {
        "desc": "Used to specify whether the entire transformed element (containing children if is group) is confined in its container.\n\nSee sample:\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\nOptional values:\n\n+ `'all'`: (default)\nUse the transformed bounding box of itself and its descendants to perform position calculation, which confine the entire body in the boundary of its parent.\n\n+ `'raw'`:\nOnly use the untransformed bounding box of itself (without its descentant) to perform position calculation, which is suitable when the content in the element need to be overflow its parent.",
        "uiControl": {
            "default": "'all'",
            "type": "string"
        }
    },
    "elements.rect.z": {
        "desc": "z value of the elements, determine the overlap order.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.rect.zlevel": {
        "desc": "Determine which canvas layer this element should be in.\n\nNotice: Multiple canvas layer may affect performance.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.rect.info": {
        "desc": "User defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
        "uiControl": {
            "type": "*"
        }
    },
    "elements.rect.silent": {
        "desc": "Whether response to mouse events / touch events.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.rect.invisible": {
        "desc": "Whether the element is visible.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.rect.ignore": {
        "desc": "Whether the element is totally ignored (neither render nor listen events).",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.rect.textContent": {
        "desc": "Text block attached to an element and layout based on the element by `textConfig`.\n\n\nThe props the the same as [text](option.html#graphic.elements-text).",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.rect.textConfig": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.rect.textConfig.position": {
        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
        "uiControl": {
            "default": "'inside'",
            "type": ""
        }
    },
    "elements.rect.textConfig.rotation": {
        "desc": "Rotation of `textContent`. In radian.",
        "uiControl": {
            "type": "number"
        }
    },
    "elements.rect.textConfig.layoutRect": {
        "desc": "Rect that `textContent` will be positioned.\nDefault to be the bounding box of host element.\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.rect.textConfig.offset": {
        "desc": "Offset of the `textContent`.\n\nThe difference of `offset` and `position` is that `offset` will be applied in the rotation.\n\n#### origin\n\n`origin` is relative to the bounding box of the host element.\nCan be percent value. Relative to the bounding box.\nIf `'center'` specified, it will be center of the bounding box.\n\nOnly available when position and rotation are both set.\n\n+ like `[12, 33]`\n+ or like `['50%', '50%']`\n+ 'center'",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.rect.textConfig.distance": {
        "desc": "Distance to the `layoutRect`。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.rect.textConfig.local": {
        "desc": "If `true`, it will apply host's transform.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.rect.textConfig.insideFill": {
        "desc": "`insideFill` is a color string or left empty.\n\nIf a `textContent` is `\"inside\"`, its final `fill` will be picked by this priority:\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\nIn most cases, \"auto-calculated-fill\" is white.",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.rect.textConfig.insideStroke": {
        "desc": "`insideStroke` is a color string or left empty.\n\nIf a `textContent` is `\"inside\"`, its final `stroke` will be picked by this priority:\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\nThe rule of getting \"auto-calculated-stroke\":\n\n+ If\n+ (A) the `fill` is specified in style (either in `textContent.style` or `textContent.style.rich`)\n+ or (B) needed to draw text background (either defined in `textContent.style` or `textContent.style.rich`)\n+ \"auto-calculated-stroke\" will be null.\n+ Otherwise\n+ \"auto-calculated-stroke\" will be the same as `fill` of this element if possible, or null.",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.rect.textConfig.outsideFill": {
        "desc": "`outsideFill` is a color string or left empty.\n\nIf a `textContent` is \"inside\", its final `fill` will be picked by this priority:\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.rect.textConfig.outsideStroke": {
        "desc": "`outsideStroke` is a color string or left empty.\n\nIf a `textContent` is not \"inside\", its final `stroke` will be picked by this priority:\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\nThe rule of getting \"auto-calculated-stroke\":\n\n+ If\n+ (A) the `fill` is specified in style (either in `textContent.style` or `textContent.style.rich`)\n+ or (B) needed to draw text background (either defined in `textContent.style` or `textContent.style.rich`)\n+ \"auto-calculated-stroke\" will be null.\n+ Otherwise\n+ \"auto-calculated-stroke\" will be a near white color to distinguish \"front end\" label with messy background (like other text label, line or other graphic).",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.rect.textConfig.inside": {
        "desc": "Tell echarts that I can make sure this text is inside or not.",
        "uiControl": {
            "type": "boolean"
        }
    },
    "elements.rect.cursor": {
        "desc": "The mouse style when mouse hovers on an element, the same as `cursor` property in `CSS`.",
        "uiControl": {
            "default": "'pointer'",
            "type": "enum",
            "options": "'auto','pointer','move'"
        }
    },
    "elements.rect.draggable": {
        "desc": "Can be dragged or not.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.rect.progressive": {
        "desc": "Whether use progressive render to improve performance. Usually used when number of element is too large.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.rect.shape": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.rect.shape.x": {
        "desc": "The x value of the left-top corner of the element in the coordinate system of its parent.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.rect.shape.y": {
        "desc": "The y value of the left-top corner of the element in the coordinate system of its parent.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.rect.shape.width": {
        "desc": "The width of the shape of the element.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.rect.shape.height": {
        "desc": "The height of the shape of the element.",
        "uiControl": {
            "default": "0",
            "type": "numbr"
        }
    },
    "elements.rect.shape.r": {
        "desc": "Specify border radius of the rectangular here. Generally, `r` should be `[topLeftRadius, topRightRadius, BottomRightRadius, bottomLeftRadius]`, where each item is a number.\n\nAbbreviation is enabled, for example:\n+ `r`: `1`         means `[1, 1, 1, 1]`\n+ `r`: `[1]`       means `[1, 1, 1, 1]`\n+ `r`: `[1, 2]`    means `[1, 2, 1, 2]`\n+ `r`: `[1, 2, 3]` means `[1, 2, 3, 2]`",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.rect.style": {
        "desc": "More attributes in `style` (for example, [rich text](tutorial.html#Rich%20Text)), see the `style` related attributes in [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable).\n\nNotice, the attribute names of the `style` of graphic elements is derived from `zrender`, which may be different from the attribute names in `echarts label`, `echarts itemStyle`, etc., although they have the same meaning. For example:\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.rect.style.fill": {
        "desc": "Color filled in this element.",
        "uiControl": {
            "default": "'#000'",
            "type": "string"
        }
    },
    "elements.rect.style.stroke": {
        "desc": "Color of stroke.",
        "uiControl": {
            "default": "null",
            "type": "string"
        }
    },
    "elements.rect.style.lineWidth": {
        "desc": "Width of stroke.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.rect.style.shadowBlur": {
        "desc": "Width of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.rect.style.shadowOffsetX": {
        "desc": "X offset of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.rect.style.shadowOffsetY": {
        "desc": "Y offset of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.rect.style.shadowColor": {
        "desc": "color of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.rect.focus": {
        "desc": "> Since `v5.0.0`\n\n\n\nWhen it's highlighted, whether to fade out of other data to focus the highlighted. The following configurations are supported:\n\n+ `'none'` Do not fade out other data, it's by default.\n+ `'self'` Only focus (not fade out) the element of the currently highlighted data.\n+ `'series'` Focus on all elements of the series which the currently highlighted data belongs to.",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "elements.rect.blurScope": {
        "desc": "> Since `v5.0.0`\n\n\n\nThe range of fade out when `focus` is enabled. Support the following configurations\n\n+ `'coordinateSystem'`\n+ `'series'`\n+ `'global'`",
        "uiControl": {
            "default": "'coordinateSystem'",
            "type": "string"
        }
    },
    "elements.rect.onclick": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.onmouseover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.onmouseout": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.onmousemove": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.onmousewheel": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.onmousedown": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.onmouseup": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.ondrag": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.ondragstart": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.ondragend": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.ondragenter": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.ondragleave": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.ondragover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.rect.ondrop": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle": {
        "desc": "Circle element.",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.circle.type": {
        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
        "uiControl": {
            "default": "circle",
            "type": "string"
        }
    },
    "elements.circle.id": {
        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.\n\n\n### $action(string) = 'merge'\n\nSpecify the operation should be performed to the element when calling `setOption`.\nDefault value is 'merge', other values can be 'replace' or 'remove'.\n\nOptional values:\n\n+ `'merge'`: merge the given option to existing element (if any), otherwise create a new element.\n+ `'replace'`: create a new element according to the given option and replace the existing element (if any).\n+ `'remove'`: delete the existing element (if any).",
        "uiControl": {
            "default": "undefined",
            "type": "string"
        }
    },
    "elements.circle.x": {
        "desc": "x position of element. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.circle.y": {
        "desc": "y position of element. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.circle.rotation": {
        "desc": "Degree value of rotation.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.circle.scaleX": {
        "desc": "Scale on x.",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.circle.scaleY": {
        "desc": "Scale on y.",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.circle.originX": {
        "desc": "x value of element scale and rotation origin. In pixels",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.circle.originY": {
        "desc": "y value of element scale and rotation origin. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.circle.left": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the height of its parent.\n+ `'center'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [left](~graphic.elements-circle.left) and [right](~graphic.elements-circle.right) can work.\n\nIf [left](~graphic.elements-circle.left) or [right](~graphic.elements-circle.right) is specified, positioning attributes in [shape](~graphic.elements-circle.shape) (like `x`, `cx`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.circle.right": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the height of its parent.\n+ `'center'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [left](~graphic.elements-circle.left) and [right](~graphic.elements-circle.right) can work.\n\nIf [left](~graphic.elements-circle.left) or [right](~graphic.elements-circle.right) is specified, positioning attributes in [shape](~graphic.elements-circle.shape) (like `x`, `cx`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.circle.top": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the width of its parent.\n+ `'middle'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [top](~graphic.elements-circle.top) and [bottom](~graphic.elements-circle.bottom) can work.\n\nIf [top](~graphic.elements-circle.top) or [bottom](~graphic.elements-circle.bottom) is specified, positioning attributes in [shape](~graphic.elements-circle.shape) (like `y`, `cy`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.circle.bottom": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the width of its parent.\n+ `'middle'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [top](~graphic.elements-circle.top) and [bottom](~graphic.elements-circle.bottom) can work.\n\nIf [top](~graphic.elements-circle.top) or [bottom](~graphic.elements-circle.bottom) is specified, positioning attributes in [shape](~graphic.elements-circle.shape) (like `y`, `cy`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.circle.bounding": {
        "desc": "Used to specify whether the entire transformed element (containing children if is group) is confined in its container.\n\nSee sample:\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\nOptional values:\n\n+ `'all'`: (default)\nUse the transformed bounding box of itself and its descendants to perform position calculation, which confine the entire body in the boundary of its parent.\n\n+ `'raw'`:\nOnly use the untransformed bounding box of itself (without its descentant) to perform position calculation, which is suitable when the content in the element need to be overflow its parent.",
        "uiControl": {
            "default": "'all'",
            "type": "string"
        }
    },
    "elements.circle.z": {
        "desc": "z value of the elements, determine the overlap order.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.circle.zlevel": {
        "desc": "Determine which canvas layer this element should be in.\n\nNotice: Multiple canvas layer may affect performance.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.circle.info": {
        "desc": "User defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
        "uiControl": {
            "type": "*"
        }
    },
    "elements.circle.silent": {
        "desc": "Whether response to mouse events / touch events.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.circle.invisible": {
        "desc": "Whether the element is visible.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.circle.ignore": {
        "desc": "Whether the element is totally ignored (neither render nor listen events).",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.circle.textContent": {
        "desc": "Text block attached to an element and layout based on the element by `textConfig`.\n\n\nThe props the the same as [text](option.html#graphic.elements-text).",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.circle.textConfig": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.circle.textConfig.position": {
        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
        "uiControl": {
            "default": "'inside'",
            "type": ""
        }
    },
    "elements.circle.textConfig.rotation": {
        "desc": "Rotation of `textContent`. In radian.",
        "uiControl": {
            "type": "number"
        }
    },
    "elements.circle.textConfig.layoutRect": {
        "desc": "Rect that `textContent` will be positioned.\nDefault to be the bounding box of host element.\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.circle.textConfig.offset": {
        "desc": "Offset of the `textContent`.\n\nThe difference of `offset` and `position` is that `offset` will be applied in the rotation.\n\n#### origin\n\n`origin` is relative to the bounding box of the host element.\nCan be percent value. Relative to the bounding box.\nIf `'center'` specified, it will be center of the bounding box.\n\nOnly available when position and rotation are both set.\n\n+ like `[12, 33]`\n+ or like `['50%', '50%']`\n+ 'center'",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.circle.textConfig.distance": {
        "desc": "Distance to the `layoutRect`。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.circle.textConfig.local": {
        "desc": "If `true`, it will apply host's transform.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.circle.textConfig.insideFill": {
        "desc": "`insideFill` is a color string or left empty.\n\nIf a `textContent` is `\"inside\"`, its final `fill` will be picked by this priority:\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\nIn most cases, \"auto-calculated-fill\" is white.",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.circle.textConfig.insideStroke": {
        "desc": "`insideStroke` is a color string or left empty.\n\nIf a `textContent` is `\"inside\"`, its final `stroke` will be picked by this priority:\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\nThe rule of getting \"auto-calculated-stroke\":\n\n+ If\n+ (A) the `fill` is specified in style (either in `textContent.style` or `textContent.style.rich`)\n+ or (B) needed to draw text background (either defined in `textContent.style` or `textContent.style.rich`)\n+ \"auto-calculated-stroke\" will be null.\n+ Otherwise\n+ \"auto-calculated-stroke\" will be the same as `fill` of this element if possible, or null.",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.circle.textConfig.outsideFill": {
        "desc": "`outsideFill` is a color string or left empty.\n\nIf a `textContent` is \"inside\", its final `fill` will be picked by this priority:\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.circle.textConfig.outsideStroke": {
        "desc": "`outsideStroke` is a color string or left empty.\n\nIf a `textContent` is not \"inside\", its final `stroke` will be picked by this priority:\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\nThe rule of getting \"auto-calculated-stroke\":\n\n+ If\n+ (A) the `fill` is specified in style (either in `textContent.style` or `textContent.style.rich`)\n+ or (B) needed to draw text background (either defined in `textContent.style` or `textContent.style.rich`)\n+ \"auto-calculated-stroke\" will be null.\n+ Otherwise\n+ \"auto-calculated-stroke\" will be a near white color to distinguish \"front end\" label with messy background (like other text label, line or other graphic).",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.circle.textConfig.inside": {
        "desc": "Tell echarts that I can make sure this text is inside or not.",
        "uiControl": {
            "type": "boolean"
        }
    },
    "elements.circle.cursor": {
        "desc": "The mouse style when mouse hovers on an element, the same as `cursor` property in `CSS`.",
        "uiControl": {
            "default": "'pointer'",
            "type": "enum",
            "options": "'auto','pointer','move'"
        }
    },
    "elements.circle.draggable": {
        "desc": "Can be dragged or not.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.circle.progressive": {
        "desc": "Whether use progressive render to improve performance. Usually used when number of element is too large.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.circle.shape": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.circle.shape.cx": {
        "desc": "The x value of the center of the element in the coordinate system of its parent.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.circle.shape.cy": {
        "desc": "The y value of the center of the element in the coordinate system of its parent.",
        "uiControl": {
            "default": "0",
            "type": "numbr"
        }
    },
    "elements.circle.shape.r": {
        "desc": "Outside radius.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.circle.style": {
        "desc": "More attributes in `style` (for example, [rich text](tutorial.html#Rich%20Text)), see the `style` related attributes in [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable).\n\nNotice, the attribute names of the `style` of graphic elements is derived from `zrender`, which may be different from the attribute names in `echarts label`, `echarts itemStyle`, etc., although they have the same meaning. For example:\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.circle.style.fill": {
        "desc": "Color filled in this element.",
        "uiControl": {
            "default": "'#000'",
            "type": "string"
        }
    },
    "elements.circle.style.stroke": {
        "desc": "Color of stroke.",
        "uiControl": {
            "default": "null",
            "type": "string"
        }
    },
    "elements.circle.style.lineWidth": {
        "desc": "Width of stroke.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.circle.style.shadowBlur": {
        "desc": "Width of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.circle.style.shadowOffsetX": {
        "desc": "X offset of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.circle.style.shadowOffsetY": {
        "desc": "Y offset of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.circle.style.shadowColor": {
        "desc": "color of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.circle.focus": {
        "desc": "> Since `v5.0.0`\n\n\n\nWhen it's highlighted, whether to fade out of other data to focus the highlighted. The following configurations are supported:\n\n+ `'none'` Do not fade out other data, it's by default.\n+ `'self'` Only focus (not fade out) the element of the currently highlighted data.\n+ `'series'` Focus on all elements of the series which the currently highlighted data belongs to.",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "elements.circle.blurScope": {
        "desc": "> Since `v5.0.0`\n\n\n\nThe range of fade out when `focus` is enabled. Support the following configurations\n\n+ `'coordinateSystem'`\n+ `'series'`\n+ `'global'`",
        "uiControl": {
            "default": "'coordinateSystem'",
            "type": "string"
        }
    },
    "elements.circle.onclick": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.onmouseover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.onmouseout": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.onmousemove": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.onmousewheel": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.onmousedown": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.onmouseup": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.ondrag": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.ondragstart": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.ondragend": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.ondragenter": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.ondragleave": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.ondragover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.circle.ondrop": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring": {
        "desc": "Ring element.",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.ring.type": {
        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
        "uiControl": {
            "default": "ring",
            "type": "string"
        }
    },
    "elements.ring.id": {
        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.\n\n\n### $action(string) = 'merge'\n\nSpecify the operation should be performed to the element when calling `setOption`.\nDefault value is 'merge', other values can be 'replace' or 'remove'.\n\nOptional values:\n\n+ `'merge'`: merge the given option to existing element (if any), otherwise create a new element.\n+ `'replace'`: create a new element according to the given option and replace the existing element (if any).\n+ `'remove'`: delete the existing element (if any).",
        "uiControl": {
            "default": "undefined",
            "type": "string"
        }
    },
    "elements.ring.x": {
        "desc": "x position of element. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.ring.y": {
        "desc": "y position of element. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.ring.rotation": {
        "desc": "Degree value of rotation.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.ring.scaleX": {
        "desc": "Scale on x.",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.ring.scaleY": {
        "desc": "Scale on y.",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.ring.originX": {
        "desc": "x value of element scale and rotation origin. In pixels",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.ring.originY": {
        "desc": "y value of element scale and rotation origin. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.ring.left": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the height of its parent.\n+ `'center'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [left](~graphic.elements-ring.left) and [right](~graphic.elements-ring.right) can work.\n\nIf [left](~graphic.elements-ring.left) or [right](~graphic.elements-ring.right) is specified, positioning attributes in [shape](~graphic.elements-ring.shape) (like `x`, `cx`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.ring.right": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the height of its parent.\n+ `'center'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [left](~graphic.elements-ring.left) and [right](~graphic.elements-ring.right) can work.\n\nIf [left](~graphic.elements-ring.left) or [right](~graphic.elements-ring.right) is specified, positioning attributes in [shape](~graphic.elements-ring.shape) (like `x`, `cx`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.ring.top": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the width of its parent.\n+ `'middle'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [top](~graphic.elements-ring.top) and [bottom](~graphic.elements-ring.bottom) can work.\n\nIf [top](~graphic.elements-ring.top) or [bottom](~graphic.elements-ring.bottom) is specified, positioning attributes in [shape](~graphic.elements-ring.shape) (like `y`, `cy`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.ring.bottom": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the width of its parent.\n+ `'middle'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [top](~graphic.elements-ring.top) and [bottom](~graphic.elements-ring.bottom) can work.\n\nIf [top](~graphic.elements-ring.top) or [bottom](~graphic.elements-ring.bottom) is specified, positioning attributes in [shape](~graphic.elements-ring.shape) (like `y`, `cy`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.ring.bounding": {
        "desc": "Used to specify whether the entire transformed element (containing children if is group) is confined in its container.\n\nSee sample:\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\nOptional values:\n\n+ `'all'`: (default)\nUse the transformed bounding box of itself and its descendants to perform position calculation, which confine the entire body in the boundary of its parent.\n\n+ `'raw'`:\nOnly use the untransformed bounding box of itself (without its descentant) to perform position calculation, which is suitable when the content in the element need to be overflow its parent.",
        "uiControl": {
            "default": "'all'",
            "type": "string"
        }
    },
    "elements.ring.z": {
        "desc": "z value of the elements, determine the overlap order.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.ring.zlevel": {
        "desc": "Determine which canvas layer this element should be in.\n\nNotice: Multiple canvas layer may affect performance.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.ring.info": {
        "desc": "User defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
        "uiControl": {
            "type": "*"
        }
    },
    "elements.ring.silent": {
        "desc": "Whether response to mouse events / touch events.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.ring.invisible": {
        "desc": "Whether the element is visible.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.ring.ignore": {
        "desc": "Whether the element is totally ignored (neither render nor listen events).",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.ring.textContent": {
        "desc": "Text block attached to an element and layout based on the element by `textConfig`.\n\n\nThe props the the same as [text](option.html#graphic.elements-text).",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.ring.textConfig": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.ring.textConfig.position": {
        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
        "uiControl": {
            "default": "'inside'",
            "type": ""
        }
    },
    "elements.ring.textConfig.rotation": {
        "desc": "Rotation of `textContent`. In radian.",
        "uiControl": {
            "type": "number"
        }
    },
    "elements.ring.textConfig.layoutRect": {
        "desc": "Rect that `textContent` will be positioned.\nDefault to be the bounding box of host element.\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.ring.textConfig.offset": {
        "desc": "Offset of the `textContent`.\n\nThe difference of `offset` and `position` is that `offset` will be applied in the rotation.\n\n#### origin\n\n`origin` is relative to the bounding box of the host element.\nCan be percent value. Relative to the bounding box.\nIf `'center'` specified, it will be center of the bounding box.\n\nOnly available when position and rotation are both set.\n\n+ like `[12, 33]`\n+ or like `['50%', '50%']`\n+ 'center'",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.ring.textConfig.distance": {
        "desc": "Distance to the `layoutRect`。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.ring.textConfig.local": {
        "desc": "If `true`, it will apply host's transform.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.ring.textConfig.insideFill": {
        "desc": "`insideFill` is a color string or left empty.\n\nIf a `textContent` is `\"inside\"`, its final `fill` will be picked by this priority:\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\nIn most cases, \"auto-calculated-fill\" is white.",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.ring.textConfig.insideStroke": {
        "desc": "`insideStroke` is a color string or left empty.\n\nIf a `textContent` is `\"inside\"`, its final `stroke` will be picked by this priority:\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\nThe rule of getting \"auto-calculated-stroke\":\n\n+ If\n+ (A) the `fill` is specified in style (either in `textContent.style` or `textContent.style.rich`)\n+ or (B) needed to draw text background (either defined in `textContent.style` or `textContent.style.rich`)\n+ \"auto-calculated-stroke\" will be null.\n+ Otherwise\n+ \"auto-calculated-stroke\" will be the same as `fill` of this element if possible, or null.",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.ring.textConfig.outsideFill": {
        "desc": "`outsideFill` is a color string or left empty.\n\nIf a `textContent` is \"inside\", its final `fill` will be picked by this priority:\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.ring.textConfig.outsideStroke": {
        "desc": "`outsideStroke` is a color string or left empty.\n\nIf a `textContent` is not \"inside\", its final `stroke` will be picked by this priority:\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\nThe rule of getting \"auto-calculated-stroke\":\n\n+ If\n+ (A) the `fill` is specified in style (either in `textContent.style` or `textContent.style.rich`)\n+ or (B) needed to draw text background (either defined in `textContent.style` or `textContent.style.rich`)\n+ \"auto-calculated-stroke\" will be null.\n+ Otherwise\n+ \"auto-calculated-stroke\" will be a near white color to distinguish \"front end\" label with messy background (like other text label, line or other graphic).",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.ring.textConfig.inside": {
        "desc": "Tell echarts that I can make sure this text is inside or not.",
        "uiControl": {
            "type": "boolean"
        }
    },
    "elements.ring.cursor": {
        "desc": "The mouse style when mouse hovers on an element, the same as `cursor` property in `CSS`.",
        "uiControl": {
            "default": "'pointer'",
            "type": "enum",
            "options": "'auto','pointer','move'"
        }
    },
    "elements.ring.draggable": {
        "desc": "Can be dragged or not.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.ring.progressive": {
        "desc": "Whether use progressive render to improve performance. Usually used when number of element is too large.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.ring.shape": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.ring.shape.cx": {
        "desc": "The x value of the center of the element in the coordinate system of its parent.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.ring.shape.cy": {
        "desc": "The y value of the center of the element in the coordinate system of its parent.",
        "uiControl": {
            "default": "0",
            "type": "numbr"
        }
    },
    "elements.ring.shape.r": {
        "desc": "Outside radius.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.ring.shape.r0": {
        "desc": "Inside radius.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.ring.style": {
        "desc": "More attributes in `style` (for example, [rich text](tutorial.html#Rich%20Text)), see the `style` related attributes in [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable).\n\nNotice, the attribute names of the `style` of graphic elements is derived from `zrender`, which may be different from the attribute names in `echarts label`, `echarts itemStyle`, etc., although they have the same meaning. For example:\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.ring.style.fill": {
        "desc": "Color filled in this element.",
        "uiControl": {
            "default": "'#000'",
            "type": "string"
        }
    },
    "elements.ring.style.stroke": {
        "desc": "Color of stroke.",
        "uiControl": {
            "default": "null",
            "type": "string"
        }
    },
    "elements.ring.style.lineWidth": {
        "desc": "Width of stroke.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.ring.style.shadowBlur": {
        "desc": "Width of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.ring.style.shadowOffsetX": {
        "desc": "X offset of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.ring.style.shadowOffsetY": {
        "desc": "Y offset of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.ring.style.shadowColor": {
        "desc": "color of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.ring.focus": {
        "desc": "> Since `v5.0.0`\n\n\n\nWhen it's highlighted, whether to fade out of other data to focus the highlighted. The following configurations are supported:\n\n+ `'none'` Do not fade out other data, it's by default.\n+ `'self'` Only focus (not fade out) the element of the currently highlighted data.\n+ `'series'` Focus on all elements of the series which the currently highlighted data belongs to.",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "elements.ring.blurScope": {
        "desc": "> Since `v5.0.0`\n\n\n\nThe range of fade out when `focus` is enabled. Support the following configurations\n\n+ `'coordinateSystem'`\n+ `'series'`\n+ `'global'`",
        "uiControl": {
            "default": "'coordinateSystem'",
            "type": "string"
        }
    },
    "elements.ring.onclick": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.onmouseover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.onmouseout": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.onmousemove": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.onmousewheel": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.onmousedown": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.onmouseup": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.ondrag": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.ondragstart": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.ondragend": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.ondragenter": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.ondragleave": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.ondragover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.ring.ondrop": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector": {
        "desc": "Sector element.",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.sector.type": {
        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
        "uiControl": {
            "default": "sector",
            "type": "string"
        }
    },
    "elements.sector.id": {
        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.\n\n\n### $action(string) = 'merge'\n\nSpecify the operation should be performed to the element when calling `setOption`.\nDefault value is 'merge', other values can be 'replace' or 'remove'.\n\nOptional values:\n\n+ `'merge'`: merge the given option to existing element (if any), otherwise create a new element.\n+ `'replace'`: create a new element according to the given option and replace the existing element (if any).\n+ `'remove'`: delete the existing element (if any).",
        "uiControl": {
            "default": "undefined",
            "type": "string"
        }
    },
    "elements.sector.x": {
        "desc": "x position of element. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.sector.y": {
        "desc": "y position of element. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.sector.rotation": {
        "desc": "Degree value of rotation.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.sector.scaleX": {
        "desc": "Scale on x.",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.sector.scaleY": {
        "desc": "Scale on y.",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.sector.originX": {
        "desc": "x value of element scale and rotation origin. In pixels",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.sector.originY": {
        "desc": "y value of element scale and rotation origin. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.sector.left": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the height of its parent.\n+ `'center'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [left](~graphic.elements-sector.left) and [right](~graphic.elements-sector.right) can work.\n\nIf [left](~graphic.elements-sector.left) or [right](~graphic.elements-sector.right) is specified, positioning attributes in [shape](~graphic.elements-sector.shape) (like `x`, `cx`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.sector.right": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the height of its parent.\n+ `'center'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [left](~graphic.elements-sector.left) and [right](~graphic.elements-sector.right) can work.\n\nIf [left](~graphic.elements-sector.left) or [right](~graphic.elements-sector.right) is specified, positioning attributes in [shape](~graphic.elements-sector.shape) (like `x`, `cx`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.sector.top": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the width of its parent.\n+ `'middle'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [top](~graphic.elements-sector.top) and [bottom](~graphic.elements-sector.bottom) can work.\n\nIf [top](~graphic.elements-sector.top) or [bottom](~graphic.elements-sector.bottom) is specified, positioning attributes in [shape](~graphic.elements-sector.shape) (like `y`, `cy`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.sector.bottom": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the width of its parent.\n+ `'middle'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [top](~graphic.elements-sector.top) and [bottom](~graphic.elements-sector.bottom) can work.\n\nIf [top](~graphic.elements-sector.top) or [bottom](~graphic.elements-sector.bottom) is specified, positioning attributes in [shape](~graphic.elements-sector.shape) (like `y`, `cy`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.sector.bounding": {
        "desc": "Used to specify whether the entire transformed element (containing children if is group) is confined in its container.\n\nSee sample:\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\nOptional values:\n\n+ `'all'`: (default)\nUse the transformed bounding box of itself and its descendants to perform position calculation, which confine the entire body in the boundary of its parent.\n\n+ `'raw'`:\nOnly use the untransformed bounding box of itself (without its descentant) to perform position calculation, which is suitable when the content in the element need to be overflow its parent.",
        "uiControl": {
            "default": "'all'",
            "type": "string"
        }
    },
    "elements.sector.z": {
        "desc": "z value of the elements, determine the overlap order.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.sector.zlevel": {
        "desc": "Determine which canvas layer this element should be in.\n\nNotice: Multiple canvas layer may affect performance.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.sector.info": {
        "desc": "User defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
        "uiControl": {
            "type": "*"
        }
    },
    "elements.sector.silent": {
        "desc": "Whether response to mouse events / touch events.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.sector.invisible": {
        "desc": "Whether the element is visible.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.sector.ignore": {
        "desc": "Whether the element is totally ignored (neither render nor listen events).",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.sector.textContent": {
        "desc": "Text block attached to an element and layout based on the element by `textConfig`.\n\n\nThe props the the same as [text](option.html#graphic.elements-text).",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.sector.textConfig": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.sector.textConfig.position": {
        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
        "uiControl": {
            "default": "'inside'",
            "type": ""
        }
    },
    "elements.sector.textConfig.rotation": {
        "desc": "Rotation of `textContent`. In radian.",
        "uiControl": {
            "type": "number"
        }
    },
    "elements.sector.textConfig.layoutRect": {
        "desc": "Rect that `textContent` will be positioned.\nDefault to be the bounding box of host element.\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.sector.textConfig.offset": {
        "desc": "Offset of the `textContent`.\n\nThe difference of `offset` and `position` is that `offset` will be applied in the rotation.\n\n#### origin\n\n`origin` is relative to the bounding box of the host element.\nCan be percent value. Relative to the bounding box.\nIf `'center'` specified, it will be center of the bounding box.\n\nOnly available when position and rotation are both set.\n\n+ like `[12, 33]`\n+ or like `['50%', '50%']`\n+ 'center'",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.sector.textConfig.distance": {
        "desc": "Distance to the `layoutRect`。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.sector.textConfig.local": {
        "desc": "If `true`, it will apply host's transform.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.sector.textConfig.insideFill": {
        "desc": "`insideFill` is a color string or left empty.\n\nIf a `textContent` is `\"inside\"`, its final `fill` will be picked by this priority:\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\nIn most cases, \"auto-calculated-fill\" is white.",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.sector.textConfig.insideStroke": {
        "desc": "`insideStroke` is a color string or left empty.\n\nIf a `textContent` is `\"inside\"`, its final `stroke` will be picked by this priority:\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\nThe rule of getting \"auto-calculated-stroke\":\n\n+ If\n+ (A) the `fill` is specified in style (either in `textContent.style` or `textContent.style.rich`)\n+ or (B) needed to draw text background (either defined in `textContent.style` or `textContent.style.rich`)\n+ \"auto-calculated-stroke\" will be null.\n+ Otherwise\n+ \"auto-calculated-stroke\" will be the same as `fill` of this element if possible, or null.",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.sector.textConfig.outsideFill": {
        "desc": "`outsideFill` is a color string or left empty.\n\nIf a `textContent` is \"inside\", its final `fill` will be picked by this priority:\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.sector.textConfig.outsideStroke": {
        "desc": "`outsideStroke` is a color string or left empty.\n\nIf a `textContent` is not \"inside\", its final `stroke` will be picked by this priority:\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\nThe rule of getting \"auto-calculated-stroke\":\n\n+ If\n+ (A) the `fill` is specified in style (either in `textContent.style` or `textContent.style.rich`)\n+ or (B) needed to draw text background (either defined in `textContent.style` or `textContent.style.rich`)\n+ \"auto-calculated-stroke\" will be null.\n+ Otherwise\n+ \"auto-calculated-stroke\" will be a near white color to distinguish \"front end\" label with messy background (like other text label, line or other graphic).",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.sector.textConfig.inside": {
        "desc": "Tell echarts that I can make sure this text is inside or not.",
        "uiControl": {
            "type": "boolean"
        }
    },
    "elements.sector.cursor": {
        "desc": "The mouse style when mouse hovers on an element, the same as `cursor` property in `CSS`.",
        "uiControl": {
            "default": "'pointer'",
            "type": "enum",
            "options": "'auto','pointer','move'"
        }
    },
    "elements.sector.draggable": {
        "desc": "Can be dragged or not.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.sector.progressive": {
        "desc": "Whether use progressive render to improve performance. Usually used when number of element is too large.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.sector.shape": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.sector.shape.cx": {
        "desc": "The x value of the center of the element in the coordinate system of its parent.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.sector.shape.cy": {
        "desc": "The y value of the center of the element in the coordinate system of its parent.",
        "uiControl": {
            "default": "0",
            "type": "numbr"
        }
    },
    "elements.sector.shape.r": {
        "desc": "Outside radius.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.sector.shape.r0": {
        "desc": "Inside radius.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.sector.shape.startAngle": {
        "desc": "start angle, in radian.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.sector.shape.endAngle": {
        "desc": "end angle, in radian.",
        "uiControl": {
            "default": "Math.PI * 2",
            "type": "number"
        }
    },
    "elements.sector.shape.clockwise": {
        "desc": "Whether draw clockwise.",
        "uiControl": {
            "default": "true",
            "type": "boolean"
        }
    },
    "elements.sector.style": {
        "desc": "More attributes in `style` (for example, [rich text](tutorial.html#Rich%20Text)), see the `style` related attributes in [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable).\n\nNotice, the attribute names of the `style` of graphic elements is derived from `zrender`, which may be different from the attribute names in `echarts label`, `echarts itemStyle`, etc., although they have the same meaning. For example:\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.sector.style.fill": {
        "desc": "Color filled in this element.",
        "uiControl": {
            "default": "'#000'",
            "type": "string"
        }
    },
    "elements.sector.style.stroke": {
        "desc": "Color of stroke.",
        "uiControl": {
            "default": "null",
            "type": "string"
        }
    },
    "elements.sector.style.lineWidth": {
        "desc": "Width of stroke.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.sector.style.shadowBlur": {
        "desc": "Width of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.sector.style.shadowOffsetX": {
        "desc": "X offset of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.sector.style.shadowOffsetY": {
        "desc": "Y offset of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.sector.style.shadowColor": {
        "desc": "color of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.sector.focus": {
        "desc": "> Since `v5.0.0`\n\n\n\nWhen it's highlighted, whether to fade out of other data to focus the highlighted. The following configurations are supported:\n\n+ `'none'` Do not fade out other data, it's by default.\n+ `'self'` Only focus (not fade out) the element of the currently highlighted data.\n+ `'series'` Focus on all elements of the series which the currently highlighted data belongs to.",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "elements.sector.blurScope": {
        "desc": "> Since `v5.0.0`\n\n\n\nThe range of fade out when `focus` is enabled. Support the following configurations\n\n+ `'coordinateSystem'`\n+ `'series'`\n+ `'global'`",
        "uiControl": {
            "default": "'coordinateSystem'",
            "type": "string"
        }
    },
    "elements.sector.onclick": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.onmouseover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.onmouseout": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.onmousemove": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.onmousewheel": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.onmousedown": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.onmouseup": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.ondrag": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.ondragstart": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.ondragend": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.ondragenter": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.ondragleave": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.ondragover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.sector.ondrop": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc": {
        "desc": "Arc element.",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.arc.type": {
        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
        "uiControl": {
            "default": "arc",
            "type": "string"
        }
    },
    "elements.arc.id": {
        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.\n\n\n### $action(string) = 'merge'\n\nSpecify the operation should be performed to the element when calling `setOption`.\nDefault value is 'merge', other values can be 'replace' or 'remove'.\n\nOptional values:\n\n+ `'merge'`: merge the given option to existing element (if any), otherwise create a new element.\n+ `'replace'`: create a new element according to the given option and replace the existing element (if any).\n+ `'remove'`: delete the existing element (if any).",
        "uiControl": {
            "default": "undefined",
            "type": "string"
        }
    },
    "elements.arc.x": {
        "desc": "x position of element. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.arc.y": {
        "desc": "y position of element. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.arc.rotation": {
        "desc": "Degree value of rotation.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.arc.scaleX": {
        "desc": "Scale on x.",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.arc.scaleY": {
        "desc": "Scale on y.",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.arc.originX": {
        "desc": "x value of element scale and rotation origin. In pixels",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.arc.originY": {
        "desc": "y value of element scale and rotation origin. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.arc.left": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the height of its parent.\n+ `'center'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [left](~graphic.elements-arc.left) and [right](~graphic.elements-arc.right) can work.\n\nIf [left](~graphic.elements-arc.left) or [right](~graphic.elements-arc.right) is specified, positioning attributes in [shape](~graphic.elements-arc.shape) (like `x`, `cx`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.arc.right": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the height of its parent.\n+ `'center'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [left](~graphic.elements-arc.left) and [right](~graphic.elements-arc.right) can work.\n\nIf [left](~graphic.elements-arc.left) or [right](~graphic.elements-arc.right) is specified, positioning attributes in [shape](~graphic.elements-arc.shape) (like `x`, `cx`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.arc.top": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the width of its parent.\n+ `'middle'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [top](~graphic.elements-arc.top) and [bottom](~graphic.elements-arc.bottom) can work.\n\nIf [top](~graphic.elements-arc.top) or [bottom](~graphic.elements-arc.bottom) is specified, positioning attributes in [shape](~graphic.elements-arc.shape) (like `y`, `cy`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.arc.bottom": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the width of its parent.\n+ `'middle'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [top](~graphic.elements-arc.top) and [bottom](~graphic.elements-arc.bottom) can work.\n\nIf [top](~graphic.elements-arc.top) or [bottom](~graphic.elements-arc.bottom) is specified, positioning attributes in [shape](~graphic.elements-arc.shape) (like `y`, `cy`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.arc.bounding": {
        "desc": "Used to specify whether the entire transformed element (containing children if is group) is confined in its container.\n\nSee sample:\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\nOptional values:\n\n+ `'all'`: (default)\nUse the transformed bounding box of itself and its descendants to perform position calculation, which confine the entire body in the boundary of its parent.\n\n+ `'raw'`:\nOnly use the untransformed bounding box of itself (without its descentant) to perform position calculation, which is suitable when the content in the element need to be overflow its parent.",
        "uiControl": {
            "default": "'all'",
            "type": "string"
        }
    },
    "elements.arc.z": {
        "desc": "z value of the elements, determine the overlap order.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.arc.zlevel": {
        "desc": "Determine which canvas layer this element should be in.\n\nNotice: Multiple canvas layer may affect performance.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.arc.info": {
        "desc": "User defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
        "uiControl": {
            "type": "*"
        }
    },
    "elements.arc.silent": {
        "desc": "Whether response to mouse events / touch events.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.arc.invisible": {
        "desc": "Whether the element is visible.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.arc.ignore": {
        "desc": "Whether the element is totally ignored (neither render nor listen events).",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.arc.textContent": {
        "desc": "Text block attached to an element and layout based on the element by `textConfig`.\n\n\nThe props the the same as [text](option.html#graphic.elements-text).",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.arc.textConfig": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.arc.textConfig.position": {
        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
        "uiControl": {
            "default": "'inside'",
            "type": ""
        }
    },
    "elements.arc.textConfig.rotation": {
        "desc": "Rotation of `textContent`. In radian.",
        "uiControl": {
            "type": "number"
        }
    },
    "elements.arc.textConfig.layoutRect": {
        "desc": "Rect that `textContent` will be positioned.\nDefault to be the bounding box of host element.\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.arc.textConfig.offset": {
        "desc": "Offset of the `textContent`.\n\nThe difference of `offset` and `position` is that `offset` will be applied in the rotation.\n\n#### origin\n\n`origin` is relative to the bounding box of the host element.\nCan be percent value. Relative to the bounding box.\nIf `'center'` specified, it will be center of the bounding box.\n\nOnly available when position and rotation are both set.\n\n+ like `[12, 33]`\n+ or like `['50%', '50%']`\n+ 'center'",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.arc.textConfig.distance": {
        "desc": "Distance to the `layoutRect`。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.arc.textConfig.local": {
        "desc": "If `true`, it will apply host's transform.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.arc.textConfig.insideFill": {
        "desc": "`insideFill` is a color string or left empty.\n\nIf a `textContent` is `\"inside\"`, its final `fill` will be picked by this priority:\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\nIn most cases, \"auto-calculated-fill\" is white.",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.arc.textConfig.insideStroke": {
        "desc": "`insideStroke` is a color string or left empty.\n\nIf a `textContent` is `\"inside\"`, its final `stroke` will be picked by this priority:\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\nThe rule of getting \"auto-calculated-stroke\":\n\n+ If\n+ (A) the `fill` is specified in style (either in `textContent.style` or `textContent.style.rich`)\n+ or (B) needed to draw text background (either defined in `textContent.style` or `textContent.style.rich`)\n+ \"auto-calculated-stroke\" will be null.\n+ Otherwise\n+ \"auto-calculated-stroke\" will be the same as `fill` of this element if possible, or null.",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.arc.textConfig.outsideFill": {
        "desc": "`outsideFill` is a color string or left empty.\n\nIf a `textContent` is \"inside\", its final `fill` will be picked by this priority:\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.arc.textConfig.outsideStroke": {
        "desc": "`outsideStroke` is a color string or left empty.\n\nIf a `textContent` is not \"inside\", its final `stroke` will be picked by this priority:\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\nThe rule of getting \"auto-calculated-stroke\":\n\n+ If\n+ (A) the `fill` is specified in style (either in `textContent.style` or `textContent.style.rich`)\n+ or (B) needed to draw text background (either defined in `textContent.style` or `textContent.style.rich`)\n+ \"auto-calculated-stroke\" will be null.\n+ Otherwise\n+ \"auto-calculated-stroke\" will be a near white color to distinguish \"front end\" label with messy background (like other text label, line or other graphic).",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.arc.textConfig.inside": {
        "desc": "Tell echarts that I can make sure this text is inside or not.",
        "uiControl": {
            "type": "boolean"
        }
    },
    "elements.arc.cursor": {
        "desc": "The mouse style when mouse hovers on an element, the same as `cursor` property in `CSS`.",
        "uiControl": {
            "default": "'pointer'",
            "type": "enum",
            "options": "'auto','pointer','move'"
        }
    },
    "elements.arc.draggable": {
        "desc": "Can be dragged or not.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.arc.progressive": {
        "desc": "Whether use progressive render to improve performance. Usually used when number of element is too large.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.arc.shape": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.arc.shape.cx": {
        "desc": "The x value of the center of the element in the coordinate system of its parent.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.arc.shape.cy": {
        "desc": "The y value of the center of the element in the coordinate system of its parent.",
        "uiControl": {
            "default": "0",
            "type": "numbr"
        }
    },
    "elements.arc.shape.r": {
        "desc": "Outside radius.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.arc.shape.r0": {
        "desc": "Inside radius.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.arc.shape.startAngle": {
        "desc": "start angle, in radian.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.arc.shape.endAngle": {
        "desc": "end angle, in radian.",
        "uiControl": {
            "default": "Math.PI * 2",
            "type": "number"
        }
    },
    "elements.arc.shape.clockwise": {
        "desc": "Whether draw clockwise.",
        "uiControl": {
            "default": "true",
            "type": "boolean"
        }
    },
    "elements.arc.style": {
        "desc": "More attributes in `style` (for example, [rich text](tutorial.html#Rich%20Text)), see the `style` related attributes in [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable).\n\nNotice, the attribute names of the `style` of graphic elements is derived from `zrender`, which may be different from the attribute names in `echarts label`, `echarts itemStyle`, etc., although they have the same meaning. For example:\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.arc.style.fill": {
        "desc": "Color filled in this element.",
        "uiControl": {
            "default": "null",
            "type": "string"
        }
    },
    "elements.arc.style.stroke": {
        "desc": "Color of stroke.",
        "uiControl": {
            "default": "\"#000\"",
            "type": "string"
        }
    },
    "elements.arc.style.lineWidth": {
        "desc": "Width of stroke.",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.arc.style.shadowBlur": {
        "desc": "Width of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.arc.style.shadowOffsetX": {
        "desc": "X offset of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.arc.style.shadowOffsetY": {
        "desc": "Y offset of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.arc.style.shadowColor": {
        "desc": "color of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.arc.focus": {
        "desc": "> Since `v5.0.0`\n\n\n\nWhen it's highlighted, whether to fade out of other data to focus the highlighted. The following configurations are supported:\n\n+ `'none'` Do not fade out other data, it's by default.\n+ `'self'` Only focus (not fade out) the element of the currently highlighted data.\n+ `'series'` Focus on all elements of the series which the currently highlighted data belongs to.",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "elements.arc.blurScope": {
        "desc": "> Since `v5.0.0`\n\n\n\nThe range of fade out when `focus` is enabled. Support the following configurations\n\n+ `'coordinateSystem'`\n+ `'series'`\n+ `'global'`",
        "uiControl": {
            "default": "'coordinateSystem'",
            "type": "string"
        }
    },
    "elements.arc.onclick": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.onmouseover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.onmouseout": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.onmousemove": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.onmousewheel": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.onmousedown": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.onmouseup": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.ondrag": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.ondragstart": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.ondragend": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.ondragenter": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.ondragleave": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.ondragover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.arc.ondrop": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon": {
        "desc": "Polygon element.",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.polygon.type": {
        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
        "uiControl": {
            "default": "polygon",
            "type": "string"
        }
    },
    "elements.polygon.id": {
        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.\n\n\n### $action(string) = 'merge'\n\nSpecify the operation should be performed to the element when calling `setOption`.\nDefault value is 'merge', other values can be 'replace' or 'remove'.\n\nOptional values:\n\n+ `'merge'`: merge the given option to existing element (if any), otherwise create a new element.\n+ `'replace'`: create a new element according to the given option and replace the existing element (if any).\n+ `'remove'`: delete the existing element (if any).",
        "uiControl": {
            "default": "undefined",
            "type": "string"
        }
    },
    "elements.polygon.x": {
        "desc": "x position of element. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polygon.y": {
        "desc": "y position of element. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polygon.rotation": {
        "desc": "Degree value of rotation.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polygon.scaleX": {
        "desc": "Scale on x.",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.polygon.scaleY": {
        "desc": "Scale on y.",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.polygon.originX": {
        "desc": "x value of element scale and rotation origin. In pixels",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polygon.originY": {
        "desc": "y value of element scale and rotation origin. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polygon.left": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the height of its parent.\n+ `'center'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [left](~graphic.elements-polygon.left) and [right](~graphic.elements-polygon.right) can work.\n\nIf [left](~graphic.elements-polygon.left) or [right](~graphic.elements-polygon.right) is specified, positioning attributes in [shape](~graphic.elements-polygon.shape) (like `x`, `cx`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.polygon.right": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the height of its parent.\n+ `'center'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [left](~graphic.elements-polygon.left) and [right](~graphic.elements-polygon.right) can work.\n\nIf [left](~graphic.elements-polygon.left) or [right](~graphic.elements-polygon.right) is specified, positioning attributes in [shape](~graphic.elements-polygon.shape) (like `x`, `cx`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.polygon.top": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the width of its parent.\n+ `'middle'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [top](~graphic.elements-polygon.top) and [bottom](~graphic.elements-polygon.bottom) can work.\n\nIf [top](~graphic.elements-polygon.top) or [bottom](~graphic.elements-polygon.bottom) is specified, positioning attributes in [shape](~graphic.elements-polygon.shape) (like `y`, `cy`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.polygon.bottom": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the width of its parent.\n+ `'middle'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [top](~graphic.elements-polygon.top) and [bottom](~graphic.elements-polygon.bottom) can work.\n\nIf [top](~graphic.elements-polygon.top) or [bottom](~graphic.elements-polygon.bottom) is specified, positioning attributes in [shape](~graphic.elements-polygon.shape) (like `y`, `cy`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.polygon.bounding": {
        "desc": "Used to specify whether the entire transformed element (containing children if is group) is confined in its container.\n\nSee sample:\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\nOptional values:\n\n+ `'all'`: (default)\nUse the transformed bounding box of itself and its descendants to perform position calculation, which confine the entire body in the boundary of its parent.\n\n+ `'raw'`:\nOnly use the untransformed bounding box of itself (without its descentant) to perform position calculation, which is suitable when the content in the element need to be overflow its parent.",
        "uiControl": {
            "default": "'all'",
            "type": "string"
        }
    },
    "elements.polygon.z": {
        "desc": "z value of the elements, determine the overlap order.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polygon.zlevel": {
        "desc": "Determine which canvas layer this element should be in.\n\nNotice: Multiple canvas layer may affect performance.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polygon.info": {
        "desc": "User defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
        "uiControl": {
            "type": "*"
        }
    },
    "elements.polygon.silent": {
        "desc": "Whether response to mouse events / touch events.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polygon.invisible": {
        "desc": "Whether the element is visible.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polygon.ignore": {
        "desc": "Whether the element is totally ignored (neither render nor listen events).",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polygon.textContent": {
        "desc": "Text block attached to an element and layout based on the element by `textConfig`.\n\n\nThe props the the same as [text](option.html#graphic.elements-text).",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.polygon.textConfig": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.polygon.textConfig.position": {
        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
        "uiControl": {
            "default": "'inside'",
            "type": ""
        }
    },
    "elements.polygon.textConfig.rotation": {
        "desc": "Rotation of `textContent`. In radian.",
        "uiControl": {
            "type": "number"
        }
    },
    "elements.polygon.textConfig.layoutRect": {
        "desc": "Rect that `textContent` will be positioned.\nDefault to be the bounding box of host element.\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.polygon.textConfig.offset": {
        "desc": "Offset of the `textContent`.\n\nThe difference of `offset` and `position` is that `offset` will be applied in the rotation.\n\n#### origin\n\n`origin` is relative to the bounding box of the host element.\nCan be percent value. Relative to the bounding box.\nIf `'center'` specified, it will be center of the bounding box.\n\nOnly available when position and rotation are both set.\n\n+ like `[12, 33]`\n+ or like `['50%', '50%']`\n+ 'center'",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.polygon.textConfig.distance": {
        "desc": "Distance to the `layoutRect`。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.polygon.textConfig.local": {
        "desc": "If `true`, it will apply host's transform.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polygon.textConfig.insideFill": {
        "desc": "`insideFill` is a color string or left empty.\n\nIf a `textContent` is `\"inside\"`, its final `fill` will be picked by this priority:\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\nIn most cases, \"auto-calculated-fill\" is white.",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.polygon.textConfig.insideStroke": {
        "desc": "`insideStroke` is a color string or left empty.\n\nIf a `textContent` is `\"inside\"`, its final `stroke` will be picked by this priority:\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\nThe rule of getting \"auto-calculated-stroke\":\n\n+ If\n+ (A) the `fill` is specified in style (either in `textContent.style` or `textContent.style.rich`)\n+ or (B) needed to draw text background (either defined in `textContent.style` or `textContent.style.rich`)\n+ \"auto-calculated-stroke\" will be null.\n+ Otherwise\n+ \"auto-calculated-stroke\" will be the same as `fill` of this element if possible, or null.",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.polygon.textConfig.outsideFill": {
        "desc": "`outsideFill` is a color string or left empty.\n\nIf a `textContent` is \"inside\", its final `fill` will be picked by this priority:\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.polygon.textConfig.outsideStroke": {
        "desc": "`outsideStroke` is a color string or left empty.\n\nIf a `textContent` is not \"inside\", its final `stroke` will be picked by this priority:\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\nThe rule of getting \"auto-calculated-stroke\":\n\n+ If\n+ (A) the `fill` is specified in style (either in `textContent.style` or `textContent.style.rich`)\n+ or (B) needed to draw text background (either defined in `textContent.style` or `textContent.style.rich`)\n+ \"auto-calculated-stroke\" will be null.\n+ Otherwise\n+ \"auto-calculated-stroke\" will be a near white color to distinguish \"front end\" label with messy background (like other text label, line or other graphic).",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.polygon.textConfig.inside": {
        "desc": "Tell echarts that I can make sure this text is inside or not.",
        "uiControl": {
            "type": "boolean"
        }
    },
    "elements.polygon.cursor": {
        "desc": "The mouse style when mouse hovers on an element, the same as `cursor` property in `CSS`.",
        "uiControl": {
            "default": "'pointer'",
            "type": "enum",
            "options": "'auto','pointer','move'"
        }
    },
    "elements.polygon.draggable": {
        "desc": "Can be dragged or not.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polygon.progressive": {
        "desc": "Whether use progressive render to improve performance. Usually used when number of element is too large.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polygon.shape": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.polygon.shape.points": {
        "desc": "A list of points, which defines the shape, like `[[22, 44], [44, 55], [11, 44], ...]`.",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.polygon.shape.smooth": {
        "desc": "Whether smooth the line.\n\n+ If the value is number, bezier interpolation is used, and the value specified the level of smooth, which is in the range of `[0, 1]`.\n+ If the value is `'spline'`, Catmull-Rom spline interpolation is used.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.polygon.shape.smoothConstraint": {
        "desc": "Whether prevent the smooth process cause the line out of the bounding box.\n\nOnly works when `smooth` is `number` (bezier smooth).",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polygon.style": {
        "desc": "More attributes in `style` (for example, [rich text](tutorial.html#Rich%20Text)), see the `style` related attributes in [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable).\n\nNotice, the attribute names of the `style` of graphic elements is derived from `zrender`, which may be different from the attribute names in `echarts label`, `echarts itemStyle`, etc., although they have the same meaning. For example:\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.polygon.style.fill": {
        "desc": "Color filled in this element.",
        "uiControl": {
            "default": "'#000'",
            "type": "string"
        }
    },
    "elements.polygon.style.stroke": {
        "desc": "Color of stroke.",
        "uiControl": {
            "default": "null",
            "type": "string"
        }
    },
    "elements.polygon.style.lineWidth": {
        "desc": "Width of stroke.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polygon.style.shadowBlur": {
        "desc": "Width of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.polygon.style.shadowOffsetX": {
        "desc": "X offset of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.polygon.style.shadowOffsetY": {
        "desc": "Y offset of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.polygon.style.shadowColor": {
        "desc": "color of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.polygon.focus": {
        "desc": "> Since `v5.0.0`\n\n\n\nWhen it's highlighted, whether to fade out of other data to focus the highlighted. The following configurations are supported:\n\n+ `'none'` Do not fade out other data, it's by default.\n+ `'self'` Only focus (not fade out) the element of the currently highlighted data.\n+ `'series'` Focus on all elements of the series which the currently highlighted data belongs to.",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "elements.polygon.blurScope": {
        "desc": "> Since `v5.0.0`\n\n\n\nThe range of fade out when `focus` is enabled. Support the following configurations\n\n+ `'coordinateSystem'`\n+ `'series'`\n+ `'global'`",
        "uiControl": {
            "default": "'coordinateSystem'",
            "type": "string"
        }
    },
    "elements.polygon.onclick": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.onmouseover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.onmouseout": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.onmousemove": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.onmousewheel": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.onmousedown": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.onmouseup": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.ondrag": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.ondragstart": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.ondragend": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.ondragenter": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.ondragleave": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.ondragover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polygon.ondrop": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline": {
        "desc": "Polyline element.",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.polyline.type": {
        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
        "uiControl": {
            "default": "polyline",
            "type": "string"
        }
    },
    "elements.polyline.id": {
        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.\n\n\n### $action(string) = 'merge'\n\nSpecify the operation should be performed to the element when calling `setOption`.\nDefault value is 'merge', other values can be 'replace' or 'remove'.\n\nOptional values:\n\n+ `'merge'`: merge the given option to existing element (if any), otherwise create a new element.\n+ `'replace'`: create a new element according to the given option and replace the existing element (if any).\n+ `'remove'`: delete the existing element (if any).",
        "uiControl": {
            "default": "undefined",
            "type": "string"
        }
    },
    "elements.polyline.x": {
        "desc": "x position of element. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polyline.y": {
        "desc": "y position of element. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polyline.rotation": {
        "desc": "Degree value of rotation.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polyline.scaleX": {
        "desc": "Scale on x.",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.polyline.scaleY": {
        "desc": "Scale on y.",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.polyline.originX": {
        "desc": "x value of element scale and rotation origin. In pixels",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polyline.originY": {
        "desc": "y value of element scale and rotation origin. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polyline.left": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the height of its parent.\n+ `'center'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [left](~graphic.elements-polyline.left) and [right](~graphic.elements-polyline.right) can work.\n\nIf [left](~graphic.elements-polyline.left) or [right](~graphic.elements-polyline.right) is specified, positioning attributes in [shape](~graphic.elements-polyline.shape) (like `x`, `cx`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.polyline.right": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the height of its parent.\n+ `'center'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [left](~graphic.elements-polyline.left) and [right](~graphic.elements-polyline.right) can work.\n\nIf [left](~graphic.elements-polyline.left) or [right](~graphic.elements-polyline.right) is specified, positioning attributes in [shape](~graphic.elements-polyline.shape) (like `x`, `cx`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.polyline.top": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the width of its parent.\n+ `'middle'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [top](~graphic.elements-polyline.top) and [bottom](~graphic.elements-polyline.bottom) can work.\n\nIf [top](~graphic.elements-polyline.top) or [bottom](~graphic.elements-polyline.bottom) is specified, positioning attributes in [shape](~graphic.elements-polyline.shape) (like `y`, `cy`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.polyline.bottom": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the width of its parent.\n+ `'middle'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [top](~graphic.elements-polyline.top) and [bottom](~graphic.elements-polyline.bottom) can work.\n\nIf [top](~graphic.elements-polyline.top) or [bottom](~graphic.elements-polyline.bottom) is specified, positioning attributes in [shape](~graphic.elements-polyline.shape) (like `y`, `cy`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.polyline.bounding": {
        "desc": "Used to specify whether the entire transformed element (containing children if is group) is confined in its container.\n\nSee sample:\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\nOptional values:\n\n+ `'all'`: (default)\nUse the transformed bounding box of itself and its descendants to perform position calculation, which confine the entire body in the boundary of its parent.\n\n+ `'raw'`:\nOnly use the untransformed bounding box of itself (without its descentant) to perform position calculation, which is suitable when the content in the element need to be overflow its parent.",
        "uiControl": {
            "default": "'all'",
            "type": "string"
        }
    },
    "elements.polyline.z": {
        "desc": "z value of the elements, determine the overlap order.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polyline.zlevel": {
        "desc": "Determine which canvas layer this element should be in.\n\nNotice: Multiple canvas layer may affect performance.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.polyline.info": {
        "desc": "User defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
        "uiControl": {
            "type": "*"
        }
    },
    "elements.polyline.silent": {
        "desc": "Whether response to mouse events / touch events.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polyline.invisible": {
        "desc": "Whether the element is visible.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polyline.ignore": {
        "desc": "Whether the element is totally ignored (neither render nor listen events).",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polyline.textContent": {
        "desc": "Text block attached to an element and layout based on the element by `textConfig`.\n\n\nThe props the the same as [text](option.html#graphic.elements-text).",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.polyline.textConfig": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.polyline.textConfig.position": {
        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
        "uiControl": {
            "default": "'inside'",
            "type": ""
        }
    },
    "elements.polyline.textConfig.rotation": {
        "desc": "Rotation of `textContent`. In radian.",
        "uiControl": {
            "type": "number"
        }
    },
    "elements.polyline.textConfig.layoutRect": {
        "desc": "Rect that `textContent` will be positioned.\nDefault to be the bounding box of host element.\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.polyline.textConfig.offset": {
        "desc": "Offset of the `textContent`.\n\nThe difference of `offset` and `position` is that `offset` will be applied in the rotation.\n\n#### origin\n\n`origin` is relative to the bounding box of the host element.\nCan be percent value. Relative to the bounding box.\nIf `'center'` specified, it will be center of the bounding box.\n\nOnly available when position and rotation are both set.\n\n+ like `[12, 33]`\n+ or like `['50%', '50%']`\n+ 'center'",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.polyline.textConfig.distance": {
        "desc": "Distance to the `layoutRect`。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.polyline.textConfig.local": {
        "desc": "If `true`, it will apply host's transform.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polyline.textConfig.insideFill": {
        "desc": "`insideFill` is a color string or left empty.\n\nIf a `textContent` is `\"inside\"`, its final `fill` will be picked by this priority:\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\nIn most cases, \"auto-calculated-fill\" is white.",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.polyline.textConfig.insideStroke": {
        "desc": "`insideStroke` is a color string or left empty.\n\nIf a `textContent` is `\"inside\"`, its final `stroke` will be picked by this priority:\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\nThe rule of getting \"auto-calculated-stroke\":\n\n+ If\n+ (A) the `fill` is specified in style (either in `textContent.style` or `textContent.style.rich`)\n+ or (B) needed to draw text background (either defined in `textContent.style` or `textContent.style.rich`)\n+ \"auto-calculated-stroke\" will be null.\n+ Otherwise\n+ \"auto-calculated-stroke\" will be the same as `fill` of this element if possible, or null.",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.polyline.textConfig.outsideFill": {
        "desc": "`outsideFill` is a color string or left empty.\n\nIf a `textContent` is \"inside\", its final `fill` will be picked by this priority:\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.polyline.textConfig.outsideStroke": {
        "desc": "`outsideStroke` is a color string or left empty.\n\nIf a `textContent` is not \"inside\", its final `stroke` will be picked by this priority:\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\nThe rule of getting \"auto-calculated-stroke\":\n\n+ If\n+ (A) the `fill` is specified in style (either in `textContent.style` or `textContent.style.rich`)\n+ or (B) needed to draw text background (either defined in `textContent.style` or `textContent.style.rich`)\n+ \"auto-calculated-stroke\" will be null.\n+ Otherwise\n+ \"auto-calculated-stroke\" will be a near white color to distinguish \"front end\" label with messy background (like other text label, line or other graphic).",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.polyline.textConfig.inside": {
        "desc": "Tell echarts that I can make sure this text is inside or not.",
        "uiControl": {
            "type": "boolean"
        }
    },
    "elements.polyline.cursor": {
        "desc": "The mouse style when mouse hovers on an element, the same as `cursor` property in `CSS`.",
        "uiControl": {
            "default": "'pointer'",
            "type": "enum",
            "options": "'auto','pointer','move'"
        }
    },
    "elements.polyline.draggable": {
        "desc": "Can be dragged or not.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polyline.progressive": {
        "desc": "Whether use progressive render to improve performance. Usually used when number of element is too large.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polyline.shape": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.polyline.shape.points": {
        "desc": "A list of points, which defines the shape, like `[[22, 44], [44, 55], [11, 44], ...]`.",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.polyline.shape.smooth": {
        "desc": "Whether smooth the line.\n\n+ If the value is number, bezier interpolation is used, and the value specified the level of smooth, which is in the range of `[0, 1]`.\n+ If the value is `'spline'`, Catmull-Rom spline interpolation is used.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.polyline.shape.smoothConstraint": {
        "desc": "Whether prevent the smooth process cause the line out of the bounding box.\n\nOnly works when `smooth` is `number` (bezier smooth).",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.polyline.style": {
        "desc": "More attributes in `style` (for example, [rich text](tutorial.html#Rich%20Text)), see the `style` related attributes in [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable).\n\nNotice, the attribute names of the `style` of graphic elements is derived from `zrender`, which may be different from the attribute names in `echarts label`, `echarts itemStyle`, etc., although they have the same meaning. For example:\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.polyline.style.fill": {
        "desc": "Color filled in this element.",
        "uiControl": {
            "default": "null",
            "type": "string"
        }
    },
    "elements.polyline.style.stroke": {
        "desc": "Color of stroke.",
        "uiControl": {
            "default": "\"#000\"",
            "type": "string"
        }
    },
    "elements.polyline.style.lineWidth": {
        "desc": "Width of stroke.",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.polyline.style.shadowBlur": {
        "desc": "Width of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.polyline.style.shadowOffsetX": {
        "desc": "X offset of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.polyline.style.shadowOffsetY": {
        "desc": "Y offset of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.polyline.style.shadowColor": {
        "desc": "color of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.polyline.focus": {
        "desc": "> Since `v5.0.0`\n\n\n\nWhen it's highlighted, whether to fade out of other data to focus the highlighted. The following configurations are supported:\n\n+ `'none'` Do not fade out other data, it's by default.\n+ `'self'` Only focus (not fade out) the element of the currently highlighted data.\n+ `'series'` Focus on all elements of the series which the currently highlighted data belongs to.",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "elements.polyline.blurScope": {
        "desc": "> Since `v5.0.0`\n\n\n\nThe range of fade out when `focus` is enabled. Support the following configurations\n\n+ `'coordinateSystem'`\n+ `'series'`\n+ `'global'`",
        "uiControl": {
            "default": "'coordinateSystem'",
            "type": "string"
        }
    },
    "elements.polyline.onclick": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.onmouseover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.onmouseout": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.onmousemove": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.onmousewheel": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.onmousedown": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.onmouseup": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.ondrag": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.ondragstart": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.ondragend": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.ondragenter": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.ondragleave": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.ondragover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.polyline.ondrop": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line": {
        "desc": "Line element.",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.line.type": {
        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
        "uiControl": {
            "default": "line",
            "type": "string"
        }
    },
    "elements.line.id": {
        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.\n\n\n### $action(string) = 'merge'\n\nSpecify the operation should be performed to the element when calling `setOption`.\nDefault value is 'merge', other values can be 'replace' or 'remove'.\n\nOptional values:\n\n+ `'merge'`: merge the given option to existing element (if any), otherwise create a new element.\n+ `'replace'`: create a new element according to the given option and replace the existing element (if any).\n+ `'remove'`: delete the existing element (if any).",
        "uiControl": {
            "default": "undefined",
            "type": "string"
        }
    },
    "elements.line.x": {
        "desc": "x position of element. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.line.y": {
        "desc": "y position of element. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.line.rotation": {
        "desc": "Degree value of rotation.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.line.scaleX": {
        "desc": "Scale on x.",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.line.scaleY": {
        "desc": "Scale on y.",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.line.originX": {
        "desc": "x value of element scale and rotation origin. In pixels",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.line.originY": {
        "desc": "y value of element scale and rotation origin. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.line.left": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the height of its parent.\n+ `'center'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [left](~graphic.elements-line.left) and [right](~graphic.elements-line.right) can work.\n\nIf [left](~graphic.elements-line.left) or [right](~graphic.elements-line.right) is specified, positioning attributes in [shape](~graphic.elements-line.shape) (like `x`, `cx`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.line.right": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the height of its parent.\n+ `'center'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [left](~graphic.elements-line.left) and [right](~graphic.elements-line.right) can work.\n\nIf [left](~graphic.elements-line.left) or [right](~graphic.elements-line.right) is specified, positioning attributes in [shape](~graphic.elements-line.shape) (like `x`, `cx`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.line.top": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the width of its parent.\n+ `'middle'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [top](~graphic.elements-line.top) and [bottom](~graphic.elements-line.bottom) can work.\n\nIf [top](~graphic.elements-line.top) or [bottom](~graphic.elements-line.bottom) is specified, positioning attributes in [shape](~graphic.elements-line.shape) (like `y`, `cy`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.line.bottom": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the width of its parent.\n+ `'middle'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [top](~graphic.elements-line.top) and [bottom](~graphic.elements-line.bottom) can work.\n\nIf [top](~graphic.elements-line.top) or [bottom](~graphic.elements-line.bottom) is specified, positioning attributes in [shape](~graphic.elements-line.shape) (like `y`, `cy`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.line.bounding": {
        "desc": "Used to specify whether the entire transformed element (containing children if is group) is confined in its container.\n\nSee sample:\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\nOptional values:\n\n+ `'all'`: (default)\nUse the transformed bounding box of itself and its descendants to perform position calculation, which confine the entire body in the boundary of its parent.\n\n+ `'raw'`:\nOnly use the untransformed bounding box of itself (without its descentant) to perform position calculation, which is suitable when the content in the element need to be overflow its parent.",
        "uiControl": {
            "default": "'all'",
            "type": "string"
        }
    },
    "elements.line.z": {
        "desc": "z value of the elements, determine the overlap order.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.line.zlevel": {
        "desc": "Determine which canvas layer this element should be in.\n\nNotice: Multiple canvas layer may affect performance.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.line.info": {
        "desc": "User defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
        "uiControl": {
            "type": "*"
        }
    },
    "elements.line.silent": {
        "desc": "Whether response to mouse events / touch events.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.line.invisible": {
        "desc": "Whether the element is visible.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.line.ignore": {
        "desc": "Whether the element is totally ignored (neither render nor listen events).",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.line.textContent": {
        "desc": "Text block attached to an element and layout based on the element by `textConfig`.\n\n\nThe props the the same as [text](option.html#graphic.elements-text).",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.line.textConfig": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.line.textConfig.position": {
        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
        "uiControl": {
            "default": "'inside'",
            "type": ""
        }
    },
    "elements.line.textConfig.rotation": {
        "desc": "Rotation of `textContent`. In radian.",
        "uiControl": {
            "type": "number"
        }
    },
    "elements.line.textConfig.layoutRect": {
        "desc": "Rect that `textContent` will be positioned.\nDefault to be the bounding box of host element.\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.line.textConfig.offset": {
        "desc": "Offset of the `textContent`.\n\nThe difference of `offset` and `position` is that `offset` will be applied in the rotation.\n\n#### origin\n\n`origin` is relative to the bounding box of the host element.\nCan be percent value. Relative to the bounding box.\nIf `'center'` specified, it will be center of the bounding box.\n\nOnly available when position and rotation are both set.\n\n+ like `[12, 33]`\n+ or like `['50%', '50%']`\n+ 'center'",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.line.textConfig.distance": {
        "desc": "Distance to the `layoutRect`。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.line.textConfig.local": {
        "desc": "If `true`, it will apply host's transform.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.line.textConfig.insideFill": {
        "desc": "`insideFill` is a color string or left empty.\n\nIf a `textContent` is `\"inside\"`, its final `fill` will be picked by this priority:\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\nIn most cases, \"auto-calculated-fill\" is white.",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.line.textConfig.insideStroke": {
        "desc": "`insideStroke` is a color string or left empty.\n\nIf a `textContent` is `\"inside\"`, its final `stroke` will be picked by this priority:\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\nThe rule of getting \"auto-calculated-stroke\":\n\n+ If\n+ (A) the `fill` is specified in style (either in `textContent.style` or `textContent.style.rich`)\n+ or (B) needed to draw text background (either defined in `textContent.style` or `textContent.style.rich`)\n+ \"auto-calculated-stroke\" will be null.\n+ Otherwise\n+ \"auto-calculated-stroke\" will be the same as `fill` of this element if possible, or null.",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.line.textConfig.outsideFill": {
        "desc": "`outsideFill` is a color string or left empty.\n\nIf a `textContent` is \"inside\", its final `fill` will be picked by this priority:\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.line.textConfig.outsideStroke": {
        "desc": "`outsideStroke` is a color string or left empty.\n\nIf a `textContent` is not \"inside\", its final `stroke` will be picked by this priority:\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\nThe rule of getting \"auto-calculated-stroke\":\n\n+ If\n+ (A) the `fill` is specified in style (either in `textContent.style` or `textContent.style.rich`)\n+ or (B) needed to draw text background (either defined in `textContent.style` or `textContent.style.rich`)\n+ \"auto-calculated-stroke\" will be null.\n+ Otherwise\n+ \"auto-calculated-stroke\" will be a near white color to distinguish \"front end\" label with messy background (like other text label, line or other graphic).",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.line.textConfig.inside": {
        "desc": "Tell echarts that I can make sure this text is inside or not.",
        "uiControl": {
            "type": "boolean"
        }
    },
    "elements.line.cursor": {
        "desc": "The mouse style when mouse hovers on an element, the same as `cursor` property in `CSS`.",
        "uiControl": {
            "default": "'pointer'",
            "type": "enum",
            "options": "'auto','pointer','move'"
        }
    },
    "elements.line.draggable": {
        "desc": "Can be dragged or not.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.line.progressive": {
        "desc": "Whether use progressive render to improve performance. Usually used when number of element is too large.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.line.shape": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.line.shape.x1": {
        "desc": "x value of the start point.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.line.shape.y1": {
        "desc": "y value of the start point.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.line.shape.x2": {
        "desc": "x value of the end point.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.line.shape.y2": {
        "desc": "y value of the end point.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.line.shape.percent": {
        "desc": "Specify the percentage of drawing, useful in animation.\n\nValue range: [0, 1].",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.line.style": {
        "desc": "More attributes in `style` (for example, [rich text](tutorial.html#Rich%20Text)), see the `style` related attributes in [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable).\n\nNotice, the attribute names of the `style` of graphic elements is derived from `zrender`, which may be different from the attribute names in `echarts label`, `echarts itemStyle`, etc., although they have the same meaning. For example:\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.line.style.fill": {
        "desc": "Color filled in this element.",
        "uiControl": {
            "default": "null",
            "type": "string"
        }
    },
    "elements.line.style.stroke": {
        "desc": "Color of stroke.",
        "uiControl": {
            "default": "\"#000\"",
            "type": "string"
        }
    },
    "elements.line.style.lineWidth": {
        "desc": "Width of stroke.",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.line.style.shadowBlur": {
        "desc": "Width of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.line.style.shadowOffsetX": {
        "desc": "X offset of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.line.style.shadowOffsetY": {
        "desc": "Y offset of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.line.style.shadowColor": {
        "desc": "color of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.line.focus": {
        "desc": "> Since `v5.0.0`\n\n\n\nWhen it's highlighted, whether to fade out of other data to focus the highlighted. The following configurations are supported:\n\n+ `'none'` Do not fade out other data, it's by default.\n+ `'self'` Only focus (not fade out) the element of the currently highlighted data.\n+ `'series'` Focus on all elements of the series which the currently highlighted data belongs to.",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "elements.line.blurScope": {
        "desc": "> Since `v5.0.0`\n\n\n\nThe range of fade out when `focus` is enabled. Support the following configurations\n\n+ `'coordinateSystem'`\n+ `'series'`\n+ `'global'`",
        "uiControl": {
            "default": "'coordinateSystem'",
            "type": "string"
        }
    },
    "elements.line.onclick": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.onmouseover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.onmouseout": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.onmousemove": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.onmousewheel": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.onmousedown": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.onmouseup": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.ondrag": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.ondragstart": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.ondragend": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.ondragenter": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.ondragleave": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.ondragover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.line.ondrop": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve": {
        "desc": "Quadratic bezier curve or cubic bezier curve.",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.bezierCurve.type": {
        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
        "uiControl": {
            "default": "bezierCurve",
            "type": "string"
        }
    },
    "elements.bezierCurve.id": {
        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.\n\n\n### $action(string) = 'merge'\n\nSpecify the operation should be performed to the element when calling `setOption`.\nDefault value is 'merge', other values can be 'replace' or 'remove'.\n\nOptional values:\n\n+ `'merge'`: merge the given option to existing element (if any), otherwise create a new element.\n+ `'replace'`: create a new element according to the given option and replace the existing element (if any).\n+ `'remove'`: delete the existing element (if any).",
        "uiControl": {
            "default": "undefined",
            "type": "string"
        }
    },
    "elements.bezierCurve.x": {
        "desc": "x position of element. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.y": {
        "desc": "y position of element. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.rotation": {
        "desc": "Degree value of rotation.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.scaleX": {
        "desc": "Scale on x.",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.bezierCurve.scaleY": {
        "desc": "Scale on y.",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.bezierCurve.originX": {
        "desc": "x value of element scale and rotation origin. In pixels",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.originY": {
        "desc": "y value of element scale and rotation origin. In pixels.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.left": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the height of its parent.\n+ `'center'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [left](~graphic.elements-bezierCurve.left) and [right](~graphic.elements-bezierCurve.right) can work.\n\nIf [left](~graphic.elements-bezierCurve.left) or [right](~graphic.elements-bezierCurve.right) is specified, positioning attributes in [shape](~graphic.elements-bezierCurve.shape) (like `x`, `cx`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.bezierCurve.right": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the height of its parent.\n+ `'center'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [left](~graphic.elements-bezierCurve.left) and [right](~graphic.elements-bezierCurve.right) can work.\n\nIf [left](~graphic.elements-bezierCurve.left) or [right](~graphic.elements-bezierCurve.right) is specified, positioning attributes in [shape](~graphic.elements-bezierCurve.shape) (like `x`, `cx`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.bezierCurve.top": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the width of its parent.\n+ `'middle'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [top](~graphic.elements-bezierCurve.top) and [bottom](~graphic.elements-bezierCurve.bottom) can work.\n\nIf [top](~graphic.elements-bezierCurve.top) or [bottom](~graphic.elements-bezierCurve.bottom) is specified, positioning attributes in [shape](~graphic.elements-bezierCurve.shape) (like `y`, `cy`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.bezierCurve.bottom": {
        "desc": "Specify how to be positioned in its parent.\n\nWhen the element is at the top level, the parent is the container of the chart instance.\nOtherwise, the parent is a `group` element.\n\nOptional values:\n\n+ Pixel value: For example, can be a number `30`, means `30px`.\n+ Percent value: For example, can be a string `'33%'`, means the final result should be calculated by this value and the width of its parent.\n+ `'middle'`: means position the element in the middle of according to its parent.\n\n\nOnly one between [top](~graphic.elements-bezierCurve.top) and [bottom](~graphic.elements-bezierCurve.bottom) can work.\n\nIf [top](~graphic.elements-bezierCurve.top) or [bottom](~graphic.elements-bezierCurve.bottom) is specified, positioning attributes in [shape](~graphic.elements-bezierCurve.shape) (like `y`, `cy`) will not work.",
        "uiControl": {
            "default": "undefined",
            "type": [
                "number",
                "string"
            ]
        }
    },
    "elements.bezierCurve.bounding": {
        "desc": "Used to specify whether the entire transformed element (containing children if is group) is confined in its container.\n\nSee sample:\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\nOptional values:\n\n+ `'all'`: (default)\nUse the transformed bounding box of itself and its descendants to perform position calculation, which confine the entire body in the boundary of its parent.\n\n+ `'raw'`:\nOnly use the untransformed bounding box of itself (without its descentant) to perform position calculation, which is suitable when the content in the element need to be overflow its parent.",
        "uiControl": {
            "default": "'all'",
            "type": "string"
        }
    },
    "elements.bezierCurve.z": {
        "desc": "z value of the elements, determine the overlap order.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.zlevel": {
        "desc": "Determine which canvas layer this element should be in.\n\nNotice: Multiple canvas layer may affect performance.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.info": {
        "desc": "User defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
        "uiControl": {
            "type": "*"
        }
    },
    "elements.bezierCurve.silent": {
        "desc": "Whether response to mouse events / touch events.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.bezierCurve.invisible": {
        "desc": "Whether the element is visible.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.bezierCurve.ignore": {
        "desc": "Whether the element is totally ignored (neither render nor listen events).",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.bezierCurve.textContent": {
        "desc": "Text block attached to an element and layout based on the element by `textConfig`.\n\n\nThe props the the same as [text](option.html#graphic.elements-text).",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.bezierCurve.textConfig": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.bezierCurve.textConfig.position": {
        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
        "uiControl": {
            "default": "'inside'",
            "type": ""
        }
    },
    "elements.bezierCurve.textConfig.rotation": {
        "desc": "Rotation of `textContent`. In radian.",
        "uiControl": {
            "type": "number"
        }
    },
    "elements.bezierCurve.textConfig.layoutRect": {
        "desc": "Rect that `textContent` will be positioned.\nDefault to be the bounding box of host element.\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.bezierCurve.textConfig.offset": {
        "desc": "Offset of the `textContent`.\n\nThe difference of `offset` and `position` is that `offset` will be applied in the rotation.\n\n#### origin\n\n`origin` is relative to the bounding box of the host element.\nCan be percent value. Relative to the bounding box.\nIf `'center'` specified, it will be center of the bounding box.\n\nOnly available when position and rotation are both set.\n\n+ like `[12, 33]`\n+ or like `['50%', '50%']`\n+ 'center'",
        "uiControl": {
            "type": "Array"
        }
    },
    "elements.bezierCurve.textConfig.distance": {
        "desc": "Distance to the `layoutRect`。",
        "uiControl": {
            "default": "5",
            "type": "number"
        }
    },
    "elements.bezierCurve.textConfig.local": {
        "desc": "If `true`, it will apply host's transform.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.bezierCurve.textConfig.insideFill": {
        "desc": "`insideFill` is a color string or left empty.\n\nIf a `textContent` is `\"inside\"`, its final `fill` will be picked by this priority:\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\nIn most cases, \"auto-calculated-fill\" is white.",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.bezierCurve.textConfig.insideStroke": {
        "desc": "`insideStroke` is a color string or left empty.\n\nIf a `textContent` is `\"inside\"`, its final `stroke` will be picked by this priority:\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\nThe rule of getting \"auto-calculated-stroke\":\n\n+ If\n+ (A) the `fill` is specified in style (either in `textContent.style` or `textContent.style.rich`)\n+ or (B) needed to draw text background (either defined in `textContent.style` or `textContent.style.rich`)\n+ \"auto-calculated-stroke\" will be null.\n+ Otherwise\n+ \"auto-calculated-stroke\" will be the same as `fill` of this element if possible, or null.",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.bezierCurve.textConfig.outsideFill": {
        "desc": "`outsideFill` is a color string or left empty.\n\nIf a `textContent` is \"inside\", its final `fill` will be picked by this priority:\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.bezierCurve.textConfig.outsideStroke": {
        "desc": "`outsideStroke` is a color string or left empty.\n\nIf a `textContent` is not \"inside\", its final `stroke` will be picked by this priority:\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\nThe rule of getting \"auto-calculated-stroke\":\n\n+ If\n+ (A) the `fill` is specified in style (either in `textContent.style` or `textContent.style.rich`)\n+ or (B) needed to draw text background (either defined in `textContent.style` or `textContent.style.rich`)\n+ \"auto-calculated-stroke\" will be null.\n+ Otherwise\n+ \"auto-calculated-stroke\" will be a near white color to distinguish \"front end\" label with messy background (like other text label, line or other graphic).",
        "uiControl": {
            "type": "string"
        }
    },
    "elements.bezierCurve.textConfig.inside": {
        "desc": "Tell echarts that I can make sure this text is inside or not.",
        "uiControl": {
            "type": "boolean"
        }
    },
    "elements.bezierCurve.cursor": {
        "desc": "The mouse style when mouse hovers on an element, the same as `cursor` property in `CSS`.",
        "uiControl": {
            "default": "'pointer'",
            "type": "enum",
            "options": "'auto','pointer','move'"
        }
    },
    "elements.bezierCurve.draggable": {
        "desc": "Can be dragged or not.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.bezierCurve.progressive": {
        "desc": "Whether use progressive render to improve performance. Usually used when number of element is too large.",
        "uiControl": {
            "default": "false",
            "type": "boolean"
        }
    },
    "elements.bezierCurve.shape": {
        "desc": "",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.bezierCurve.shape.x1": {
        "desc": "x value of the start point.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.shape.y1": {
        "desc": "y value of the start point.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.shape.x2": {
        "desc": "x value of the end point.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.shape.y2": {
        "desc": "y value of the end point.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.shape.cpx1": {
        "desc": "x of control point.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.shape.cpy1": {
        "desc": "y of control point.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.shape.cpx2": {
        "desc": "x of the second control point. If specified, cubic bezier is used.\n\nIf both `cpx2` and `cpy2` are not set, quatratic bezier is used.",
        "uiControl": {
            "default": "null",
            "type": "number"
        }
    },
    "elements.bezierCurve.shape.cpy2": {
        "desc": "y of the second control point. If specified, cubic bezier is used.\n\nIf both `cpx2` and `cpy2` are not set, quatratic bezier is used.",
        "uiControl": {
            "default": "null",
            "type": "number"
        }
    },
    "elements.bezierCurve.shape.percent": {
        "desc": "Specify the percentage of drawing, useful in animation.\n\nValue range: [0, 1].",
        "uiControl": {
            "default": "1",
            "type": "number"
        }
    },
    "elements.bezierCurve.style": {
        "desc": "More attributes in `style` (for example, [rich text](tutorial.html#Rich%20Text)), see the `style` related attributes in [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable).\n\nNotice, the attribute names of the `style` of graphic elements is derived from `zrender`, which may be different from the attribute names in `echarts label`, `echarts itemStyle`, etc., although they have the same meaning. For example:\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
        "uiControl": {
            "type": "Object"
        }
    },
    "elements.bezierCurve.style.fill": {
        "desc": "Color filled in this element.",
        "uiControl": {
            "default": "'#000'",
            "type": "string"
        }
    },
    "elements.bezierCurve.style.stroke": {
        "desc": "Color of stroke.",
        "uiControl": {
            "default": "null",
            "type": "string"
        }
    },
    "elements.bezierCurve.style.lineWidth": {
        "desc": "Width of stroke.",
        "uiControl": {
            "default": "0",
            "type": "number"
        }
    },
    "elements.bezierCurve.style.shadowBlur": {
        "desc": "Width of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.bezierCurve.style.shadowOffsetX": {
        "desc": "X offset of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.bezierCurve.style.shadowOffsetY": {
        "desc": "Y offset of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.bezierCurve.style.shadowColor": {
        "desc": "color of shadow.",
        "uiControl": {
            "default": "undefined",
            "type": "number"
        }
    },
    "elements.bezierCurve.focus": {
        "desc": "> Since `v5.0.0`\n\n\n\nWhen it's highlighted, whether to fade out of other data to focus the highlighted. The following configurations are supported:\n\n+ `'none'` Do not fade out other data, it's by default.\n+ `'self'` Only focus (not fade out) the element of the currently highlighted data.\n+ `'series'` Focus on all elements of the series which the currently highlighted data belongs to.",
        "uiControl": {
            "default": "'none'",
            "type": "string"
        }
    },
    "elements.bezierCurve.blurScope": {
        "desc": "> Since `v5.0.0`\n\n\n\nThe range of fade out when `focus` is enabled. Support the following configurations\n\n+ `'coordinateSystem'`\n+ `'series'`\n+ `'global'`",
        "uiControl": {
            "default": "'coordinateSystem'",
            "type": "string"
        }
    },
    "elements.bezierCurve.onclick": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.onmouseover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.onmouseout": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.onmousemove": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.onmousewheel": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.onmousedown": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.onmouseup": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.ondrag": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.ondragstart": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.ondragend": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.ondragenter": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.ondragleave": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.ondragover": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    },
    "elements.bezierCurve.ondrop": {
        "desc": "",
        "uiControl": {
            "type": "Function"
        }
    }
}