{
    "id": {
        "desc": "组件 ID。默认不指定。指定则可用于在 option 或者 API 中引用组件。\n\n"
    },
    "toolbox": {
        "desc": "使用在 toolbox 中的按钮。\n\nbrush 相关的 toolbox 按钮有：\n\n* &#39;rect&#39;：开启矩形选框选择功能。\n* &#39;polygon&#39;：开启任意形状选框选择功能。\n* &#39;lineX&#39;：开启横向选择功能。\n* &#39;lineY&#39;：开启纵向选择功能。\n* &#39;keep&#39;：切换『单选』和『多选』模式。后者可支持同时画多个选框。前者支持单击清除所有选框。\n* &#39;clear&#39;：清空所有选框。\n\n"
    },
    "brushLink": {
        "desc": "不同系列间，选中的项可以联动。\n\n参见如下效果（刷选一个 scatter，其他 scatter 以及 parallel 图都会有选中效果）：\n\nbrushLink 配置项是一个数组，内容是 seriesIndex，指定了哪些 series 可以被联动。例如可以是：\n\n* [3, 4, 5] 表示 seriesIndex 为 3, 4, 5 的 series 可以被联动。\n* &#39;all&#39; 表示所有 series 都进行 brushLink。\n* &#39;none&#39; 或 null 或 undefined 表示不启用 brushLink 功能。\n\n**注意**\n\nbrushLink 是通过 dataIndex 进行映射，所以需要保证，**联动的每个系列的 data 都是 index 对应的**。*\n\n例如：\n\n    option = {\n        brush: {\n            brushLink: [0, 1]\n        },\n        series: [\n            {\n                type: &#39;bar&#39;\n                data: [232,    4434,    545,      654]     // data 有四个项\n            },\n            {\n                type: &#39;parallel&#39;,\n                data: [[4, 5], [3, 5], [66, 33], [99, 66]] // data 同样有四个项，两个系列的 data 是对应的。\n            }\n        ]\n    };\n    \n\n"
    },
    "seriesIndex": {
        "desc": "指定哪些 series 可以被刷选，可取值为：\n\n* &#39;all&#39;: 所有 series\n* &#39;Array&#39;: series index 列表\n* &#39;number&#39;: 某个 series index\n\n"
    },
    "geoIndex": {
        "desc": "指定哪些 geo 可以被刷选。\n\n可以设置 brush 是『全局的』还是『属于坐标系的』。\n\n**全局 brush**\n\n在 echarts 实例中任意地方刷选。这是默认情况。如果没有指定为『坐标系 brush』，就是『全局 brush』。\n\n**坐标系 brush**\n\n在 指定的坐标系中刷选。选框可以跟随坐标系的缩放和平移（roam 和 dataZoom）而移动。\n\n坐标系 brush 实际更为常用，尤其是在 geo 中。\n\n通过指定 [brush.geoIndex][0] 或 [brush.xAxisIndex][1] 或 [brush.yAxisIndex][2] 来规定可以在哪些坐标系中进行刷选。\n\n这几个配置项的取值可以是：\n\n* &#39;all&#39;，表示所有\n* number，如 0，表示这个 index 所对应的坐标系。\n* Array，如 [0, 4, 2]，表示指定这些 index 所对应的坐标系。\n* &#39;none&#39; 或 null 或 undefined，表示不指定。\n\n例如：\n\n    option = {\n        geo: {\n            ...\n        },\n        brush: {\n            geoIndex: &#39;all&#39;, // 只可以在所有 geo 坐标系中刷选，也就是上面定义的 geo 组件中。\n            ...\n        }\n    };\n    \n\n例如：\n\n    option = {\n        grid: [\n            {...}, // grid 0\n            {...}  // grid 1\n        ],\n        xAxis: [\n            {gridIndex: 1, ...}, // xAxis 0，属于 grid 1。\n            {gridIndex: 0, ...}  // xAxis 1，属于 grid 0。\n        ],\n        yAxis: [\n            {gridIndex: 1, ...}, // yAxis 0，属于 grid 1。\n            {gridIndex: 0, ...}  // yAxis 1，属于 grid 0。\n        ],\n        brush: {\n            xAxisIndex: [0, 1], // 只可以在 xAxisIndex 为 `0` 和 `1` 的 xAxis 所在的直角坐标系中刷选。\n            ...\n        }\n    };\n    \n\n\n\n[0]: #brush.geoIndex\n[1]: #brush.xAxisIndex\n[2]: #brush.yAxisIndex"
    },
    "xAxisIndex": {
        "desc": "指定哪些 xAxisIndex 可以被刷选。\n\n可以设置 brush 是『全局的』还是『属于坐标系的』。\n\n**全局 brush**\n\n在 echarts 实例中任意地方刷选。这是默认情况。如果没有指定为『坐标系 brush』，就是『全局 brush』。\n\n**坐标系 brush**\n\n在 指定的坐标系中刷选。选框可以跟随坐标系的缩放和平移（roam 和 dataZoom）而移动。\n\n坐标系 brush 实际更为常用，尤其是在 geo 中。\n\n通过指定 [brush.geoIndex][0] 或 [brush.xAxisIndex][1] 或 [brush.yAxisIndex][2] 来规定可以在哪些坐标系中进行刷选。\n\n这几个配置项的取值可以是：\n\n* &#39;all&#39;，表示所有\n* number，如 0，表示这个 index 所对应的坐标系。\n* Array，如 [0, 4, 2]，表示指定这些 index 所对应的坐标系。\n* &#39;none&#39; 或 null 或 undefined，表示不指定。\n\n例如：\n\n    option = {\n        geo: {\n            ...\n        },\n        brush: {\n            geoIndex: &#39;all&#39;, // 只可以在所有 geo 坐标系中刷选，也就是上面定义的 geo 组件中。\n            ...\n        }\n    };\n    \n\n例如：\n\n    option = {\n        grid: [\n            {...}, // grid 0\n            {...}  // grid 1\n        ],\n        xAxis: [\n            {gridIndex: 1, ...}, // xAxis 0，属于 grid 1。\n            {gridIndex: 0, ...}  // xAxis 1，属于 grid 0。\n        ],\n        yAxis: [\n            {gridIndex: 1, ...}, // yAxis 0，属于 grid 1。\n            {gridIndex: 0, ...}  // yAxis 1，属于 grid 0。\n        ],\n        brush: {\n            xAxisIndex: [0, 1], // 只可以在 xAxisIndex 为 `0` 和 `1` 的 xAxis 所在的直角坐标系中刷选。\n            ...\n        }\n    };\n    \n\n\n\n[0]: #brush.geoIndex\n[1]: #brush.xAxisIndex\n[2]: #brush.yAxisIndex"
    },
    "yAxisIndex": {
        "desc": "指定哪些 yAxisIndex 可以被刷选。\n\n可以设置 brush 是『全局的』还是『属于坐标系的』。\n\n**全局 brush**\n\n在 echarts 实例中任意地方刷选。这是默认情况。如果没有指定为『坐标系 brush』，就是『全局 brush』。\n\n**坐标系 brush**\n\n在 指定的坐标系中刷选。选框可以跟随坐标系的缩放和平移（roam 和 dataZoom）而移动。\n\n坐标系 brush 实际更为常用，尤其是在 geo 中。\n\n通过指定 [brush.geoIndex][0] 或 [brush.xAxisIndex][1] 或 [brush.yAxisIndex][2] 来规定可以在哪些坐标系中进行刷选。\n\n这几个配置项的取值可以是：\n\n* &#39;all&#39;，表示所有\n* number，如 0，表示这个 index 所对应的坐标系。\n* Array，如 [0, 4, 2]，表示指定这些 index 所对应的坐标系。\n* &#39;none&#39; 或 null 或 undefined，表示不指定。\n\n例如：\n\n    option = {\n        geo: {\n            ...\n        },\n        brush: {\n            geoIndex: &#39;all&#39;, // 只可以在所有 geo 坐标系中刷选，也就是上面定义的 geo 组件中。\n            ...\n        }\n    };\n    \n\n例如：\n\n    option = {\n        grid: [\n            {...}, // grid 0\n            {...}  // grid 1\n        ],\n        xAxis: [\n            {gridIndex: 1, ...}, // xAxis 0，属于 grid 1。\n            {gridIndex: 0, ...}  // xAxis 1，属于 grid 0。\n        ],\n        yAxis: [\n            {gridIndex: 1, ...}, // yAxis 0，属于 grid 1。\n            {gridIndex: 0, ...}  // yAxis 1，属于 grid 0。\n        ],\n        brush: {\n            xAxisIndex: [0, 1], // 只可以在 xAxisIndex 为 `0` 和 `1` 的 xAxis 所在的直角坐标系中刷选。\n            ...\n        }\n    };\n    \n\n\n\n[0]: #brush.geoIndex\n[1]: #brush.xAxisIndex\n[2]: #brush.yAxisIndex"
    },
    "brushType": {
        "desc": "默认的刷子类型。\n\n* &#39;rect&#39;：矩形选框。\n* &#39;polygon&#39;：任意形状选框。\n* &#39;lineX&#39;：横向选择。\n* &#39;lineY&#39;：纵向选择。\n\n"
    },
    "brushMode": {
        "desc": "默认的刷子的模式。可取值为：\n\n* &#39;single&#39;：单选。\n* &#39;multiple&#39;：多选。\n\n"
    },
    "transformable": {
        "desc": "已经选好的选框是否可以被调整形状或平移。\n\n"
    },
    "brushStyle": {
        "desc": "选框的默认样式，值为：\n\n    {\n        borderWidth: 1,\n        color: &#39;rgba(120,140,180,0.3)&#39;,\n        borderColor: &#39;rgba(120,140,180,0.8)&#39;\n    },\n    \n\n"
    },
    "throttleType": {
        "desc": "默认情况，刷选或者移动选区的时候，会不断得发 brushSelected 事件，从而告诉外界选中的内容。\n\n但是频繁的事件可能导致性能问题，或者动画效果很差。所以 brush 组件提供了 [brush.throttleType][0]，[brush.throttleDelay][1] 来解决这个问题。\n\nthrottleType 取值可以是：\n\n* &#39;debounce&#39;：表示只有停止动作了（即一段时间没有操作了），才会触发事件。时间阈值由 [brush.throttleDelay][1] 指定。\n* &#39;fixRate&#39;：表示按照一定的频率触发事件，时间间隔由 [brush.throttleDelay][1] 指定。\n\n\n\n[0]: #brush.throttleType\n[1]: #brush.throttleDelay"
    },
    "throttleDelay": {
        "desc": "默认为 0 表示不开启 throttle。\n\n默认情况，刷选或者移动选区的时候，会不断得发 brushSelected 事件，从而告诉外界选中的内容。\n\n但是频繁的事件可能导致性能问题，或者动画效果很差。所以 brush 组件提供了 [brush.throttleType][0]，[brush.throttleDelay][1] 来解决这个问题。\n\nthrottleType 取值可以是：\n\n* &#39;debounce&#39;：表示只有停止动作了（即一段时间没有操作了），才会触发事件。时间阈值由 [brush.throttleDelay][1] 指定。\n* &#39;fixRate&#39;：表示按照一定的频率触发事件，时间间隔由 [brush.throttleDelay][1] 指定。\n\n\n\n[0]: #brush.throttleType\n[1]: #brush.throttleDelay"
    },
    "removeOnClick": {
        "desc": "在 [brush.brushMode][0] 为 &#39;single&#39; 的情况下，是否支持『单击清除所有选框』。\n\n\n\n[0]: #brush.brushMode"
    },
    "inBrush": {
        "desc": "定义 **在选中范围中** 的视觉元素。\n\n可选的视觉元素有：\n\n* symbol: 图元的图形类别。\n* symbolSize: 图元的大小。\n* color: 图元的颜色。\n* colorAlpha: 图元的颜色的透明度。\n* opacity: 图元以及其附属物（如文字标签）的透明度。\n* colorLightness: 颜色的明暗度，参见 [HSL][0]。\n* colorSaturation: 颜色的饱和度，参见 [HSL][0]。\n* colorHue: 颜色的色调，参见 [HSL][0]。\n\n大多数情况下，inBrush 可以不指定，维持本来的视觉配置。\n\n\n\n[0]: https://en.wikipedia.org/wiki/HSL_and_HSV"
    },
    "outOfBrush": {
        "desc": "定义 **在选中范围外** 的视觉元素。\n\n可选的视觉元素有：\n\n* symbol: 图元的图形类别。\n* symbolSize: 图元的大小。\n* color: 图元的颜色。\n* colorAlpha: 图元的颜色的透明度。\n* opacity: 图元以及其附属物（如文字标签）的透明度。\n* colorLightness: 颜色的明暗度，参见 [HSL][0]。\n* colorSaturation: 颜色的饱和度，参见 [HSL][0]。\n* colorHue: 颜色的色调，参见 [HSL][0]。\n\n**注意**，如果 outOfBrush 没有指定，默认会设置 color: &#39;#ddd&#39;，如果你不想要这个color，比如可以 换成：\n\n    brush: {\n        ...,\n        outOfBrush: {\n            colorAlpha: 0.1\n        }\n    }\n    \n\n\n\n[0]: https://en.wikipedia.org/wiki/HSL_and_HSV"
    },
    "z": {
        "desc": "brush 选框的 z-index。当有和不想管组件有不正确的重叠时，可以进行调整。\n\n"
    }
}