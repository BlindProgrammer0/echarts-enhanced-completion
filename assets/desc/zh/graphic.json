[
    {
        "name": "id",
        "type": "string",
        "desc": "组件 ID。默认不指定。指定则可用于在 option 或者 API 中引用组件。",
        "children": []
    },
    {
        "name": "elements",
        "type": "Array",
        "desc": "里面是所有图形元素的集合。\n\n注意：graphic 的标准写法是：\n\n```javascript\n{\ngraphic: {\nelements: [\n{type: 'rect', ...}, {type: 'circle', ...}, ...\n]\n}\n}\n```\n\n但是我们常常可以用简写：\n\n```javascript\n{\ngraphic: {\ntype: 'rect',\n...\n}\n}\n```\n\n或者：\n```javascript\n{\ngraphic: [\n{type: 'rect', ...}, {type: 'circle', ...}, ...\n]\n}\n```",
        "children": []
    },
    {
        "name": "elements.group",
        "type": "Object",
        "desc": "group 是唯一的可以有子节点的容器。group 可以用来整体定位一组图形元素。",
        "children": [
            {
                "name": "type",
                "type": "string",
                "default": "group",
                "desc": "用 setOption 首次设定图形元素时必须指定。\n可取值：\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
                "children": []
            },
            {
                "name": "id",
                "type": "string",
                "default": "undefined",
                "desc": "id 用于在更新或删除图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\n\n\n### $action(string) = 'merge'\n\nsetOption 时指定本次对该图形元素的操作行为。\n\n可取值：\n+ `'merge'`：如果已有元素，则新的配置项和已有的设定进行 merge。如果没有则新建。\n+ `'replace'`：如果已有元素，删除之，新建元素替代之。\n+ `'remove'`：删除元素。",
                "children": []
            },
            {
                "name": "x",
                "type": "number",
                "default": "0",
                "desc": "元素的 x 像素位置。",
                "children": []
            },
            {
                "name": "y",
                "type": "number",
                "default": "0",
                "desc": "元素的 y 像素位置。",
                "children": []
            },
            {
                "name": "rotation",
                "type": "number",
                "default": "0",
                "desc": "元素的旋转",
                "children": []
            },
            {
                "name": "scaleX",
                "type": "number",
                "default": "1",
                "desc": "元素在 x 方向上的缩放。",
                "children": []
            },
            {
                "name": "scaleY",
                "type": "number",
                "default": "1",
                "desc": "元素在 y 方向上的缩放。",
                "children": []
            },
            {
                "name": "originX",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 x 像素位置。",
                "children": []
            },
            {
                "name": "originY",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 y 像素位置。",
                "children": []
            },
            {
                "name": "left",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-group.left) 和 [right](~graphic.elements-group.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-group.left) 或 [right](~graphic.elements-group.right)，则 [shape](~graphic.elements-group.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "right",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-group.left) 和 [right](~graphic.elements-group.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-group.left) 或 [right](~graphic.elements-group.right)，则 [shape](~graphic.elements-group.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "top",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-group.top) 和 [bottom](~graphic.elements-group.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-group.top) 或 [bottom](~graphic.elements-group.bottom)，则 [shape](~graphic.elements-group.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bottom",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-group.top) 和 [bottom](~graphic.elements-group.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-group.top) 或 [bottom](~graphic.elements-group.bottom)，则 [shape](~graphic.elements-group.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bounding",
                "type": "string",
                "default": "'all'",
                "desc": "决定此图形元素在定位时，对自身的包围盒计算方式。\n\n参见例子：\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\n可取值：\n\n+ `'all'`：（默认）\n表示用自身以及子节点整体的经过 transform 后的包围盒进行定位。\n这种方式易于使整体都限制在父元素范围中。\n\n+ `'raw'`：\n表示仅仅用自身（不包括子节点）的没经过 tranform 的包围盒进行定位。\n这种方式易于内容超出父元素范围的定位方式。",
                "children": []
            },
            {
                "name": "z",
                "type": "number",
                "default": "0",
                "desc": "z 方向的高度，决定层叠关系。",
                "children": []
            },
            {
                "name": "zlevel",
                "type": "number",
                "default": "0",
                "desc": "决定此元素绘制在哪个 canvas 层中。注意，越多 canvas 层会占用越多资源。",
                "children": []
            },
            {
                "name": "info",
                "type": "*",
                "desc": "用户定义的任意数据，可以在 event listener 中访问，如：\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                "children": []
            },
            {
                "name": "silent",
                "type": "boolean",
                "default": "false",
                "desc": "是否不响应鼠标以及触摸事件。",
                "children": []
            },
            {
                "name": "invisible",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否可见。",
                "children": []
            },
            {
                "name": "ignore",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否完全被忽略（既不渲染，也不响应事件）。",
                "children": []
            },
            {
                "name": "textContent",
                "type": "Object",
                "desc": "这是一个文本定义，附着在一个节点上，会依据 `textConfig` 配置，相对于节点布局。\n\n\n里面的属性同于 [text](option.html#graphic.elements-text)。",
                "children": []
            },
            {
                "name": "textConfig",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "position",
                        "type": "",
                        "default": "'inside'",
                        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "desc": "`textContent` 的旋转弧度。",
                        "children": []
                    },
                    {
                        "name": "layoutRect",
                        "type": "Object",
                        "desc": "`textContent` 根据此矩形来布局位置。\n默认是节点的包围盒。\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
                        "children": []
                    },
                    {
                        "name": "offset",
                        "type": "Array",
                        "desc": "`textContent` 的偏移。\n\n`offset` 和 `position` 的区别是，`offset` 是旋转（rotation）后计算。\n\n#### origin\n\n`origin` 相对于节点的包围盒。\n可以是百分数。\n如果指定为 `'center'`，则定位在包围盒中心。\n\n只有当 `position` and `rotation` 都设置时，生效。\n\n+ 如 `[12, 33]`\n+ 或如 `['50%', '50%']`\n+ 'center'",
                        "children": []
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "default": "5",
                        "desc": "距离 `layoutRect` 的距离。",
                        "children": []
                    },
                    {
                        "name": "local",
                        "type": "boolean",
                        "default": "false",
                        "desc": "如果 `true` 的话，会采用节点的 transform。",
                        "children": []
                    },
                    {
                        "name": "insideFill",
                        "type": "string",
                        "desc": "`insideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\n在绝大多数场景下，\"auto-calculated-fill\" 是白色。",
                        "children": []
                    },
                    {
                        "name": "insideStroke",
                        "type": "string",
                        "desc": "`insideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会和节点的 `fill` 相同，如果 `fill` 没有的话则为 `null`。",
                        "children": []
                    },
                    {
                        "name": "outsideFill",
                        "type": "string",
                        "desc": "`outsideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 \"inside\"，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
                        "children": []
                    },
                    {
                        "name": "outsideStroke",
                        "type": "string",
                        "desc": "`outsideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 不是 \"inside\"，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会为一个近似于白色的颜色，来区别于背景。",
                        "children": []
                    },
                    {
                        "name": "inside",
                        "type": "boolean",
                        "desc": "如果确定文本是在节点中的话，则此可设置为 `true`，避免 echarts 额外猜测。",
                        "children": []
                    }
                ]
            },
            {
                "name": "cursor",
                "type": "enum",
                "desc": "鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 `cursor`。",
                "children": [],
                "options": "'auto','pointer','move'"
            },
            {
                "name": "draggable",
                "type": "boolean",
                "default": "false",
                "desc": "图形元素是否可以被拖拽。",
                "children": []
            },
            {
                "name": "progressive",
                "type": "boolean",
                "default": "false",
                "desc": "是否渐进式渲染。当图形元素过多时才使用。",
                "children": []
            },
            {
                "name": "width",
                "type": "number",
                "default": "0",
                "desc": "用于描述此 `group` 的宽。\n\n这个宽只用于给子节点定位。\n\n即便当宽度为零的时候，子节点也可以使用 `left: 'center'` 相对于父节点水平居中。",
                "children": []
            },
            {
                "name": "height",
                "type": "number",
                "default": "0",
                "desc": "用于描述此 `group` 的高。\n\n这个高只用于给子节点定位。\n\n即便当高度为零的时候，子节点也可以使用 `top: 'middle'` 相对于父节点垂直居中。",
                "children": []
            },
            {
                "name": "diffChildrenByName",
                "type": "boolean",
                "default": "false",
                "desc": "在 [自定义系列](~series-custom) 中，当 `diffChildrenByName: true` 时，对于 [renderItem](~series-custom.renderItem) 返回值中的每一个 [group](~graphic.elements-group)，会根据其 [children](~graphic.elements-group.children) 中每个图形元素的 [name](~graphic.elements-polygon.name) 属性进行 \"diff\"。在这里，\"diff\" 的意思是，重绘的时候，在已存在的图形元素和新的图形元素之间建立对应关系（依据 `name` 是否相同），从如果数据有更新，能够形成的过渡动画。\n\n但是注意，这会有性能开销。如果数据量较大，不要开启这个功能。",
                "children": []
            },
            {
                "name": "children",
                "type": "Array",
                "desc": "子节点列表，其中项都是一个图形元素定义。",
                "children": []
            },
            {
                "name": "type",
                "type": "string",
                "default": "group",
                "desc": "用 setOption 首次设定图形元素时必须指定。\n可取值：\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
                "children": []
            },
            {
                "name": "id",
                "type": "string",
                "default": "undefined",
                "desc": "id 用于在更新或删除图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\n\n\n### $action(string) = 'merge'\n\nsetOption 时指定本次对该图形元素的操作行为。\n\n可取值：\n+ `'merge'`：如果已有元素，则新的配置项和已有的设定进行 merge。如果没有则新建。\n+ `'replace'`：如果已有元素，删除之，新建元素替代之。\n+ `'remove'`：删除元素。",
                "children": []
            },
            {
                "name": "x",
                "type": "number",
                "default": "0",
                "desc": "元素的 x 像素位置。",
                "children": []
            },
            {
                "name": "y",
                "type": "number",
                "default": "0",
                "desc": "元素的 y 像素位置。",
                "children": []
            },
            {
                "name": "rotation",
                "type": "number",
                "default": "0",
                "desc": "元素的旋转",
                "children": []
            },
            {
                "name": "scaleX",
                "type": "number",
                "default": "1",
                "desc": "元素在 x 方向上的缩放。",
                "children": []
            },
            {
                "name": "scaleY",
                "type": "number",
                "default": "1",
                "desc": "元素在 y 方向上的缩放。",
                "children": []
            },
            {
                "name": "originX",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 x 像素位置。",
                "children": []
            },
            {
                "name": "originY",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 y 像素位置。",
                "children": []
            },
            {
                "name": "left",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-group.left) 和 [right](~graphic.elements-group.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-group.left) 或 [right](~graphic.elements-group.right)，则 [shape](~graphic.elements-group.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "right",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-group.left) 和 [right](~graphic.elements-group.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-group.left) 或 [right](~graphic.elements-group.right)，则 [shape](~graphic.elements-group.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "top",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-group.top) 和 [bottom](~graphic.elements-group.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-group.top) 或 [bottom](~graphic.elements-group.bottom)，则 [shape](~graphic.elements-group.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bottom",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-group.top) 和 [bottom](~graphic.elements-group.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-group.top) 或 [bottom](~graphic.elements-group.bottom)，则 [shape](~graphic.elements-group.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bounding",
                "type": "string",
                "default": "'all'",
                "desc": "决定此图形元素在定位时，对自身的包围盒计算方式。\n\n参见例子：\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\n可取值：\n\n+ `'all'`：（默认）\n表示用自身以及子节点整体的经过 transform 后的包围盒进行定位。\n这种方式易于使整体都限制在父元素范围中。\n\n+ `'raw'`：\n表示仅仅用自身（不包括子节点）的没经过 tranform 的包围盒进行定位。\n这种方式易于内容超出父元素范围的定位方式。",
                "children": []
            },
            {
                "name": "z",
                "type": "number",
                "default": "0",
                "desc": "z 方向的高度，决定层叠关系。",
                "children": []
            },
            {
                "name": "zlevel",
                "type": "number",
                "default": "0",
                "desc": "决定此元素绘制在哪个 canvas 层中。注意，越多 canvas 层会占用越多资源。",
                "children": []
            },
            {
                "name": "info",
                "type": "*",
                "desc": "用户定义的任意数据，可以在 event listener 中访问，如：\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                "children": []
            },
            {
                "name": "silent",
                "type": "boolean",
                "default": "false",
                "desc": "是否不响应鼠标以及触摸事件。",
                "children": []
            },
            {
                "name": "invisible",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否可见。",
                "children": []
            },
            {
                "name": "ignore",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否完全被忽略（既不渲染，也不响应事件）。",
                "children": []
            },
            {
                "name": "textContent",
                "type": "Object",
                "desc": "这是一个文本定义，附着在一个节点上，会依据 `textConfig` 配置，相对于节点布局。\n\n\n里面的属性同于 [text](option.html#graphic.elements-text)。",
                "children": []
            },
            {
                "name": "textConfig",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "position",
                        "type": "",
                        "default": "'inside'",
                        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "desc": "`textContent` 的旋转弧度。",
                        "children": []
                    },
                    {
                        "name": "layoutRect",
                        "type": "Object",
                        "desc": "`textContent` 根据此矩形来布局位置。\n默认是节点的包围盒。\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
                        "children": []
                    },
                    {
                        "name": "offset",
                        "type": "Array",
                        "desc": "`textContent` 的偏移。\n\n`offset` 和 `position` 的区别是，`offset` 是旋转（rotation）后计算。\n\n#### origin\n\n`origin` 相对于节点的包围盒。\n可以是百分数。\n如果指定为 `'center'`，则定位在包围盒中心。\n\n只有当 `position` and `rotation` 都设置时，生效。\n\n+ 如 `[12, 33]`\n+ 或如 `['50%', '50%']`\n+ 'center'",
                        "children": []
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "default": "5",
                        "desc": "距离 `layoutRect` 的距离。",
                        "children": []
                    },
                    {
                        "name": "local",
                        "type": "boolean",
                        "default": "false",
                        "desc": "如果 `true` 的话，会采用节点的 transform。",
                        "children": []
                    },
                    {
                        "name": "insideFill",
                        "type": "string",
                        "desc": "`insideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\n在绝大多数场景下，\"auto-calculated-fill\" 是白色。",
                        "children": []
                    },
                    {
                        "name": "insideStroke",
                        "type": "string",
                        "desc": "`insideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会和节点的 `fill` 相同，如果 `fill` 没有的话则为 `null`。",
                        "children": []
                    },
                    {
                        "name": "outsideFill",
                        "type": "string",
                        "desc": "`outsideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 \"inside\"，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
                        "children": []
                    },
                    {
                        "name": "outsideStroke",
                        "type": "string",
                        "desc": "`outsideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 不是 \"inside\"，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会为一个近似于白色的颜色，来区别于背景。",
                        "children": []
                    },
                    {
                        "name": "inside",
                        "type": "boolean",
                        "desc": "如果确定文本是在节点中的话，则此可设置为 `true`，避免 echarts 额外猜测。",
                        "children": []
                    }
                ]
            },
            {
                "name": "cursor",
                "type": "enum",
                "desc": "鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 `cursor`。",
                "children": [],
                "options": "'auto','pointer','move'"
            },
            {
                "name": "draggable",
                "type": "boolean",
                "default": "false",
                "desc": "图形元素是否可以被拖拽。",
                "children": []
            },
            {
                "name": "progressive",
                "type": "boolean",
                "default": "false",
                "desc": "是否渐进式渲染。当图形元素过多时才使用。",
                "children": []
            },
            {
                "name": "onclick",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseover",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseout",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousemove",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousewheel",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousedown",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseup",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondrag",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragstart",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragend",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragenter",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragleave",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragover",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondrop",
                "type": "Function",
                "desc": "",
                "children": []
            }
        ]
    },
    {
        "name": "elements.image",
        "type": "Object",
        "desc": "",
        "children": [
            {
                "name": "type",
                "type": "string",
                "default": "image",
                "desc": "用 setOption 首次设定图形元素时必须指定。\n可取值：\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
                "children": []
            },
            {
                "name": "id",
                "type": "string",
                "default": "undefined",
                "desc": "id 用于在更新或删除图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\n\n\n### $action(string) = 'merge'\n\nsetOption 时指定本次对该图形元素的操作行为。\n\n可取值：\n+ `'merge'`：如果已有元素，则新的配置项和已有的设定进行 merge。如果没有则新建。\n+ `'replace'`：如果已有元素，删除之，新建元素替代之。\n+ `'remove'`：删除元素。",
                "children": []
            },
            {
                "name": "x",
                "type": "number",
                "default": "0",
                "desc": "元素的 x 像素位置。",
                "children": []
            },
            {
                "name": "y",
                "type": "number",
                "default": "0",
                "desc": "元素的 y 像素位置。",
                "children": []
            },
            {
                "name": "rotation",
                "type": "number",
                "default": "0",
                "desc": "元素的旋转",
                "children": []
            },
            {
                "name": "scaleX",
                "type": "number",
                "default": "1",
                "desc": "元素在 x 方向上的缩放。",
                "children": []
            },
            {
                "name": "scaleY",
                "type": "number",
                "default": "1",
                "desc": "元素在 y 方向上的缩放。",
                "children": []
            },
            {
                "name": "originX",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 x 像素位置。",
                "children": []
            },
            {
                "name": "originY",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 y 像素位置。",
                "children": []
            },
            {
                "name": "left",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-image.left) 和 [right](~graphic.elements-image.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-image.left) 或 [right](~graphic.elements-image.right)，则 [shape](~graphic.elements-image.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "right",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-image.left) 和 [right](~graphic.elements-image.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-image.left) 或 [right](~graphic.elements-image.right)，则 [shape](~graphic.elements-image.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "top",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-image.top) 和 [bottom](~graphic.elements-image.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-image.top) 或 [bottom](~graphic.elements-image.bottom)，则 [shape](~graphic.elements-image.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bottom",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-image.top) 和 [bottom](~graphic.elements-image.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-image.top) 或 [bottom](~graphic.elements-image.bottom)，则 [shape](~graphic.elements-image.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bounding",
                "type": "string",
                "default": "'all'",
                "desc": "决定此图形元素在定位时，对自身的包围盒计算方式。\n\n参见例子：\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\n可取值：\n\n+ `'all'`：（默认）\n表示用自身以及子节点整体的经过 transform 后的包围盒进行定位。\n这种方式易于使整体都限制在父元素范围中。\n\n+ `'raw'`：\n表示仅仅用自身（不包括子节点）的没经过 tranform 的包围盒进行定位。\n这种方式易于内容超出父元素范围的定位方式。",
                "children": []
            },
            {
                "name": "z",
                "type": "number",
                "default": "0",
                "desc": "z 方向的高度，决定层叠关系。",
                "children": []
            },
            {
                "name": "zlevel",
                "type": "number",
                "default": "0",
                "desc": "决定此元素绘制在哪个 canvas 层中。注意，越多 canvas 层会占用越多资源。",
                "children": []
            },
            {
                "name": "info",
                "type": "*",
                "desc": "用户定义的任意数据，可以在 event listener 中访问，如：\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                "children": []
            },
            {
                "name": "silent",
                "type": "boolean",
                "default": "false",
                "desc": "是否不响应鼠标以及触摸事件。",
                "children": []
            },
            {
                "name": "invisible",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否可见。",
                "children": []
            },
            {
                "name": "ignore",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否完全被忽略（既不渲染，也不响应事件）。",
                "children": []
            },
            {
                "name": "textContent",
                "type": "Object",
                "desc": "这是一个文本定义，附着在一个节点上，会依据 `textConfig` 配置，相对于节点布局。\n\n\n里面的属性同于 [text](option.html#graphic.elements-text)。",
                "children": []
            },
            {
                "name": "textConfig",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "position",
                        "type": "",
                        "default": "'inside'",
                        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "desc": "`textContent` 的旋转弧度。",
                        "children": []
                    },
                    {
                        "name": "layoutRect",
                        "type": "Object",
                        "desc": "`textContent` 根据此矩形来布局位置。\n默认是节点的包围盒。\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
                        "children": []
                    },
                    {
                        "name": "offset",
                        "type": "Array",
                        "desc": "`textContent` 的偏移。\n\n`offset` 和 `position` 的区别是，`offset` 是旋转（rotation）后计算。\n\n#### origin\n\n`origin` 相对于节点的包围盒。\n可以是百分数。\n如果指定为 `'center'`，则定位在包围盒中心。\n\n只有当 `position` and `rotation` 都设置时，生效。\n\n+ 如 `[12, 33]`\n+ 或如 `['50%', '50%']`\n+ 'center'",
                        "children": []
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "default": "5",
                        "desc": "距离 `layoutRect` 的距离。",
                        "children": []
                    },
                    {
                        "name": "local",
                        "type": "boolean",
                        "default": "false",
                        "desc": "如果 `true` 的话，会采用节点的 transform。",
                        "children": []
                    },
                    {
                        "name": "insideFill",
                        "type": "string",
                        "desc": "`insideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\n在绝大多数场景下，\"auto-calculated-fill\" 是白色。",
                        "children": []
                    },
                    {
                        "name": "insideStroke",
                        "type": "string",
                        "desc": "`insideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会和节点的 `fill` 相同，如果 `fill` 没有的话则为 `null`。",
                        "children": []
                    },
                    {
                        "name": "outsideFill",
                        "type": "string",
                        "desc": "`outsideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 \"inside\"，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
                        "children": []
                    },
                    {
                        "name": "outsideStroke",
                        "type": "string",
                        "desc": "`outsideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 不是 \"inside\"，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会为一个近似于白色的颜色，来区别于背景。",
                        "children": []
                    },
                    {
                        "name": "inside",
                        "type": "boolean",
                        "desc": "如果确定文本是在节点中的话，则此可设置为 `true`，避免 echarts 额外猜测。",
                        "children": []
                    }
                ]
            },
            {
                "name": "cursor",
                "type": "enum",
                "desc": "鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 `cursor`。",
                "children": [],
                "options": "'auto','pointer','move'"
            },
            {
                "name": "draggable",
                "type": "boolean",
                "default": "false",
                "desc": "图形元素是否可以被拖拽。",
                "children": []
            },
            {
                "name": "progressive",
                "type": "boolean",
                "default": "false",
                "desc": "是否渐进式渲染。当图形元素过多时才使用。",
                "children": []
            },
            {
                "name": "style",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "image",
                        "type": "string",
                        "desc": "图片的内容，可以是图片的 URL，也可以是 [dataURI](https://tools.ietf.org/html/rfc2397).",
                        "children": []
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "default": "0",
                        "desc": "图形元素的左上角在父节点坐标系（以父节点左上角为原点）中的横坐标值。",
                        "children": []
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "default": "0",
                        "desc": "图形元素的左上角在父节点坐标系（以父节点左上角为原点）中的纵坐标值。",
                        "children": []
                    },
                    {
                        "name": "width",
                        "type": "number",
                        "default": "0",
                        "desc": "图形元素的宽度。",
                        "children": []
                    },
                    {
                        "name": "height",
                        "type": "numbr",
                        "default": "0",
                        "desc": "图形元素的高度。\n\n\n\n\n\n\n\n注：关于图形元素中更多的样式设置（例如 [富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)），参见 [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable) 中的 style 相关属性。\n\n注意，这里图形元素的样式属性名称直接源于 zrender，和 `echarts label`、`echarts itemStyle` 等处同样含义的样式属性名称或有不同。例如，有如下对应：\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
                        "children": []
                    },
                    {
                        "name": "fill",
                        "type": "string",
                        "default": "'#000'",
                        "desc": "填充色。",
                        "children": []
                    },
                    {
                        "name": "stroke",
                        "type": "string",
                        "default": "null",
                        "desc": "笔画颜色。",
                        "children": []
                    },
                    {
                        "name": "lineWidth",
                        "type": "number",
                        "default": "0",
                        "desc": "笔画宽度。",
                        "children": []
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影宽度。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影 X 方向偏移。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影 Y 方向偏移。",
                        "children": []
                    },
                    {
                        "name": "shadowColor",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影颜色。",
                        "children": []
                    }
                ]
            },
            {
                "name": "focus",
                "type": "string",
                "default": "'none'",
                "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在高亮图形时，是否淡出其它数据的图形已达到聚焦的效果。支持如下配置：\n\n+ `'none'` 不淡出其它图形，默认使用该配置。\n+ `'self'` 只聚焦（不淡出）当前高亮的数据的图形。\n+ `'series'` 聚焦当前高亮的数据所在的系列的所有图形。",
                "children": []
            },
            {
                "name": "blurScope",
                "type": "string",
                "default": "'coordinateSystem'",
                "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在开启`focus`的时候，可以通过`blurScope`配置淡出的范围。支持如下配置\n\n+ `'coordinateSystem'` 淡出范围为坐标系，默认使用该配置。\n+ `'series'` 淡出范围为系列。\n+ `'global'` 淡出范围为全局。",
                "children": []
            },
            {
                "name": "onclick",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseover",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseout",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousemove",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousewheel",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousedown",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseup",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondrag",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragstart",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragend",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragenter",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragleave",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragover",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondrop",
                "type": "Function",
                "desc": "",
                "children": []
            }
        ]
    },
    {
        "name": "elements.text",
        "type": "Object",
        "desc": "文本块。",
        "children": [
            {
                "name": "type",
                "type": "string",
                "default": "text",
                "desc": "用 setOption 首次设定图形元素时必须指定。\n可取值：\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
                "children": []
            },
            {
                "name": "id",
                "type": "string",
                "default": "undefined",
                "desc": "id 用于在更新或删除图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\n\n\n### $action(string) = 'merge'\n\nsetOption 时指定本次对该图形元素的操作行为。\n\n可取值：\n+ `'merge'`：如果已有元素，则新的配置项和已有的设定进行 merge。如果没有则新建。\n+ `'replace'`：如果已有元素，删除之，新建元素替代之。\n+ `'remove'`：删除元素。",
                "children": []
            },
            {
                "name": "x",
                "type": "number",
                "default": "0",
                "desc": "元素的 x 像素位置。",
                "children": []
            },
            {
                "name": "y",
                "type": "number",
                "default": "0",
                "desc": "元素的 y 像素位置。",
                "children": []
            },
            {
                "name": "rotation",
                "type": "number",
                "default": "0",
                "desc": "元素的旋转",
                "children": []
            },
            {
                "name": "scaleX",
                "type": "number",
                "default": "1",
                "desc": "元素在 x 方向上的缩放。",
                "children": []
            },
            {
                "name": "scaleY",
                "type": "number",
                "default": "1",
                "desc": "元素在 y 方向上的缩放。",
                "children": []
            },
            {
                "name": "originX",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 x 像素位置。",
                "children": []
            },
            {
                "name": "originY",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 y 像素位置。",
                "children": []
            },
            {
                "name": "left",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-text.left) 和 [right](~graphic.elements-text.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-text.left) 或 [right](~graphic.elements-text.right)，则 [shape](~graphic.elements-text.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "right",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-text.left) 和 [right](~graphic.elements-text.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-text.left) 或 [right](~graphic.elements-text.right)，则 [shape](~graphic.elements-text.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "top",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-text.top) 和 [bottom](~graphic.elements-text.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-text.top) 或 [bottom](~graphic.elements-text.bottom)，则 [shape](~graphic.elements-text.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bottom",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-text.top) 和 [bottom](~graphic.elements-text.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-text.top) 或 [bottom](~graphic.elements-text.bottom)，则 [shape](~graphic.elements-text.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bounding",
                "type": "string",
                "default": "'all'",
                "desc": "决定此图形元素在定位时，对自身的包围盒计算方式。\n\n参见例子：\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\n可取值：\n\n+ `'all'`：（默认）\n表示用自身以及子节点整体的经过 transform 后的包围盒进行定位。\n这种方式易于使整体都限制在父元素范围中。\n\n+ `'raw'`：\n表示仅仅用自身（不包括子节点）的没经过 tranform 的包围盒进行定位。\n这种方式易于内容超出父元素范围的定位方式。",
                "children": []
            },
            {
                "name": "z",
                "type": "number",
                "default": "0",
                "desc": "z 方向的高度，决定层叠关系。",
                "children": []
            },
            {
                "name": "zlevel",
                "type": "number",
                "default": "0",
                "desc": "决定此元素绘制在哪个 canvas 层中。注意，越多 canvas 层会占用越多资源。",
                "children": []
            },
            {
                "name": "info",
                "type": "*",
                "desc": "用户定义的任意数据，可以在 event listener 中访问，如：\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                "children": []
            },
            {
                "name": "silent",
                "type": "boolean",
                "default": "false",
                "desc": "是否不响应鼠标以及触摸事件。",
                "children": []
            },
            {
                "name": "invisible",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否可见。",
                "children": []
            },
            {
                "name": "ignore",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否完全被忽略（既不渲染，也不响应事件）。",
                "children": []
            },
            {
                "name": "textContent",
                "type": "Object",
                "desc": "这是一个文本定义，附着在一个节点上，会依据 `textConfig` 配置，相对于节点布局。\n\n\n里面的属性同于 [text](option.html#graphic.elements-text)。",
                "children": []
            },
            {
                "name": "textConfig",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "position",
                        "type": "",
                        "default": "'inside'",
                        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "desc": "`textContent` 的旋转弧度。",
                        "children": []
                    },
                    {
                        "name": "layoutRect",
                        "type": "Object",
                        "desc": "`textContent` 根据此矩形来布局位置。\n默认是节点的包围盒。\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
                        "children": []
                    },
                    {
                        "name": "offset",
                        "type": "Array",
                        "desc": "`textContent` 的偏移。\n\n`offset` 和 `position` 的区别是，`offset` 是旋转（rotation）后计算。\n\n#### origin\n\n`origin` 相对于节点的包围盒。\n可以是百分数。\n如果指定为 `'center'`，则定位在包围盒中心。\n\n只有当 `position` and `rotation` 都设置时，生效。\n\n+ 如 `[12, 33]`\n+ 或如 `['50%', '50%']`\n+ 'center'",
                        "children": []
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "default": "5",
                        "desc": "距离 `layoutRect` 的距离。",
                        "children": []
                    },
                    {
                        "name": "local",
                        "type": "boolean",
                        "default": "false",
                        "desc": "如果 `true` 的话，会采用节点的 transform。",
                        "children": []
                    },
                    {
                        "name": "insideFill",
                        "type": "string",
                        "desc": "`insideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\n在绝大多数场景下，\"auto-calculated-fill\" 是白色。",
                        "children": []
                    },
                    {
                        "name": "insideStroke",
                        "type": "string",
                        "desc": "`insideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会和节点的 `fill` 相同，如果 `fill` 没有的话则为 `null`。",
                        "children": []
                    },
                    {
                        "name": "outsideFill",
                        "type": "string",
                        "desc": "`outsideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 \"inside\"，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
                        "children": []
                    },
                    {
                        "name": "outsideStroke",
                        "type": "string",
                        "desc": "`outsideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 不是 \"inside\"，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会为一个近似于白色的颜色，来区别于背景。",
                        "children": []
                    },
                    {
                        "name": "inside",
                        "type": "boolean",
                        "desc": "如果确定文本是在节点中的话，则此可设置为 `true`，避免 echarts 额外猜测。",
                        "children": []
                    }
                ]
            },
            {
                "name": "cursor",
                "type": "enum",
                "desc": "鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 `cursor`。",
                "children": [],
                "options": "'auto','pointer','move'"
            },
            {
                "name": "draggable",
                "type": "boolean",
                "default": "false",
                "desc": "图形元素是否可以被拖拽。",
                "children": []
            },
            {
                "name": "progressive",
                "type": "boolean",
                "default": "false",
                "desc": "是否渐进式渲染。当图形元素过多时才使用。",
                "children": []
            },
            {
                "name": "style",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "text",
                        "type": "string",
                        "default": "''",
                        "desc": "文本块文字。可以使用 `\\n` 来换行。",
                        "children": []
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "default": "0",
                        "desc": "图形元素的左上角在父节点坐标系（以父节点左上角为原点）中的横坐标值。",
                        "children": []
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "default": "0",
                        "desc": "图形元素的左上角在父节点坐标系（以父节点左上角为原点）中的纵坐标值。",
                        "children": []
                    },
                    {
                        "name": "font",
                        "type": "string",
                        "desc": "字体大小、字体类型、粗细、字体样式。格式参见 [css font](https://developer.mozilla.org/en-US/docs/Web/CSS/font)。\n\n例如：\n```\n// size | family\nfont: '2em \"STHeiti\", sans-serif'\n\n// style | weight | size | family\nfont: 'italic bolder 16px cursive'\n\n// weight | size | family\nfont: 'bolder 2em \"Microsoft YaHei\", sans-serif'\n```",
                        "children": []
                    },
                    {
                        "name": "textAlign",
                        "type": "string",
                        "default": "'left'",
                        "desc": "水平对齐方式，取值：`'left'`, `'center'`, `'right'`。\n\n如果为 `'left'`，表示文本最左端在 `x` 值上。如果为 `'right'`，表示文本最右端在 `x` 值上。",
                        "children": []
                    },
                    {
                        "name": "textVerticalAlign",
                        "type": "string",
                        "desc": "垂直对齐方式，取值：`'top'`, `'middle'`, `'bottom'`。\n\n\n\n注：关于图形元素中更多的样式设置（例如 [富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)），参见 [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable) 中的 style 相关属性。\n\n注意，这里图形元素的样式属性名称直接源于 zrender，和 `echarts label`、`echarts itemStyle` 等处同样含义的样式属性名称或有不同。例如，有如下对应：\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
                        "children": []
                    },
                    {
                        "name": "fill",
                        "type": "string",
                        "default": "'#000'",
                        "desc": "填充色。",
                        "children": []
                    },
                    {
                        "name": "stroke",
                        "type": "string",
                        "default": "null",
                        "desc": "笔画颜色。",
                        "children": []
                    },
                    {
                        "name": "lineWidth",
                        "type": "number",
                        "default": "0",
                        "desc": "笔画宽度。",
                        "children": []
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影宽度。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影 X 方向偏移。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影 Y 方向偏移。",
                        "children": []
                    },
                    {
                        "name": "shadowColor",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影颜色。",
                        "children": []
                    }
                ]
            },
            {
                "name": "focus",
                "type": "string",
                "default": "'none'",
                "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在高亮图形时，是否淡出其它数据的图形已达到聚焦的效果。支持如下配置：\n\n+ `'none'` 不淡出其它图形，默认使用该配置。\n+ `'self'` 只聚焦（不淡出）当前高亮的数据的图形。\n+ `'series'` 聚焦当前高亮的数据所在的系列的所有图形。",
                "children": []
            },
            {
                "name": "blurScope",
                "type": "string",
                "default": "'coordinateSystem'",
                "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在开启`focus`的时候，可以通过`blurScope`配置淡出的范围。支持如下配置\n\n+ `'coordinateSystem'` 淡出范围为坐标系，默认使用该配置。\n+ `'series'` 淡出范围为系列。\n+ `'global'` 淡出范围为全局。",
                "children": []
            },
            {
                "name": "onclick",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseover",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseout",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousemove",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousewheel",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousedown",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseup",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondrag",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragstart",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragend",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragenter",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragleave",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragover",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondrop",
                "type": "Function",
                "desc": "",
                "children": []
            }
        ]
    },
    {
        "name": "elements.rect",
        "type": "Object",
        "desc": "矩形。",
        "children": [
            {
                "name": "type",
                "type": "string",
                "default": "rect",
                "desc": "用 setOption 首次设定图形元素时必须指定。\n可取值：\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
                "children": []
            },
            {
                "name": "id",
                "type": "string",
                "default": "undefined",
                "desc": "id 用于在更新或删除图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\n\n\n### $action(string) = 'merge'\n\nsetOption 时指定本次对该图形元素的操作行为。\n\n可取值：\n+ `'merge'`：如果已有元素，则新的配置项和已有的设定进行 merge。如果没有则新建。\n+ `'replace'`：如果已有元素，删除之，新建元素替代之。\n+ `'remove'`：删除元素。",
                "children": []
            },
            {
                "name": "x",
                "type": "number",
                "default": "0",
                "desc": "元素的 x 像素位置。",
                "children": []
            },
            {
                "name": "y",
                "type": "number",
                "default": "0",
                "desc": "元素的 y 像素位置。",
                "children": []
            },
            {
                "name": "rotation",
                "type": "number",
                "default": "0",
                "desc": "元素的旋转",
                "children": []
            },
            {
                "name": "scaleX",
                "type": "number",
                "default": "1",
                "desc": "元素在 x 方向上的缩放。",
                "children": []
            },
            {
                "name": "scaleY",
                "type": "number",
                "default": "1",
                "desc": "元素在 y 方向上的缩放。",
                "children": []
            },
            {
                "name": "originX",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 x 像素位置。",
                "children": []
            },
            {
                "name": "originY",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 y 像素位置。",
                "children": []
            },
            {
                "name": "left",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-rect.left) 和 [right](~graphic.elements-rect.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-rect.left) 或 [right](~graphic.elements-rect.right)，则 [shape](~graphic.elements-rect.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "right",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-rect.left) 和 [right](~graphic.elements-rect.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-rect.left) 或 [right](~graphic.elements-rect.right)，则 [shape](~graphic.elements-rect.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "top",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-rect.top) 和 [bottom](~graphic.elements-rect.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-rect.top) 或 [bottom](~graphic.elements-rect.bottom)，则 [shape](~graphic.elements-rect.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bottom",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-rect.top) 和 [bottom](~graphic.elements-rect.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-rect.top) 或 [bottom](~graphic.elements-rect.bottom)，则 [shape](~graphic.elements-rect.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bounding",
                "type": "string",
                "default": "'all'",
                "desc": "决定此图形元素在定位时，对自身的包围盒计算方式。\n\n参见例子：\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\n可取值：\n\n+ `'all'`：（默认）\n表示用自身以及子节点整体的经过 transform 后的包围盒进行定位。\n这种方式易于使整体都限制在父元素范围中。\n\n+ `'raw'`：\n表示仅仅用自身（不包括子节点）的没经过 tranform 的包围盒进行定位。\n这种方式易于内容超出父元素范围的定位方式。",
                "children": []
            },
            {
                "name": "z",
                "type": "number",
                "default": "0",
                "desc": "z 方向的高度，决定层叠关系。",
                "children": []
            },
            {
                "name": "zlevel",
                "type": "number",
                "default": "0",
                "desc": "决定此元素绘制在哪个 canvas 层中。注意，越多 canvas 层会占用越多资源。",
                "children": []
            },
            {
                "name": "info",
                "type": "*",
                "desc": "用户定义的任意数据，可以在 event listener 中访问，如：\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                "children": []
            },
            {
                "name": "silent",
                "type": "boolean",
                "default": "false",
                "desc": "是否不响应鼠标以及触摸事件。",
                "children": []
            },
            {
                "name": "invisible",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否可见。",
                "children": []
            },
            {
                "name": "ignore",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否完全被忽略（既不渲染，也不响应事件）。",
                "children": []
            },
            {
                "name": "textContent",
                "type": "Object",
                "desc": "这是一个文本定义，附着在一个节点上，会依据 `textConfig` 配置，相对于节点布局。\n\n\n里面的属性同于 [text](option.html#graphic.elements-text)。",
                "children": []
            },
            {
                "name": "textConfig",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "position",
                        "type": "",
                        "default": "'inside'",
                        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "desc": "`textContent` 的旋转弧度。",
                        "children": []
                    },
                    {
                        "name": "layoutRect",
                        "type": "Object",
                        "desc": "`textContent` 根据此矩形来布局位置。\n默认是节点的包围盒。\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
                        "children": []
                    },
                    {
                        "name": "offset",
                        "type": "Array",
                        "desc": "`textContent` 的偏移。\n\n`offset` 和 `position` 的区别是，`offset` 是旋转（rotation）后计算。\n\n#### origin\n\n`origin` 相对于节点的包围盒。\n可以是百分数。\n如果指定为 `'center'`，则定位在包围盒中心。\n\n只有当 `position` and `rotation` 都设置时，生效。\n\n+ 如 `[12, 33]`\n+ 或如 `['50%', '50%']`\n+ 'center'",
                        "children": []
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "default": "5",
                        "desc": "距离 `layoutRect` 的距离。",
                        "children": []
                    },
                    {
                        "name": "local",
                        "type": "boolean",
                        "default": "false",
                        "desc": "如果 `true` 的话，会采用节点的 transform。",
                        "children": []
                    },
                    {
                        "name": "insideFill",
                        "type": "string",
                        "desc": "`insideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\n在绝大多数场景下，\"auto-calculated-fill\" 是白色。",
                        "children": []
                    },
                    {
                        "name": "insideStroke",
                        "type": "string",
                        "desc": "`insideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会和节点的 `fill` 相同，如果 `fill` 没有的话则为 `null`。",
                        "children": []
                    },
                    {
                        "name": "outsideFill",
                        "type": "string",
                        "desc": "`outsideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 \"inside\"，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
                        "children": []
                    },
                    {
                        "name": "outsideStroke",
                        "type": "string",
                        "desc": "`outsideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 不是 \"inside\"，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会为一个近似于白色的颜色，来区别于背景。",
                        "children": []
                    },
                    {
                        "name": "inside",
                        "type": "boolean",
                        "desc": "如果确定文本是在节点中的话，则此可设置为 `true`，避免 echarts 额外猜测。",
                        "children": []
                    }
                ]
            },
            {
                "name": "cursor",
                "type": "enum",
                "desc": "鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 `cursor`。",
                "children": [],
                "options": "'auto','pointer','move'"
            },
            {
                "name": "draggable",
                "type": "boolean",
                "default": "false",
                "desc": "图形元素是否可以被拖拽。",
                "children": []
            },
            {
                "name": "progressive",
                "type": "boolean",
                "default": "false",
                "desc": "是否渐进式渲染。当图形元素过多时才使用。",
                "children": []
            },
            {
                "name": "shape",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "x",
                        "type": "number",
                        "default": "0",
                        "desc": "图形元素的左上角在父节点坐标系（以父节点左上角为原点）中的横坐标值。",
                        "children": []
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "default": "0",
                        "desc": "图形元素的左上角在父节点坐标系（以父节点左上角为原点）中的纵坐标值。",
                        "children": []
                    },
                    {
                        "name": "width",
                        "type": "number",
                        "default": "0",
                        "desc": "图形元素的宽度。",
                        "children": []
                    },
                    {
                        "name": "height",
                        "type": "numbr",
                        "default": "0",
                        "desc": "图形元素的高度。",
                        "children": []
                    },
                    {
                        "name": "r",
                        "type": "Array",
                        "desc": "可以用于设置圆角矩形。`r: [r1, r2, r3, r4]`，\n左上、右上、右下、左下角的半径依次为r1、r2、r3、r4。\n\n可以缩写，例如：\n+ `r` 缩写为 `1`         相当于 `[1, 1, 1, 1]`\n+ `r` 缩写为 `[1]`       相当于 `[1, 1, 1, 1]`\n+ `r` 缩写为 `[1, 2]`    相当于 `[1, 2, 1, 2]`\n+ `r` 缩写为 `[1, 2, 3]1 相当于 `[1, 2, 3, 2]`",
                        "children": []
                    }
                ]
            },
            {
                "name": "style",
                "type": "Object",
                "desc": "注：关于图形元素中更多的样式设置（例如 [富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)），参见 [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable) 中的 style 相关属性。\n\n注意，这里图形元素的样式属性名称直接源于 zrender，和 `echarts label`、`echarts itemStyle` 等处同样含义的样式属性名称或有不同。例如，有如下对应：\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
                "children": [
                    {
                        "name": "fill",
                        "type": "string",
                        "default": "'#000'",
                        "desc": "填充色。",
                        "children": []
                    },
                    {
                        "name": "stroke",
                        "type": "string",
                        "default": "null",
                        "desc": "笔画颜色。",
                        "children": []
                    },
                    {
                        "name": "lineWidth",
                        "type": "number",
                        "default": "0",
                        "desc": "笔画宽度。",
                        "children": []
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影宽度。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影 X 方向偏移。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影 Y 方向偏移。",
                        "children": []
                    },
                    {
                        "name": "shadowColor",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影颜色。",
                        "children": []
                    }
                ]
            },
            {
                "name": "focus",
                "type": "string",
                "default": "'none'",
                "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在高亮图形时，是否淡出其它数据的图形已达到聚焦的效果。支持如下配置：\n\n+ `'none'` 不淡出其它图形，默认使用该配置。\n+ `'self'` 只聚焦（不淡出）当前高亮的数据的图形。\n+ `'series'` 聚焦当前高亮的数据所在的系列的所有图形。",
                "children": []
            },
            {
                "name": "blurScope",
                "type": "string",
                "default": "'coordinateSystem'",
                "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在开启`focus`的时候，可以通过`blurScope`配置淡出的范围。支持如下配置\n\n+ `'coordinateSystem'` 淡出范围为坐标系，默认使用该配置。\n+ `'series'` 淡出范围为系列。\n+ `'global'` 淡出范围为全局。",
                "children": []
            },
            {
                "name": "onclick",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseover",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseout",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousemove",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousewheel",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousedown",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseup",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondrag",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragstart",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragend",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragenter",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragleave",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragover",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondrop",
                "type": "Function",
                "desc": "",
                "children": []
            }
        ]
    },
    {
        "name": "elements.circle",
        "type": "Object",
        "desc": "圆。",
        "children": [
            {
                "name": "type",
                "type": "string",
                "default": "circle",
                "desc": "用 setOption 首次设定图形元素时必须指定。\n可取值：\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
                "children": []
            },
            {
                "name": "id",
                "type": "string",
                "default": "undefined",
                "desc": "id 用于在更新或删除图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\n\n\n### $action(string) = 'merge'\n\nsetOption 时指定本次对该图形元素的操作行为。\n\n可取值：\n+ `'merge'`：如果已有元素，则新的配置项和已有的设定进行 merge。如果没有则新建。\n+ `'replace'`：如果已有元素，删除之，新建元素替代之。\n+ `'remove'`：删除元素。",
                "children": []
            },
            {
                "name": "x",
                "type": "number",
                "default": "0",
                "desc": "元素的 x 像素位置。",
                "children": []
            },
            {
                "name": "y",
                "type": "number",
                "default": "0",
                "desc": "元素的 y 像素位置。",
                "children": []
            },
            {
                "name": "rotation",
                "type": "number",
                "default": "0",
                "desc": "元素的旋转",
                "children": []
            },
            {
                "name": "scaleX",
                "type": "number",
                "default": "1",
                "desc": "元素在 x 方向上的缩放。",
                "children": []
            },
            {
                "name": "scaleY",
                "type": "number",
                "default": "1",
                "desc": "元素在 y 方向上的缩放。",
                "children": []
            },
            {
                "name": "originX",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 x 像素位置。",
                "children": []
            },
            {
                "name": "originY",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 y 像素位置。",
                "children": []
            },
            {
                "name": "left",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-circle.left) 和 [right](~graphic.elements-circle.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-circle.left) 或 [right](~graphic.elements-circle.right)，则 [shape](~graphic.elements-circle.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "right",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-circle.left) 和 [right](~graphic.elements-circle.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-circle.left) 或 [right](~graphic.elements-circle.right)，则 [shape](~graphic.elements-circle.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "top",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-circle.top) 和 [bottom](~graphic.elements-circle.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-circle.top) 或 [bottom](~graphic.elements-circle.bottom)，则 [shape](~graphic.elements-circle.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bottom",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-circle.top) 和 [bottom](~graphic.elements-circle.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-circle.top) 或 [bottom](~graphic.elements-circle.bottom)，则 [shape](~graphic.elements-circle.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bounding",
                "type": "string",
                "default": "'all'",
                "desc": "决定此图形元素在定位时，对自身的包围盒计算方式。\n\n参见例子：\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\n可取值：\n\n+ `'all'`：（默认）\n表示用自身以及子节点整体的经过 transform 后的包围盒进行定位。\n这种方式易于使整体都限制在父元素范围中。\n\n+ `'raw'`：\n表示仅仅用自身（不包括子节点）的没经过 tranform 的包围盒进行定位。\n这种方式易于内容超出父元素范围的定位方式。",
                "children": []
            },
            {
                "name": "z",
                "type": "number",
                "default": "0",
                "desc": "z 方向的高度，决定层叠关系。",
                "children": []
            },
            {
                "name": "zlevel",
                "type": "number",
                "default": "0",
                "desc": "决定此元素绘制在哪个 canvas 层中。注意，越多 canvas 层会占用越多资源。",
                "children": []
            },
            {
                "name": "info",
                "type": "*",
                "desc": "用户定义的任意数据，可以在 event listener 中访问，如：\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                "children": []
            },
            {
                "name": "silent",
                "type": "boolean",
                "default": "false",
                "desc": "是否不响应鼠标以及触摸事件。",
                "children": []
            },
            {
                "name": "invisible",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否可见。",
                "children": []
            },
            {
                "name": "ignore",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否完全被忽略（既不渲染，也不响应事件）。",
                "children": []
            },
            {
                "name": "textContent",
                "type": "Object",
                "desc": "这是一个文本定义，附着在一个节点上，会依据 `textConfig` 配置，相对于节点布局。\n\n\n里面的属性同于 [text](option.html#graphic.elements-text)。",
                "children": []
            },
            {
                "name": "textConfig",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "position",
                        "type": "",
                        "default": "'inside'",
                        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "desc": "`textContent` 的旋转弧度。",
                        "children": []
                    },
                    {
                        "name": "layoutRect",
                        "type": "Object",
                        "desc": "`textContent` 根据此矩形来布局位置。\n默认是节点的包围盒。\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
                        "children": []
                    },
                    {
                        "name": "offset",
                        "type": "Array",
                        "desc": "`textContent` 的偏移。\n\n`offset` 和 `position` 的区别是，`offset` 是旋转（rotation）后计算。\n\n#### origin\n\n`origin` 相对于节点的包围盒。\n可以是百分数。\n如果指定为 `'center'`，则定位在包围盒中心。\n\n只有当 `position` and `rotation` 都设置时，生效。\n\n+ 如 `[12, 33]`\n+ 或如 `['50%', '50%']`\n+ 'center'",
                        "children": []
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "default": "5",
                        "desc": "距离 `layoutRect` 的距离。",
                        "children": []
                    },
                    {
                        "name": "local",
                        "type": "boolean",
                        "default": "false",
                        "desc": "如果 `true` 的话，会采用节点的 transform。",
                        "children": []
                    },
                    {
                        "name": "insideFill",
                        "type": "string",
                        "desc": "`insideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\n在绝大多数场景下，\"auto-calculated-fill\" 是白色。",
                        "children": []
                    },
                    {
                        "name": "insideStroke",
                        "type": "string",
                        "desc": "`insideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会和节点的 `fill` 相同，如果 `fill` 没有的话则为 `null`。",
                        "children": []
                    },
                    {
                        "name": "outsideFill",
                        "type": "string",
                        "desc": "`outsideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 \"inside\"，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
                        "children": []
                    },
                    {
                        "name": "outsideStroke",
                        "type": "string",
                        "desc": "`outsideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 不是 \"inside\"，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会为一个近似于白色的颜色，来区别于背景。",
                        "children": []
                    },
                    {
                        "name": "inside",
                        "type": "boolean",
                        "desc": "如果确定文本是在节点中的话，则此可设置为 `true`，避免 echarts 额外猜测。",
                        "children": []
                    }
                ]
            },
            {
                "name": "cursor",
                "type": "enum",
                "desc": "鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 `cursor`。",
                "children": [],
                "options": "'auto','pointer','move'"
            },
            {
                "name": "draggable",
                "type": "boolean",
                "default": "false",
                "desc": "图形元素是否可以被拖拽。",
                "children": []
            },
            {
                "name": "progressive",
                "type": "boolean",
                "default": "false",
                "desc": "是否渐进式渲染。当图形元素过多时才使用。",
                "children": []
            },
            {
                "name": "shape",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "cx",
                        "type": "number",
                        "default": "0",
                        "desc": "图形元素的中心在父节点坐标系（以父节点左上角为原点）中的横坐标值。",
                        "children": []
                    },
                    {
                        "name": "cy",
                        "type": "numbr",
                        "default": "0",
                        "desc": "图形元素的中心在父节点坐标系（以父节点左上角为原点）中的纵坐标值。",
                        "children": []
                    },
                    {
                        "name": "r",
                        "type": "number",
                        "default": "0",
                        "desc": "外半径。",
                        "children": []
                    }
                ]
            },
            {
                "name": "style",
                "type": "Object",
                "desc": "注：关于图形元素中更多的样式设置（例如 [富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)），参见 [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable) 中的 style 相关属性。\n\n注意，这里图形元素的样式属性名称直接源于 zrender，和 `echarts label`、`echarts itemStyle` 等处同样含义的样式属性名称或有不同。例如，有如下对应：\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
                "children": [
                    {
                        "name": "fill",
                        "type": "string",
                        "default": "'#000'",
                        "desc": "填充色。",
                        "children": []
                    },
                    {
                        "name": "stroke",
                        "type": "string",
                        "default": "null",
                        "desc": "笔画颜色。",
                        "children": []
                    },
                    {
                        "name": "lineWidth",
                        "type": "number",
                        "default": "0",
                        "desc": "笔画宽度。",
                        "children": []
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影宽度。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影 X 方向偏移。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影 Y 方向偏移。",
                        "children": []
                    },
                    {
                        "name": "shadowColor",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影颜色。",
                        "children": []
                    }
                ]
            },
            {
                "name": "focus",
                "type": "string",
                "default": "'none'",
                "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在高亮图形时，是否淡出其它数据的图形已达到聚焦的效果。支持如下配置：\n\n+ `'none'` 不淡出其它图形，默认使用该配置。\n+ `'self'` 只聚焦（不淡出）当前高亮的数据的图形。\n+ `'series'` 聚焦当前高亮的数据所在的系列的所有图形。",
                "children": []
            },
            {
                "name": "blurScope",
                "type": "string",
                "default": "'coordinateSystem'",
                "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在开启`focus`的时候，可以通过`blurScope`配置淡出的范围。支持如下配置\n\n+ `'coordinateSystem'` 淡出范围为坐标系，默认使用该配置。\n+ `'series'` 淡出范围为系列。\n+ `'global'` 淡出范围为全局。",
                "children": []
            },
            {
                "name": "onclick",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseover",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseout",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousemove",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousewheel",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousedown",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseup",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondrag",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragstart",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragend",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragenter",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragleave",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragover",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondrop",
                "type": "Function",
                "desc": "",
                "children": []
            }
        ]
    },
    {
        "name": "elements.ring",
        "type": "Object",
        "desc": "圆环。",
        "children": [
            {
                "name": "type",
                "type": "string",
                "default": "ring",
                "desc": "用 setOption 首次设定图形元素时必须指定。\n可取值：\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
                "children": []
            },
            {
                "name": "id",
                "type": "string",
                "default": "undefined",
                "desc": "id 用于在更新或删除图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\n\n\n### $action(string) = 'merge'\n\nsetOption 时指定本次对该图形元素的操作行为。\n\n可取值：\n+ `'merge'`：如果已有元素，则新的配置项和已有的设定进行 merge。如果没有则新建。\n+ `'replace'`：如果已有元素，删除之，新建元素替代之。\n+ `'remove'`：删除元素。",
                "children": []
            },
            {
                "name": "x",
                "type": "number",
                "default": "0",
                "desc": "元素的 x 像素位置。",
                "children": []
            },
            {
                "name": "y",
                "type": "number",
                "default": "0",
                "desc": "元素的 y 像素位置。",
                "children": []
            },
            {
                "name": "rotation",
                "type": "number",
                "default": "0",
                "desc": "元素的旋转",
                "children": []
            },
            {
                "name": "scaleX",
                "type": "number",
                "default": "1",
                "desc": "元素在 x 方向上的缩放。",
                "children": []
            },
            {
                "name": "scaleY",
                "type": "number",
                "default": "1",
                "desc": "元素在 y 方向上的缩放。",
                "children": []
            },
            {
                "name": "originX",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 x 像素位置。",
                "children": []
            },
            {
                "name": "originY",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 y 像素位置。",
                "children": []
            },
            {
                "name": "left",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-ring.left) 和 [right](~graphic.elements-ring.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-ring.left) 或 [right](~graphic.elements-ring.right)，则 [shape](~graphic.elements-ring.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "right",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-ring.left) 和 [right](~graphic.elements-ring.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-ring.left) 或 [right](~graphic.elements-ring.right)，则 [shape](~graphic.elements-ring.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "top",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-ring.top) 和 [bottom](~graphic.elements-ring.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-ring.top) 或 [bottom](~graphic.elements-ring.bottom)，则 [shape](~graphic.elements-ring.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bottom",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-ring.top) 和 [bottom](~graphic.elements-ring.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-ring.top) 或 [bottom](~graphic.elements-ring.bottom)，则 [shape](~graphic.elements-ring.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bounding",
                "type": "string",
                "default": "'all'",
                "desc": "决定此图形元素在定位时，对自身的包围盒计算方式。\n\n参见例子：\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\n可取值：\n\n+ `'all'`：（默认）\n表示用自身以及子节点整体的经过 transform 后的包围盒进行定位。\n这种方式易于使整体都限制在父元素范围中。\n\n+ `'raw'`：\n表示仅仅用自身（不包括子节点）的没经过 tranform 的包围盒进行定位。\n这种方式易于内容超出父元素范围的定位方式。",
                "children": []
            },
            {
                "name": "z",
                "type": "number",
                "default": "0",
                "desc": "z 方向的高度，决定层叠关系。",
                "children": []
            },
            {
                "name": "zlevel",
                "type": "number",
                "default": "0",
                "desc": "决定此元素绘制在哪个 canvas 层中。注意，越多 canvas 层会占用越多资源。",
                "children": []
            },
            {
                "name": "info",
                "type": "*",
                "desc": "用户定义的任意数据，可以在 event listener 中访问，如：\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                "children": []
            },
            {
                "name": "silent",
                "type": "boolean",
                "default": "false",
                "desc": "是否不响应鼠标以及触摸事件。",
                "children": []
            },
            {
                "name": "invisible",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否可见。",
                "children": []
            },
            {
                "name": "ignore",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否完全被忽略（既不渲染，也不响应事件）。",
                "children": []
            },
            {
                "name": "textContent",
                "type": "Object",
                "desc": "这是一个文本定义，附着在一个节点上，会依据 `textConfig` 配置，相对于节点布局。\n\n\n里面的属性同于 [text](option.html#graphic.elements-text)。",
                "children": []
            },
            {
                "name": "textConfig",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "position",
                        "type": "",
                        "default": "'inside'",
                        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "desc": "`textContent` 的旋转弧度。",
                        "children": []
                    },
                    {
                        "name": "layoutRect",
                        "type": "Object",
                        "desc": "`textContent` 根据此矩形来布局位置。\n默认是节点的包围盒。\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
                        "children": []
                    },
                    {
                        "name": "offset",
                        "type": "Array",
                        "desc": "`textContent` 的偏移。\n\n`offset` 和 `position` 的区别是，`offset` 是旋转（rotation）后计算。\n\n#### origin\n\n`origin` 相对于节点的包围盒。\n可以是百分数。\n如果指定为 `'center'`，则定位在包围盒中心。\n\n只有当 `position` and `rotation` 都设置时，生效。\n\n+ 如 `[12, 33]`\n+ 或如 `['50%', '50%']`\n+ 'center'",
                        "children": []
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "default": "5",
                        "desc": "距离 `layoutRect` 的距离。",
                        "children": []
                    },
                    {
                        "name": "local",
                        "type": "boolean",
                        "default": "false",
                        "desc": "如果 `true` 的话，会采用节点的 transform。",
                        "children": []
                    },
                    {
                        "name": "insideFill",
                        "type": "string",
                        "desc": "`insideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\n在绝大多数场景下，\"auto-calculated-fill\" 是白色。",
                        "children": []
                    },
                    {
                        "name": "insideStroke",
                        "type": "string",
                        "desc": "`insideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会和节点的 `fill` 相同，如果 `fill` 没有的话则为 `null`。",
                        "children": []
                    },
                    {
                        "name": "outsideFill",
                        "type": "string",
                        "desc": "`outsideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 \"inside\"，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
                        "children": []
                    },
                    {
                        "name": "outsideStroke",
                        "type": "string",
                        "desc": "`outsideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 不是 \"inside\"，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会为一个近似于白色的颜色，来区别于背景。",
                        "children": []
                    },
                    {
                        "name": "inside",
                        "type": "boolean",
                        "desc": "如果确定文本是在节点中的话，则此可设置为 `true`，避免 echarts 额外猜测。",
                        "children": []
                    }
                ]
            },
            {
                "name": "cursor",
                "type": "enum",
                "desc": "鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 `cursor`。",
                "children": [],
                "options": "'auto','pointer','move'"
            },
            {
                "name": "draggable",
                "type": "boolean",
                "default": "false",
                "desc": "图形元素是否可以被拖拽。",
                "children": []
            },
            {
                "name": "progressive",
                "type": "boolean",
                "default": "false",
                "desc": "是否渐进式渲染。当图形元素过多时才使用。",
                "children": []
            },
            {
                "name": "shape",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "cx",
                        "type": "number",
                        "default": "0",
                        "desc": "图形元素的中心在父节点坐标系（以父节点左上角为原点）中的横坐标值。",
                        "children": []
                    },
                    {
                        "name": "cy",
                        "type": "numbr",
                        "default": "0",
                        "desc": "图形元素的中心在父节点坐标系（以父节点左上角为原点）中的纵坐标值。",
                        "children": []
                    },
                    {
                        "name": "r",
                        "type": "number",
                        "default": "0",
                        "desc": "外半径。",
                        "children": []
                    },
                    {
                        "name": "r0",
                        "type": "number",
                        "default": "0",
                        "desc": "内半径。",
                        "children": []
                    }
                ]
            },
            {
                "name": "style",
                "type": "Object",
                "desc": "注：关于图形元素中更多的样式设置（例如 [富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)），参见 [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable) 中的 style 相关属性。\n\n注意，这里图形元素的样式属性名称直接源于 zrender，和 `echarts label`、`echarts itemStyle` 等处同样含义的样式属性名称或有不同。例如，有如下对应：\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
                "children": [
                    {
                        "name": "fill",
                        "type": "string",
                        "default": "'#000'",
                        "desc": "填充色。",
                        "children": []
                    },
                    {
                        "name": "stroke",
                        "type": "string",
                        "default": "null",
                        "desc": "笔画颜色。",
                        "children": []
                    },
                    {
                        "name": "lineWidth",
                        "type": "number",
                        "default": "0",
                        "desc": "笔画宽度。",
                        "children": []
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影宽度。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影 X 方向偏移。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影 Y 方向偏移。",
                        "children": []
                    },
                    {
                        "name": "shadowColor",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影颜色。",
                        "children": []
                    }
                ]
            },
            {
                "name": "focus",
                "type": "string",
                "default": "'none'",
                "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在高亮图形时，是否淡出其它数据的图形已达到聚焦的效果。支持如下配置：\n\n+ `'none'` 不淡出其它图形，默认使用该配置。\n+ `'self'` 只聚焦（不淡出）当前高亮的数据的图形。\n+ `'series'` 聚焦当前高亮的数据所在的系列的所有图形。",
                "children": []
            },
            {
                "name": "blurScope",
                "type": "string",
                "default": "'coordinateSystem'",
                "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在开启`focus`的时候，可以通过`blurScope`配置淡出的范围。支持如下配置\n\n+ `'coordinateSystem'` 淡出范围为坐标系，默认使用该配置。\n+ `'series'` 淡出范围为系列。\n+ `'global'` 淡出范围为全局。",
                "children": []
            },
            {
                "name": "onclick",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseover",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseout",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousemove",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousewheel",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousedown",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseup",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondrag",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragstart",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragend",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragenter",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragleave",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragover",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondrop",
                "type": "Function",
                "desc": "",
                "children": []
            }
        ]
    },
    {
        "name": "elements.sector",
        "type": "Object",
        "desc": "扇形。",
        "children": [
            {
                "name": "type",
                "type": "string",
                "default": "sector",
                "desc": "用 setOption 首次设定图形元素时必须指定。\n可取值：\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
                "children": []
            },
            {
                "name": "id",
                "type": "string",
                "default": "undefined",
                "desc": "id 用于在更新或删除图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\n\n\n### $action(string) = 'merge'\n\nsetOption 时指定本次对该图形元素的操作行为。\n\n可取值：\n+ `'merge'`：如果已有元素，则新的配置项和已有的设定进行 merge。如果没有则新建。\n+ `'replace'`：如果已有元素，删除之，新建元素替代之。\n+ `'remove'`：删除元素。",
                "children": []
            },
            {
                "name": "x",
                "type": "number",
                "default": "0",
                "desc": "元素的 x 像素位置。",
                "children": []
            },
            {
                "name": "y",
                "type": "number",
                "default": "0",
                "desc": "元素的 y 像素位置。",
                "children": []
            },
            {
                "name": "rotation",
                "type": "number",
                "default": "0",
                "desc": "元素的旋转",
                "children": []
            },
            {
                "name": "scaleX",
                "type": "number",
                "default": "1",
                "desc": "元素在 x 方向上的缩放。",
                "children": []
            },
            {
                "name": "scaleY",
                "type": "number",
                "default": "1",
                "desc": "元素在 y 方向上的缩放。",
                "children": []
            },
            {
                "name": "originX",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 x 像素位置。",
                "children": []
            },
            {
                "name": "originY",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 y 像素位置。",
                "children": []
            },
            {
                "name": "left",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-sector.left) 和 [right](~graphic.elements-sector.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-sector.left) 或 [right](~graphic.elements-sector.right)，则 [shape](~graphic.elements-sector.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "right",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-sector.left) 和 [right](~graphic.elements-sector.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-sector.left) 或 [right](~graphic.elements-sector.right)，则 [shape](~graphic.elements-sector.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "top",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-sector.top) 和 [bottom](~graphic.elements-sector.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-sector.top) 或 [bottom](~graphic.elements-sector.bottom)，则 [shape](~graphic.elements-sector.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bottom",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-sector.top) 和 [bottom](~graphic.elements-sector.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-sector.top) 或 [bottom](~graphic.elements-sector.bottom)，则 [shape](~graphic.elements-sector.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bounding",
                "type": "string",
                "default": "'all'",
                "desc": "决定此图形元素在定位时，对自身的包围盒计算方式。\n\n参见例子：\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\n可取值：\n\n+ `'all'`：（默认）\n表示用自身以及子节点整体的经过 transform 后的包围盒进行定位。\n这种方式易于使整体都限制在父元素范围中。\n\n+ `'raw'`：\n表示仅仅用自身（不包括子节点）的没经过 tranform 的包围盒进行定位。\n这种方式易于内容超出父元素范围的定位方式。",
                "children": []
            },
            {
                "name": "z",
                "type": "number",
                "default": "0",
                "desc": "z 方向的高度，决定层叠关系。",
                "children": []
            },
            {
                "name": "zlevel",
                "type": "number",
                "default": "0",
                "desc": "决定此元素绘制在哪个 canvas 层中。注意，越多 canvas 层会占用越多资源。",
                "children": []
            },
            {
                "name": "info",
                "type": "*",
                "desc": "用户定义的任意数据，可以在 event listener 中访问，如：\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                "children": []
            },
            {
                "name": "silent",
                "type": "boolean",
                "default": "false",
                "desc": "是否不响应鼠标以及触摸事件。",
                "children": []
            },
            {
                "name": "invisible",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否可见。",
                "children": []
            },
            {
                "name": "ignore",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否完全被忽略（既不渲染，也不响应事件）。",
                "children": []
            },
            {
                "name": "textContent",
                "type": "Object",
                "desc": "这是一个文本定义，附着在一个节点上，会依据 `textConfig` 配置，相对于节点布局。\n\n\n里面的属性同于 [text](option.html#graphic.elements-text)。",
                "children": []
            },
            {
                "name": "textConfig",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "position",
                        "type": "",
                        "default": "'inside'",
                        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "desc": "`textContent` 的旋转弧度。",
                        "children": []
                    },
                    {
                        "name": "layoutRect",
                        "type": "Object",
                        "desc": "`textContent` 根据此矩形来布局位置。\n默认是节点的包围盒。\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
                        "children": []
                    },
                    {
                        "name": "offset",
                        "type": "Array",
                        "desc": "`textContent` 的偏移。\n\n`offset` 和 `position` 的区别是，`offset` 是旋转（rotation）后计算。\n\n#### origin\n\n`origin` 相对于节点的包围盒。\n可以是百分数。\n如果指定为 `'center'`，则定位在包围盒中心。\n\n只有当 `position` and `rotation` 都设置时，生效。\n\n+ 如 `[12, 33]`\n+ 或如 `['50%', '50%']`\n+ 'center'",
                        "children": []
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "default": "5",
                        "desc": "距离 `layoutRect` 的距离。",
                        "children": []
                    },
                    {
                        "name": "local",
                        "type": "boolean",
                        "default": "false",
                        "desc": "如果 `true` 的话，会采用节点的 transform。",
                        "children": []
                    },
                    {
                        "name": "insideFill",
                        "type": "string",
                        "desc": "`insideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\n在绝大多数场景下，\"auto-calculated-fill\" 是白色。",
                        "children": []
                    },
                    {
                        "name": "insideStroke",
                        "type": "string",
                        "desc": "`insideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会和节点的 `fill` 相同，如果 `fill` 没有的话则为 `null`。",
                        "children": []
                    },
                    {
                        "name": "outsideFill",
                        "type": "string",
                        "desc": "`outsideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 \"inside\"，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
                        "children": []
                    },
                    {
                        "name": "outsideStroke",
                        "type": "string",
                        "desc": "`outsideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 不是 \"inside\"，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会为一个近似于白色的颜色，来区别于背景。",
                        "children": []
                    },
                    {
                        "name": "inside",
                        "type": "boolean",
                        "desc": "如果确定文本是在节点中的话，则此可设置为 `true`，避免 echarts 额外猜测。",
                        "children": []
                    }
                ]
            },
            {
                "name": "cursor",
                "type": "enum",
                "desc": "鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 `cursor`。",
                "children": [],
                "options": "'auto','pointer','move'"
            },
            {
                "name": "draggable",
                "type": "boolean",
                "default": "false",
                "desc": "图形元素是否可以被拖拽。",
                "children": []
            },
            {
                "name": "progressive",
                "type": "boolean",
                "default": "false",
                "desc": "是否渐进式渲染。当图形元素过多时才使用。",
                "children": []
            },
            {
                "name": "shape",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "cx",
                        "type": "number",
                        "default": "0",
                        "desc": "图形元素的中心在父节点坐标系（以父节点左上角为原点）中的横坐标值。",
                        "children": []
                    },
                    {
                        "name": "cy",
                        "type": "numbr",
                        "default": "0",
                        "desc": "图形元素的中心在父节点坐标系（以父节点左上角为原点）中的纵坐标值。",
                        "children": []
                    },
                    {
                        "name": "r",
                        "type": "number",
                        "default": "0",
                        "desc": "外半径。",
                        "children": []
                    },
                    {
                        "name": "r0",
                        "type": "number",
                        "default": "0",
                        "desc": "内半径。",
                        "children": []
                    },
                    {
                        "name": "startAngle",
                        "type": "number",
                        "default": "0",
                        "desc": "开始弧度。",
                        "children": []
                    },
                    {
                        "name": "endAngle",
                        "type": "number",
                        "default": "Math.PI * 2",
                        "desc": "结束弧度。",
                        "children": []
                    },
                    {
                        "name": "clockwise",
                        "type": "boolean",
                        "default": "true",
                        "desc": "是否顺时针。",
                        "children": []
                    }
                ]
            },
            {
                "name": "style",
                "type": "Object",
                "desc": "注：关于图形元素中更多的样式设置（例如 [富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)），参见 [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable) 中的 style 相关属性。\n\n注意，这里图形元素的样式属性名称直接源于 zrender，和 `echarts label`、`echarts itemStyle` 等处同样含义的样式属性名称或有不同。例如，有如下对应：\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
                "children": [
                    {
                        "name": "fill",
                        "type": "string",
                        "default": "'#000'",
                        "desc": "填充色。",
                        "children": []
                    },
                    {
                        "name": "stroke",
                        "type": "string",
                        "default": "null",
                        "desc": "笔画颜色。",
                        "children": []
                    },
                    {
                        "name": "lineWidth",
                        "type": "number",
                        "default": "0",
                        "desc": "笔画宽度。",
                        "children": []
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影宽度。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影 X 方向偏移。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影 Y 方向偏移。",
                        "children": []
                    },
                    {
                        "name": "shadowColor",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影颜色。",
                        "children": []
                    }
                ]
            },
            {
                "name": "focus",
                "type": "string",
                "default": "'none'",
                "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在高亮图形时，是否淡出其它数据的图形已达到聚焦的效果。支持如下配置：\n\n+ `'none'` 不淡出其它图形，默认使用该配置。\n+ `'self'` 只聚焦（不淡出）当前高亮的数据的图形。\n+ `'series'` 聚焦当前高亮的数据所在的系列的所有图形。",
                "children": []
            },
            {
                "name": "blurScope",
                "type": "string",
                "default": "'coordinateSystem'",
                "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在开启`focus`的时候，可以通过`blurScope`配置淡出的范围。支持如下配置\n\n+ `'coordinateSystem'` 淡出范围为坐标系，默认使用该配置。\n+ `'series'` 淡出范围为系列。\n+ `'global'` 淡出范围为全局。",
                "children": []
            },
            {
                "name": "onclick",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseover",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseout",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousemove",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousewheel",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousedown",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseup",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondrag",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragstart",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragend",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragenter",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragleave",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragover",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondrop",
                "type": "Function",
                "desc": "",
                "children": []
            }
        ]
    },
    {
        "name": "elements.arc",
        "type": "Object",
        "desc": "圆弧。",
        "children": [
            {
                "name": "type",
                "type": "string",
                "default": "arc",
                "desc": "用 setOption 首次设定图形元素时必须指定。\n可取值：\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
                "children": []
            },
            {
                "name": "id",
                "type": "string",
                "default": "undefined",
                "desc": "id 用于在更新或删除图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\n\n\n### $action(string) = 'merge'\n\nsetOption 时指定本次对该图形元素的操作行为。\n\n可取值：\n+ `'merge'`：如果已有元素，则新的配置项和已有的设定进行 merge。如果没有则新建。\n+ `'replace'`：如果已有元素，删除之，新建元素替代之。\n+ `'remove'`：删除元素。",
                "children": []
            },
            {
                "name": "x",
                "type": "number",
                "default": "0",
                "desc": "元素的 x 像素位置。",
                "children": []
            },
            {
                "name": "y",
                "type": "number",
                "default": "0",
                "desc": "元素的 y 像素位置。",
                "children": []
            },
            {
                "name": "rotation",
                "type": "number",
                "default": "0",
                "desc": "元素的旋转",
                "children": []
            },
            {
                "name": "scaleX",
                "type": "number",
                "default": "1",
                "desc": "元素在 x 方向上的缩放。",
                "children": []
            },
            {
                "name": "scaleY",
                "type": "number",
                "default": "1",
                "desc": "元素在 y 方向上的缩放。",
                "children": []
            },
            {
                "name": "originX",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 x 像素位置。",
                "children": []
            },
            {
                "name": "originY",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 y 像素位置。",
                "children": []
            },
            {
                "name": "left",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-arc.left) 和 [right](~graphic.elements-arc.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-arc.left) 或 [right](~graphic.elements-arc.right)，则 [shape](~graphic.elements-arc.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "right",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-arc.left) 和 [right](~graphic.elements-arc.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-arc.left) 或 [right](~graphic.elements-arc.right)，则 [shape](~graphic.elements-arc.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "top",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-arc.top) 和 [bottom](~graphic.elements-arc.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-arc.top) 或 [bottom](~graphic.elements-arc.bottom)，则 [shape](~graphic.elements-arc.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bottom",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-arc.top) 和 [bottom](~graphic.elements-arc.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-arc.top) 或 [bottom](~graphic.elements-arc.bottom)，则 [shape](~graphic.elements-arc.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bounding",
                "type": "string",
                "default": "'all'",
                "desc": "决定此图形元素在定位时，对自身的包围盒计算方式。\n\n参见例子：\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\n可取值：\n\n+ `'all'`：（默认）\n表示用自身以及子节点整体的经过 transform 后的包围盒进行定位。\n这种方式易于使整体都限制在父元素范围中。\n\n+ `'raw'`：\n表示仅仅用自身（不包括子节点）的没经过 tranform 的包围盒进行定位。\n这种方式易于内容超出父元素范围的定位方式。",
                "children": []
            },
            {
                "name": "z",
                "type": "number",
                "default": "0",
                "desc": "z 方向的高度，决定层叠关系。",
                "children": []
            },
            {
                "name": "zlevel",
                "type": "number",
                "default": "0",
                "desc": "决定此元素绘制在哪个 canvas 层中。注意，越多 canvas 层会占用越多资源。",
                "children": []
            },
            {
                "name": "info",
                "type": "*",
                "desc": "用户定义的任意数据，可以在 event listener 中访问，如：\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                "children": []
            },
            {
                "name": "silent",
                "type": "boolean",
                "default": "false",
                "desc": "是否不响应鼠标以及触摸事件。",
                "children": []
            },
            {
                "name": "invisible",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否可见。",
                "children": []
            },
            {
                "name": "ignore",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否完全被忽略（既不渲染，也不响应事件）。",
                "children": []
            },
            {
                "name": "textContent",
                "type": "Object",
                "desc": "这是一个文本定义，附着在一个节点上，会依据 `textConfig` 配置，相对于节点布局。\n\n\n里面的属性同于 [text](option.html#graphic.elements-text)。",
                "children": []
            },
            {
                "name": "textConfig",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "position",
                        "type": "",
                        "default": "'inside'",
                        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "desc": "`textContent` 的旋转弧度。",
                        "children": []
                    },
                    {
                        "name": "layoutRect",
                        "type": "Object",
                        "desc": "`textContent` 根据此矩形来布局位置。\n默认是节点的包围盒。\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
                        "children": []
                    },
                    {
                        "name": "offset",
                        "type": "Array",
                        "desc": "`textContent` 的偏移。\n\n`offset` 和 `position` 的区别是，`offset` 是旋转（rotation）后计算。\n\n#### origin\n\n`origin` 相对于节点的包围盒。\n可以是百分数。\n如果指定为 `'center'`，则定位在包围盒中心。\n\n只有当 `position` and `rotation` 都设置时，生效。\n\n+ 如 `[12, 33]`\n+ 或如 `['50%', '50%']`\n+ 'center'",
                        "children": []
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "default": "5",
                        "desc": "距离 `layoutRect` 的距离。",
                        "children": []
                    },
                    {
                        "name": "local",
                        "type": "boolean",
                        "default": "false",
                        "desc": "如果 `true` 的话，会采用节点的 transform。",
                        "children": []
                    },
                    {
                        "name": "insideFill",
                        "type": "string",
                        "desc": "`insideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\n在绝大多数场景下，\"auto-calculated-fill\" 是白色。",
                        "children": []
                    },
                    {
                        "name": "insideStroke",
                        "type": "string",
                        "desc": "`insideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会和节点的 `fill` 相同，如果 `fill` 没有的话则为 `null`。",
                        "children": []
                    },
                    {
                        "name": "outsideFill",
                        "type": "string",
                        "desc": "`outsideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 \"inside\"，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
                        "children": []
                    },
                    {
                        "name": "outsideStroke",
                        "type": "string",
                        "desc": "`outsideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 不是 \"inside\"，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会为一个近似于白色的颜色，来区别于背景。",
                        "children": []
                    },
                    {
                        "name": "inside",
                        "type": "boolean",
                        "desc": "如果确定文本是在节点中的话，则此可设置为 `true`，避免 echarts 额外猜测。",
                        "children": []
                    }
                ]
            },
            {
                "name": "cursor",
                "type": "enum",
                "desc": "鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 `cursor`。",
                "children": [],
                "options": "'auto','pointer','move'"
            },
            {
                "name": "draggable",
                "type": "boolean",
                "default": "false",
                "desc": "图形元素是否可以被拖拽。",
                "children": []
            },
            {
                "name": "progressive",
                "type": "boolean",
                "default": "false",
                "desc": "是否渐进式渲染。当图形元素过多时才使用。",
                "children": []
            },
            {
                "name": "shape",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "cx",
                        "type": "number",
                        "default": "0",
                        "desc": "图形元素的中心在父节点坐标系（以父节点左上角为原点）中的横坐标值。",
                        "children": []
                    },
                    {
                        "name": "cy",
                        "type": "numbr",
                        "default": "0",
                        "desc": "图形元素的中心在父节点坐标系（以父节点左上角为原点）中的纵坐标值。",
                        "children": []
                    },
                    {
                        "name": "r",
                        "type": "number",
                        "default": "0",
                        "desc": "外半径。",
                        "children": []
                    },
                    {
                        "name": "r0",
                        "type": "number",
                        "default": "0",
                        "desc": "内半径。",
                        "children": []
                    },
                    {
                        "name": "startAngle",
                        "type": "number",
                        "default": "0",
                        "desc": "开始弧度。",
                        "children": []
                    },
                    {
                        "name": "endAngle",
                        "type": "number",
                        "default": "Math.PI * 2",
                        "desc": "结束弧度。",
                        "children": []
                    },
                    {
                        "name": "clockwise",
                        "type": "boolean",
                        "default": "true",
                        "desc": "是否顺时针。",
                        "children": []
                    }
                ]
            },
            {
                "name": "style",
                "type": "Object",
                "desc": "注：关于图形元素中更多的样式设置（例如 [富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)），参见 [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable) 中的 style 相关属性。\n\n注意，这里图形元素的样式属性名称直接源于 zrender，和 `echarts label`、`echarts itemStyle` 等处同样含义的样式属性名称或有不同。例如，有如下对应：\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
                "children": [
                    {
                        "name": "fill",
                        "type": "string",
                        "default": "null",
                        "desc": "填充色。",
                        "children": []
                    },
                    {
                        "name": "stroke",
                        "type": "string",
                        "default": "\"#000\"",
                        "desc": "笔画颜色。",
                        "children": []
                    },
                    {
                        "name": "lineWidth",
                        "type": "number",
                        "default": "1",
                        "desc": "笔画宽度。",
                        "children": []
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影宽度。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影 X 方向偏移。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影 Y 方向偏移。",
                        "children": []
                    },
                    {
                        "name": "shadowColor",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影颜色。",
                        "children": []
                    }
                ]
            },
            {
                "name": "focus",
                "type": "string",
                "default": "'none'",
                "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在高亮图形时，是否淡出其它数据的图形已达到聚焦的效果。支持如下配置：\n\n+ `'none'` 不淡出其它图形，默认使用该配置。\n+ `'self'` 只聚焦（不淡出）当前高亮的数据的图形。\n+ `'series'` 聚焦当前高亮的数据所在的系列的所有图形。",
                "children": []
            },
            {
                "name": "blurScope",
                "type": "string",
                "default": "'coordinateSystem'",
                "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在开启`focus`的时候，可以通过`blurScope`配置淡出的范围。支持如下配置\n\n+ `'coordinateSystem'` 淡出范围为坐标系，默认使用该配置。\n+ `'series'` 淡出范围为系列。\n+ `'global'` 淡出范围为全局。",
                "children": []
            },
            {
                "name": "onclick",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseover",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseout",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousemove",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousewheel",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousedown",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseup",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondrag",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragstart",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragend",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragenter",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragleave",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragover",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondrop",
                "type": "Function",
                "desc": "",
                "children": []
            }
        ]
    },
    {
        "name": "elements.polygon",
        "type": "Object",
        "desc": "多边形。",
        "children": [
            {
                "name": "type",
                "type": "string",
                "default": "polygon",
                "desc": "用 setOption 首次设定图形元素时必须指定。\n可取值：\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
                "children": []
            },
            {
                "name": "id",
                "type": "string",
                "default": "undefined",
                "desc": "id 用于在更新或删除图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\n\n\n### $action(string) = 'merge'\n\nsetOption 时指定本次对该图形元素的操作行为。\n\n可取值：\n+ `'merge'`：如果已有元素，则新的配置项和已有的设定进行 merge。如果没有则新建。\n+ `'replace'`：如果已有元素，删除之，新建元素替代之。\n+ `'remove'`：删除元素。",
                "children": []
            },
            {
                "name": "x",
                "type": "number",
                "default": "0",
                "desc": "元素的 x 像素位置。",
                "children": []
            },
            {
                "name": "y",
                "type": "number",
                "default": "0",
                "desc": "元素的 y 像素位置。",
                "children": []
            },
            {
                "name": "rotation",
                "type": "number",
                "default": "0",
                "desc": "元素的旋转",
                "children": []
            },
            {
                "name": "scaleX",
                "type": "number",
                "default": "1",
                "desc": "元素在 x 方向上的缩放。",
                "children": []
            },
            {
                "name": "scaleY",
                "type": "number",
                "default": "1",
                "desc": "元素在 y 方向上的缩放。",
                "children": []
            },
            {
                "name": "originX",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 x 像素位置。",
                "children": []
            },
            {
                "name": "originY",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 y 像素位置。",
                "children": []
            },
            {
                "name": "left",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-polygon.left) 和 [right](~graphic.elements-polygon.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-polygon.left) 或 [right](~graphic.elements-polygon.right)，则 [shape](~graphic.elements-polygon.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "right",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-polygon.left) 和 [right](~graphic.elements-polygon.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-polygon.left) 或 [right](~graphic.elements-polygon.right)，则 [shape](~graphic.elements-polygon.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "top",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-polygon.top) 和 [bottom](~graphic.elements-polygon.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-polygon.top) 或 [bottom](~graphic.elements-polygon.bottom)，则 [shape](~graphic.elements-polygon.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bottom",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-polygon.top) 和 [bottom](~graphic.elements-polygon.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-polygon.top) 或 [bottom](~graphic.elements-polygon.bottom)，则 [shape](~graphic.elements-polygon.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bounding",
                "type": "string",
                "default": "'all'",
                "desc": "决定此图形元素在定位时，对自身的包围盒计算方式。\n\n参见例子：\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\n可取值：\n\n+ `'all'`：（默认）\n表示用自身以及子节点整体的经过 transform 后的包围盒进行定位。\n这种方式易于使整体都限制在父元素范围中。\n\n+ `'raw'`：\n表示仅仅用自身（不包括子节点）的没经过 tranform 的包围盒进行定位。\n这种方式易于内容超出父元素范围的定位方式。",
                "children": []
            },
            {
                "name": "z",
                "type": "number",
                "default": "0",
                "desc": "z 方向的高度，决定层叠关系。",
                "children": []
            },
            {
                "name": "zlevel",
                "type": "number",
                "default": "0",
                "desc": "决定此元素绘制在哪个 canvas 层中。注意，越多 canvas 层会占用越多资源。",
                "children": []
            },
            {
                "name": "info",
                "type": "*",
                "desc": "用户定义的任意数据，可以在 event listener 中访问，如：\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                "children": []
            },
            {
                "name": "silent",
                "type": "boolean",
                "default": "false",
                "desc": "是否不响应鼠标以及触摸事件。",
                "children": []
            },
            {
                "name": "invisible",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否可见。",
                "children": []
            },
            {
                "name": "ignore",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否完全被忽略（既不渲染，也不响应事件）。",
                "children": []
            },
            {
                "name": "textContent",
                "type": "Object",
                "desc": "这是一个文本定义，附着在一个节点上，会依据 `textConfig` 配置，相对于节点布局。\n\n\n里面的属性同于 [text](option.html#graphic.elements-text)。",
                "children": []
            },
            {
                "name": "textConfig",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "position",
                        "type": "",
                        "default": "'inside'",
                        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "desc": "`textContent` 的旋转弧度。",
                        "children": []
                    },
                    {
                        "name": "layoutRect",
                        "type": "Object",
                        "desc": "`textContent` 根据此矩形来布局位置。\n默认是节点的包围盒。\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
                        "children": []
                    },
                    {
                        "name": "offset",
                        "type": "Array",
                        "desc": "`textContent` 的偏移。\n\n`offset` 和 `position` 的区别是，`offset` 是旋转（rotation）后计算。\n\n#### origin\n\n`origin` 相对于节点的包围盒。\n可以是百分数。\n如果指定为 `'center'`，则定位在包围盒中心。\n\n只有当 `position` and `rotation` 都设置时，生效。\n\n+ 如 `[12, 33]`\n+ 或如 `['50%', '50%']`\n+ 'center'",
                        "children": []
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "default": "5",
                        "desc": "距离 `layoutRect` 的距离。",
                        "children": []
                    },
                    {
                        "name": "local",
                        "type": "boolean",
                        "default": "false",
                        "desc": "如果 `true` 的话，会采用节点的 transform。",
                        "children": []
                    },
                    {
                        "name": "insideFill",
                        "type": "string",
                        "desc": "`insideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\n在绝大多数场景下，\"auto-calculated-fill\" 是白色。",
                        "children": []
                    },
                    {
                        "name": "insideStroke",
                        "type": "string",
                        "desc": "`insideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会和节点的 `fill` 相同，如果 `fill` 没有的话则为 `null`。",
                        "children": []
                    },
                    {
                        "name": "outsideFill",
                        "type": "string",
                        "desc": "`outsideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 \"inside\"，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
                        "children": []
                    },
                    {
                        "name": "outsideStroke",
                        "type": "string",
                        "desc": "`outsideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 不是 \"inside\"，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会为一个近似于白色的颜色，来区别于背景。",
                        "children": []
                    },
                    {
                        "name": "inside",
                        "type": "boolean",
                        "desc": "如果确定文本是在节点中的话，则此可设置为 `true`，避免 echarts 额外猜测。",
                        "children": []
                    }
                ]
            },
            {
                "name": "cursor",
                "type": "enum",
                "desc": "鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 `cursor`。",
                "children": [],
                "options": "'auto','pointer','move'"
            },
            {
                "name": "draggable",
                "type": "boolean",
                "default": "false",
                "desc": "图形元素是否可以被拖拽。",
                "children": []
            },
            {
                "name": "progressive",
                "type": "boolean",
                "default": "false",
                "desc": "是否渐进式渲染。当图形元素过多时才使用。",
                "children": []
            },
            {
                "name": "shape",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "points",
                        "type": "Array",
                        "desc": "点列表，用于定义形状，如 `[[22, 44], [44, 55], [11, 44], ...]`",
                        "children": []
                    },
                    {
                        "name": "smooth",
                        "type": [
                            "number",
                            "string"
                        ],
                        "default": "undefined",
                        "desc": "是否平滑曲线。\n\n+ 如果为 number：表示贝塞尔 (bezier) 差值平滑，smooth 指定了平滑等级，范围 `[0, 1]`。\n+ 如果为 `'spline'`：表示 Catmull-Rom spline 差值平滑。",
                        "children": []
                    },
                    {
                        "name": "smoothConstraint",
                        "type": "boolean",
                        "default": "false",
                        "desc": "是否将平滑曲线约束在包围盒中。`smooth` 为 `number`（bezier）时生效。",
                        "children": []
                    }
                ]
            },
            {
                "name": "style",
                "type": "Object",
                "desc": "注：关于图形元素中更多的样式设置（例如 [富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)），参见 [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable) 中的 style 相关属性。\n\n注意，这里图形元素的样式属性名称直接源于 zrender，和 `echarts label`、`echarts itemStyle` 等处同样含义的样式属性名称或有不同。例如，有如下对应：\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
                "children": [
                    {
                        "name": "fill",
                        "type": "string",
                        "default": "'#000'",
                        "desc": "填充色。",
                        "children": []
                    },
                    {
                        "name": "stroke",
                        "type": "string",
                        "default": "null",
                        "desc": "笔画颜色。",
                        "children": []
                    },
                    {
                        "name": "lineWidth",
                        "type": "number",
                        "default": "0",
                        "desc": "笔画宽度。",
                        "children": []
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影宽度。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影 X 方向偏移。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影 Y 方向偏移。",
                        "children": []
                    },
                    {
                        "name": "shadowColor",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影颜色。",
                        "children": []
                    }
                ]
            },
            {
                "name": "focus",
                "type": "string",
                "default": "'none'",
                "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在高亮图形时，是否淡出其它数据的图形已达到聚焦的效果。支持如下配置：\n\n+ `'none'` 不淡出其它图形，默认使用该配置。\n+ `'self'` 只聚焦（不淡出）当前高亮的数据的图形。\n+ `'series'` 聚焦当前高亮的数据所在的系列的所有图形。",
                "children": []
            },
            {
                "name": "blurScope",
                "type": "string",
                "default": "'coordinateSystem'",
                "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在开启`focus`的时候，可以通过`blurScope`配置淡出的范围。支持如下配置\n\n+ `'coordinateSystem'` 淡出范围为坐标系，默认使用该配置。\n+ `'series'` 淡出范围为系列。\n+ `'global'` 淡出范围为全局。",
                "children": []
            },
            {
                "name": "onclick",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseover",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseout",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousemove",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousewheel",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousedown",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseup",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondrag",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragstart",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragend",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragenter",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragleave",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragover",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondrop",
                "type": "Function",
                "desc": "",
                "children": []
            }
        ]
    },
    {
        "name": "elements.polyline",
        "type": "Object",
        "desc": "折线。",
        "children": [
            {
                "name": "type",
                "type": "string",
                "default": "polyline",
                "desc": "用 setOption 首次设定图形元素时必须指定。\n可取值：\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
                "children": []
            },
            {
                "name": "id",
                "type": "string",
                "default": "undefined",
                "desc": "id 用于在更新或删除图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\n\n\n### $action(string) = 'merge'\n\nsetOption 时指定本次对该图形元素的操作行为。\n\n可取值：\n+ `'merge'`：如果已有元素，则新的配置项和已有的设定进行 merge。如果没有则新建。\n+ `'replace'`：如果已有元素，删除之，新建元素替代之。\n+ `'remove'`：删除元素。",
                "children": []
            },
            {
                "name": "x",
                "type": "number",
                "default": "0",
                "desc": "元素的 x 像素位置。",
                "children": []
            },
            {
                "name": "y",
                "type": "number",
                "default": "0",
                "desc": "元素的 y 像素位置。",
                "children": []
            },
            {
                "name": "rotation",
                "type": "number",
                "default": "0",
                "desc": "元素的旋转",
                "children": []
            },
            {
                "name": "scaleX",
                "type": "number",
                "default": "1",
                "desc": "元素在 x 方向上的缩放。",
                "children": []
            },
            {
                "name": "scaleY",
                "type": "number",
                "default": "1",
                "desc": "元素在 y 方向上的缩放。",
                "children": []
            },
            {
                "name": "originX",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 x 像素位置。",
                "children": []
            },
            {
                "name": "originY",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 y 像素位置。",
                "children": []
            },
            {
                "name": "left",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-polyline.left) 和 [right](~graphic.elements-polyline.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-polyline.left) 或 [right](~graphic.elements-polyline.right)，则 [shape](~graphic.elements-polyline.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "right",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-polyline.left) 和 [right](~graphic.elements-polyline.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-polyline.left) 或 [right](~graphic.elements-polyline.right)，则 [shape](~graphic.elements-polyline.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "top",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-polyline.top) 和 [bottom](~graphic.elements-polyline.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-polyline.top) 或 [bottom](~graphic.elements-polyline.bottom)，则 [shape](~graphic.elements-polyline.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bottom",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-polyline.top) 和 [bottom](~graphic.elements-polyline.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-polyline.top) 或 [bottom](~graphic.elements-polyline.bottom)，则 [shape](~graphic.elements-polyline.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bounding",
                "type": "string",
                "default": "'all'",
                "desc": "决定此图形元素在定位时，对自身的包围盒计算方式。\n\n参见例子：\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\n可取值：\n\n+ `'all'`：（默认）\n表示用自身以及子节点整体的经过 transform 后的包围盒进行定位。\n这种方式易于使整体都限制在父元素范围中。\n\n+ `'raw'`：\n表示仅仅用自身（不包括子节点）的没经过 tranform 的包围盒进行定位。\n这种方式易于内容超出父元素范围的定位方式。",
                "children": []
            },
            {
                "name": "z",
                "type": "number",
                "default": "0",
                "desc": "z 方向的高度，决定层叠关系。",
                "children": []
            },
            {
                "name": "zlevel",
                "type": "number",
                "default": "0",
                "desc": "决定此元素绘制在哪个 canvas 层中。注意，越多 canvas 层会占用越多资源。",
                "children": []
            },
            {
                "name": "info",
                "type": "*",
                "desc": "用户定义的任意数据，可以在 event listener 中访问，如：\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                "children": []
            },
            {
                "name": "silent",
                "type": "boolean",
                "default": "false",
                "desc": "是否不响应鼠标以及触摸事件。",
                "children": []
            },
            {
                "name": "invisible",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否可见。",
                "children": []
            },
            {
                "name": "ignore",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否完全被忽略（既不渲染，也不响应事件）。",
                "children": []
            },
            {
                "name": "textContent",
                "type": "Object",
                "desc": "这是一个文本定义，附着在一个节点上，会依据 `textConfig` 配置，相对于节点布局。\n\n\n里面的属性同于 [text](option.html#graphic.elements-text)。",
                "children": []
            },
            {
                "name": "textConfig",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "position",
                        "type": "",
                        "default": "'inside'",
                        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "desc": "`textContent` 的旋转弧度。",
                        "children": []
                    },
                    {
                        "name": "layoutRect",
                        "type": "Object",
                        "desc": "`textContent` 根据此矩形来布局位置。\n默认是节点的包围盒。\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
                        "children": []
                    },
                    {
                        "name": "offset",
                        "type": "Array",
                        "desc": "`textContent` 的偏移。\n\n`offset` 和 `position` 的区别是，`offset` 是旋转（rotation）后计算。\n\n#### origin\n\n`origin` 相对于节点的包围盒。\n可以是百分数。\n如果指定为 `'center'`，则定位在包围盒中心。\n\n只有当 `position` and `rotation` 都设置时，生效。\n\n+ 如 `[12, 33]`\n+ 或如 `['50%', '50%']`\n+ 'center'",
                        "children": []
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "default": "5",
                        "desc": "距离 `layoutRect` 的距离。",
                        "children": []
                    },
                    {
                        "name": "local",
                        "type": "boolean",
                        "default": "false",
                        "desc": "如果 `true` 的话，会采用节点的 transform。",
                        "children": []
                    },
                    {
                        "name": "insideFill",
                        "type": "string",
                        "desc": "`insideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\n在绝大多数场景下，\"auto-calculated-fill\" 是白色。",
                        "children": []
                    },
                    {
                        "name": "insideStroke",
                        "type": "string",
                        "desc": "`insideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会和节点的 `fill` 相同，如果 `fill` 没有的话则为 `null`。",
                        "children": []
                    },
                    {
                        "name": "outsideFill",
                        "type": "string",
                        "desc": "`outsideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 \"inside\"，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
                        "children": []
                    },
                    {
                        "name": "outsideStroke",
                        "type": "string",
                        "desc": "`outsideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 不是 \"inside\"，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会为一个近似于白色的颜色，来区别于背景。",
                        "children": []
                    },
                    {
                        "name": "inside",
                        "type": "boolean",
                        "desc": "如果确定文本是在节点中的话，则此可设置为 `true`，避免 echarts 额外猜测。",
                        "children": []
                    }
                ]
            },
            {
                "name": "cursor",
                "type": "enum",
                "desc": "鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 `cursor`。",
                "children": [],
                "options": "'auto','pointer','move'"
            },
            {
                "name": "draggable",
                "type": "boolean",
                "default": "false",
                "desc": "图形元素是否可以被拖拽。",
                "children": []
            },
            {
                "name": "progressive",
                "type": "boolean",
                "default": "false",
                "desc": "是否渐进式渲染。当图形元素过多时才使用。",
                "children": []
            },
            {
                "name": "shape",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "points",
                        "type": "Array",
                        "desc": "点列表，用于定义形状，如 `[[22, 44], [44, 55], [11, 44], ...]`",
                        "children": []
                    },
                    {
                        "name": "smooth",
                        "type": [
                            "number",
                            "string"
                        ],
                        "default": "undefined",
                        "desc": "是否平滑曲线。\n\n+ 如果为 number：表示贝塞尔 (bezier) 差值平滑，smooth 指定了平滑等级，范围 `[0, 1]`。\n+ 如果为 `'spline'`：表示 Catmull-Rom spline 差值平滑。",
                        "children": []
                    },
                    {
                        "name": "smoothConstraint",
                        "type": "boolean",
                        "default": "false",
                        "desc": "是否将平滑曲线约束在包围盒中。`smooth` 为 `number`（bezier）时生效。",
                        "children": []
                    }
                ]
            },
            {
                "name": "style",
                "type": "Object",
                "desc": "注：关于图形元素中更多的样式设置（例如 [富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)），参见 [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable) 中的 style 相关属性。\n\n注意，这里图形元素的样式属性名称直接源于 zrender，和 `echarts label`、`echarts itemStyle` 等处同样含义的样式属性名称或有不同。例如，有如下对应：\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
                "children": [
                    {
                        "name": "fill",
                        "type": "string",
                        "default": "null",
                        "desc": "填充色。",
                        "children": []
                    },
                    {
                        "name": "stroke",
                        "type": "string",
                        "default": "\"#000\"",
                        "desc": "笔画颜色。",
                        "children": []
                    },
                    {
                        "name": "lineWidth",
                        "type": "number",
                        "default": "5",
                        "desc": "笔画宽度。",
                        "children": []
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影宽度。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影 X 方向偏移。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影 Y 方向偏移。",
                        "children": []
                    },
                    {
                        "name": "shadowColor",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影颜色。",
                        "children": []
                    }
                ]
            },
            {
                "name": "focus",
                "type": "string",
                "default": "'none'",
                "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在高亮图形时，是否淡出其它数据的图形已达到聚焦的效果。支持如下配置：\n\n+ `'none'` 不淡出其它图形，默认使用该配置。\n+ `'self'` 只聚焦（不淡出）当前高亮的数据的图形。\n+ `'series'` 聚焦当前高亮的数据所在的系列的所有图形。",
                "children": []
            },
            {
                "name": "blurScope",
                "type": "string",
                "default": "'coordinateSystem'",
                "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在开启`focus`的时候，可以通过`blurScope`配置淡出的范围。支持如下配置\n\n+ `'coordinateSystem'` 淡出范围为坐标系，默认使用该配置。\n+ `'series'` 淡出范围为系列。\n+ `'global'` 淡出范围为全局。",
                "children": []
            },
            {
                "name": "onclick",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseover",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseout",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousemove",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousewheel",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousedown",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseup",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondrag",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragstart",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragend",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragenter",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragleave",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragover",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondrop",
                "type": "Function",
                "desc": "",
                "children": []
            }
        ]
    },
    {
        "name": "elements.line",
        "type": "Object",
        "desc": "直线。",
        "children": [
            {
                "name": "type",
                "type": "string",
                "default": "line",
                "desc": "用 setOption 首次设定图形元素时必须指定。\n可取值：\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
                "children": []
            },
            {
                "name": "id",
                "type": "string",
                "default": "undefined",
                "desc": "id 用于在更新或删除图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\n\n\n### $action(string) = 'merge'\n\nsetOption 时指定本次对该图形元素的操作行为。\n\n可取值：\n+ `'merge'`：如果已有元素，则新的配置项和已有的设定进行 merge。如果没有则新建。\n+ `'replace'`：如果已有元素，删除之，新建元素替代之。\n+ `'remove'`：删除元素。",
                "children": []
            },
            {
                "name": "x",
                "type": "number",
                "default": "0",
                "desc": "元素的 x 像素位置。",
                "children": []
            },
            {
                "name": "y",
                "type": "number",
                "default": "0",
                "desc": "元素的 y 像素位置。",
                "children": []
            },
            {
                "name": "rotation",
                "type": "number",
                "default": "0",
                "desc": "元素的旋转",
                "children": []
            },
            {
                "name": "scaleX",
                "type": "number",
                "default": "1",
                "desc": "元素在 x 方向上的缩放。",
                "children": []
            },
            {
                "name": "scaleY",
                "type": "number",
                "default": "1",
                "desc": "元素在 y 方向上的缩放。",
                "children": []
            },
            {
                "name": "originX",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 x 像素位置。",
                "children": []
            },
            {
                "name": "originY",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 y 像素位置。",
                "children": []
            },
            {
                "name": "left",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-line.left) 和 [right](~graphic.elements-line.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-line.left) 或 [right](~graphic.elements-line.right)，则 [shape](~graphic.elements-line.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "right",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-line.left) 和 [right](~graphic.elements-line.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-line.left) 或 [right](~graphic.elements-line.right)，则 [shape](~graphic.elements-line.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "top",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-line.top) 和 [bottom](~graphic.elements-line.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-line.top) 或 [bottom](~graphic.elements-line.bottom)，则 [shape](~graphic.elements-line.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bottom",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-line.top) 和 [bottom](~graphic.elements-line.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-line.top) 或 [bottom](~graphic.elements-line.bottom)，则 [shape](~graphic.elements-line.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bounding",
                "type": "string",
                "default": "'all'",
                "desc": "决定此图形元素在定位时，对自身的包围盒计算方式。\n\n参见例子：\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\n可取值：\n\n+ `'all'`：（默认）\n表示用自身以及子节点整体的经过 transform 后的包围盒进行定位。\n这种方式易于使整体都限制在父元素范围中。\n\n+ `'raw'`：\n表示仅仅用自身（不包括子节点）的没经过 tranform 的包围盒进行定位。\n这种方式易于内容超出父元素范围的定位方式。",
                "children": []
            },
            {
                "name": "z",
                "type": "number",
                "default": "0",
                "desc": "z 方向的高度，决定层叠关系。",
                "children": []
            },
            {
                "name": "zlevel",
                "type": "number",
                "default": "0",
                "desc": "决定此元素绘制在哪个 canvas 层中。注意，越多 canvas 层会占用越多资源。",
                "children": []
            },
            {
                "name": "info",
                "type": "*",
                "desc": "用户定义的任意数据，可以在 event listener 中访问，如：\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                "children": []
            },
            {
                "name": "silent",
                "type": "boolean",
                "default": "false",
                "desc": "是否不响应鼠标以及触摸事件。",
                "children": []
            },
            {
                "name": "invisible",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否可见。",
                "children": []
            },
            {
                "name": "ignore",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否完全被忽略（既不渲染，也不响应事件）。",
                "children": []
            },
            {
                "name": "textContent",
                "type": "Object",
                "desc": "这是一个文本定义，附着在一个节点上，会依据 `textConfig` 配置，相对于节点布局。\n\n\n里面的属性同于 [text](option.html#graphic.elements-text)。",
                "children": []
            },
            {
                "name": "textConfig",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "position",
                        "type": "",
                        "default": "'inside'",
                        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "desc": "`textContent` 的旋转弧度。",
                        "children": []
                    },
                    {
                        "name": "layoutRect",
                        "type": "Object",
                        "desc": "`textContent` 根据此矩形来布局位置。\n默认是节点的包围盒。\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
                        "children": []
                    },
                    {
                        "name": "offset",
                        "type": "Array",
                        "desc": "`textContent` 的偏移。\n\n`offset` 和 `position` 的区别是，`offset` 是旋转（rotation）后计算。\n\n#### origin\n\n`origin` 相对于节点的包围盒。\n可以是百分数。\n如果指定为 `'center'`，则定位在包围盒中心。\n\n只有当 `position` and `rotation` 都设置时，生效。\n\n+ 如 `[12, 33]`\n+ 或如 `['50%', '50%']`\n+ 'center'",
                        "children": []
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "default": "5",
                        "desc": "距离 `layoutRect` 的距离。",
                        "children": []
                    },
                    {
                        "name": "local",
                        "type": "boolean",
                        "default": "false",
                        "desc": "如果 `true` 的话，会采用节点的 transform。",
                        "children": []
                    },
                    {
                        "name": "insideFill",
                        "type": "string",
                        "desc": "`insideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\n在绝大多数场景下，\"auto-calculated-fill\" 是白色。",
                        "children": []
                    },
                    {
                        "name": "insideStroke",
                        "type": "string",
                        "desc": "`insideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会和节点的 `fill` 相同，如果 `fill` 没有的话则为 `null`。",
                        "children": []
                    },
                    {
                        "name": "outsideFill",
                        "type": "string",
                        "desc": "`outsideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 \"inside\"，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
                        "children": []
                    },
                    {
                        "name": "outsideStroke",
                        "type": "string",
                        "desc": "`outsideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 不是 \"inside\"，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会为一个近似于白色的颜色，来区别于背景。",
                        "children": []
                    },
                    {
                        "name": "inside",
                        "type": "boolean",
                        "desc": "如果确定文本是在节点中的话，则此可设置为 `true`，避免 echarts 额外猜测。",
                        "children": []
                    }
                ]
            },
            {
                "name": "cursor",
                "type": "enum",
                "desc": "鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 `cursor`。",
                "children": [],
                "options": "'auto','pointer','move'"
            },
            {
                "name": "draggable",
                "type": "boolean",
                "default": "false",
                "desc": "图形元素是否可以被拖拽。",
                "children": []
            },
            {
                "name": "progressive",
                "type": "boolean",
                "default": "false",
                "desc": "是否渐进式渲染。当图形元素过多时才使用。",
                "children": []
            },
            {
                "name": "shape",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "x1",
                        "type": "number",
                        "default": "0",
                        "desc": "开始点的 x 值。",
                        "children": []
                    },
                    {
                        "name": "y1",
                        "type": "number",
                        "default": "0",
                        "desc": "开始点的 y 值。",
                        "children": []
                    },
                    {
                        "name": "x2",
                        "type": "number",
                        "default": "0",
                        "desc": "结束点的 x 值。",
                        "children": []
                    },
                    {
                        "name": "y2",
                        "type": "number",
                        "default": "0",
                        "desc": "结束点的 y 值。",
                        "children": []
                    },
                    {
                        "name": "percent",
                        "type": "number",
                        "default": "1",
                        "desc": "线画到百分之多少就不画了。值的范围：[0, 1]。",
                        "children": []
                    }
                ]
            },
            {
                "name": "style",
                "type": "Object",
                "desc": "注：关于图形元素中更多的样式设置（例如 [富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)），参见 [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable) 中的 style 相关属性。\n\n注意，这里图形元素的样式属性名称直接源于 zrender，和 `echarts label`、`echarts itemStyle` 等处同样含义的样式属性名称或有不同。例如，有如下对应：\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
                "children": [
                    {
                        "name": "fill",
                        "type": "string",
                        "default": "null",
                        "desc": "填充色。",
                        "children": []
                    },
                    {
                        "name": "stroke",
                        "type": "string",
                        "default": "\"#000\"",
                        "desc": "笔画颜色。",
                        "children": []
                    },
                    {
                        "name": "lineWidth",
                        "type": "number",
                        "default": "5",
                        "desc": "笔画宽度。",
                        "children": []
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影宽度。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影 X 方向偏移。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影 Y 方向偏移。",
                        "children": []
                    },
                    {
                        "name": "shadowColor",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影颜色。",
                        "children": []
                    }
                ]
            },
            {
                "name": "focus",
                "type": "string",
                "default": "'none'",
                "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在高亮图形时，是否淡出其它数据的图形已达到聚焦的效果。支持如下配置：\n\n+ `'none'` 不淡出其它图形，默认使用该配置。\n+ `'self'` 只聚焦（不淡出）当前高亮的数据的图形。\n+ `'series'` 聚焦当前高亮的数据所在的系列的所有图形。",
                "children": []
            },
            {
                "name": "blurScope",
                "type": "string",
                "default": "'coordinateSystem'",
                "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在开启`focus`的时候，可以通过`blurScope`配置淡出的范围。支持如下配置\n\n+ `'coordinateSystem'` 淡出范围为坐标系，默认使用该配置。\n+ `'series'` 淡出范围为系列。\n+ `'global'` 淡出范围为全局。",
                "children": []
            },
            {
                "name": "onclick",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseover",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseout",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousemove",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousewheel",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousedown",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseup",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondrag",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragstart",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragend",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragenter",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragleave",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragover",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondrop",
                "type": "Function",
                "desc": "",
                "children": []
            }
        ]
    },
    {
        "name": "elements.bezierCurve",
        "type": "Object",
        "desc": "二次或三次贝塞尔曲线。",
        "children": [
            {
                "name": "type",
                "type": "string",
                "default": "bezierCurve",
                "desc": "用 setOption 首次设定图形元素时必须指定。\n可取值：\n\n\n\n[image](~graphic.elements-image),\n[text](~graphic.elements-text),\n[circle](~graphic.elements-circle),\n[sector](~graphic.elements-sector),\n[ring](~graphic.elements-ring),\n[polygon](~graphic.elements-polygon),\n[polyline](~graphic.elements-polyline),\n[rect](~graphic.elements-rect),\n[line](~graphic.elements-line),\n[bezierCurve](~graphic.elements-bezierCurve),\n[arc](~graphic.elements-arc),\n[group](~graphic.elements-group),",
                "children": []
            },
            {
                "name": "id",
                "type": "string",
                "default": "undefined",
                "desc": "id 用于在更新或删除图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\n\n\n### $action(string) = 'merge'\n\nsetOption 时指定本次对该图形元素的操作行为。\n\n可取值：\n+ `'merge'`：如果已有元素，则新的配置项和已有的设定进行 merge。如果没有则新建。\n+ `'replace'`：如果已有元素，删除之，新建元素替代之。\n+ `'remove'`：删除元素。",
                "children": []
            },
            {
                "name": "x",
                "type": "number",
                "default": "0",
                "desc": "元素的 x 像素位置。",
                "children": []
            },
            {
                "name": "y",
                "type": "number",
                "default": "0",
                "desc": "元素的 y 像素位置。",
                "children": []
            },
            {
                "name": "rotation",
                "type": "number",
                "default": "0",
                "desc": "元素的旋转",
                "children": []
            },
            {
                "name": "scaleX",
                "type": "number",
                "default": "1",
                "desc": "元素在 x 方向上的缩放。",
                "children": []
            },
            {
                "name": "scaleY",
                "type": "number",
                "default": "1",
                "desc": "元素在 y 方向上的缩放。",
                "children": []
            },
            {
                "name": "originX",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 x 像素位置。",
                "children": []
            },
            {
                "name": "originY",
                "type": "number",
                "default": "0",
                "desc": "元素旋转和缩放原点的 y 像素位置。",
                "children": []
            },
            {
                "name": "left",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-bezierCurve.left) 和 [right](~graphic.elements-bezierCurve.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-bezierCurve.left) 或 [right](~graphic.elements-bezierCurve.right)，则 [shape](~graphic.elements-bezierCurve.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "right",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的高和此百分比计算出最终值。\n+ `'center'`：表示自动居中。\n\n\n[left](~graphic.elements-bezierCurve.left) 和 [right](~graphic.elements-bezierCurve.right) 只有一个可以生效。\n\n如果指定 [left](~graphic.elements-bezierCurve.left) 或 [right](~graphic.elements-bezierCurve.right)，则 [shape](~graphic.elements-bezierCurve.shape) 里的 `x`、`cx` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "top",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-bezierCurve.top) 和 [bottom](~graphic.elements-bezierCurve.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-bezierCurve.top) 或 [bottom](~graphic.elements-bezierCurve.bottom)，则 [shape](~graphic.elements-bezierCurve.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bottom",
                "type": [
                    "number",
                    "string"
                ],
                "default": "undefined",
                "desc": "描述怎么根据父元素进行定位。\n\n『父元素』是指：如果是顶层元素，父元素是 echarts 图表容器。如果是 `group` 的子元素，父元素就是 `group` 元素。\n\n值的类型可以是：\n\n+ `number`：表示像素值。\n+ 百分比值：如 '33%'，用父元素的宽和此百分比计算出最终值。\n+ `'middle'`：表示自动居中。\n\n\n[top](~graphic.elements-bezierCurve.top) 和 [bottom](~graphic.elements-bezierCurve.bottom) 只有一个可以生效。\n\n如果指定 [top](~graphic.elements-bezierCurve.top) 或 [bottom](~graphic.elements-bezierCurve.bottom)，则 [shape](~graphic.elements-bezierCurve.shape) 里的 `y`、`cy` 等定位属性不再生效。",
                "children": []
            },
            {
                "name": "bounding",
                "type": "string",
                "default": "'all'",
                "desc": "决定此图形元素在定位时，对自身的包围盒计算方式。\n\n参见例子：\n~[500x500](doc-example/graphic-bounding&edit=1&reset=1)\n\n可取值：\n\n+ `'all'`：（默认）\n表示用自身以及子节点整体的经过 transform 后的包围盒进行定位。\n这种方式易于使整体都限制在父元素范围中。\n\n+ `'raw'`：\n表示仅仅用自身（不包括子节点）的没经过 tranform 的包围盒进行定位。\n这种方式易于内容超出父元素范围的定位方式。",
                "children": []
            },
            {
                "name": "z",
                "type": "number",
                "default": "0",
                "desc": "z 方向的高度，决定层叠关系。",
                "children": []
            },
            {
                "name": "zlevel",
                "type": "number",
                "default": "0",
                "desc": "决定此元素绘制在哪个 canvas 层中。注意，越多 canvas 层会占用越多资源。",
                "children": []
            },
            {
                "name": "info",
                "type": "*",
                "desc": "用户定义的任意数据，可以在 event listener 中访问，如：\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                "children": []
            },
            {
                "name": "silent",
                "type": "boolean",
                "default": "false",
                "desc": "是否不响应鼠标以及触摸事件。",
                "children": []
            },
            {
                "name": "invisible",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否可见。",
                "children": []
            },
            {
                "name": "ignore",
                "type": "boolean",
                "default": "false",
                "desc": "节点是否完全被忽略（既不渲染，也不响应事件）。",
                "children": []
            },
            {
                "name": "textContent",
                "type": "Object",
                "desc": "这是一个文本定义，附着在一个节点上，会依据 `textConfig` 配置，相对于节点布局。\n\n\n里面的属性同于 [text](option.html#graphic.elements-text)。",
                "children": []
            },
            {
                "name": "textConfig",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "position",
                        "type": "",
                        "default": "'inside'",
                        "desc": "Position of `textContent`.\n\n+ 'left'\n+ 'right'\n+ 'top'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideTopRight'\n+ 'insideBottomLeft'\n+ 'insideBottomRight'\n+ or like `[12, 33]`\n+ or like `['50%', '50%']`",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "desc": "`textContent` 的旋转弧度。",
                        "children": []
                    },
                    {
                        "name": "layoutRect",
                        "type": "Object",
                        "desc": "`textContent` 根据此矩形来布局位置。\n默认是节点的包围盒。\n\n```js\n{\nx: number\ny: number\nwidth: number\nheight: number\n}\n```",
                        "children": []
                    },
                    {
                        "name": "offset",
                        "type": "Array",
                        "desc": "`textContent` 的偏移。\n\n`offset` 和 `position` 的区别是，`offset` 是旋转（rotation）后计算。\n\n#### origin\n\n`origin` 相对于节点的包围盒。\n可以是百分数。\n如果指定为 `'center'`，则定位在包围盒中心。\n\n只有当 `position` and `rotation` 都设置时，生效。\n\n+ 如 `[12, 33]`\n+ 或如 `['50%', '50%']`\n+ 'center'",
                        "children": []
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "default": "5",
                        "desc": "距离 `layoutRect` 的距离。",
                        "children": []
                    },
                    {
                        "name": "local",
                        "type": "boolean",
                        "default": "false",
                        "desc": "如果 `true` 的话，会采用节点的 transform。",
                        "children": []
                    },
                    {
                        "name": "insideFill",
                        "type": "string",
                        "desc": "`insideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.insideFill` > \"auto-calculated-fill\"\n在绝大多数场景下，\"auto-calculated-fill\" 是白色。",
                        "children": []
                    },
                    {
                        "name": "insideStroke",
                        "type": "string",
                        "desc": "`insideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 `\"inside\"`，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.insideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会和节点的 `fill` 相同，如果 `fill` 没有的话则为 `null`。",
                        "children": []
                    },
                    {
                        "name": "outsideFill",
                        "type": "string",
                        "desc": "`outsideFill` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 是 \"inside\"，它的 `fill` 会按这个优先级来选取：\n`textContent.style.fill` > `textConfig.outsideFill` > #000",
                        "children": []
                    },
                    {
                        "name": "outsideStroke",
                        "type": "string",
                        "desc": "`outsideStroke` 可以是一个颜色字符串，或者空着。\n\n如果 `textContent` 不是 \"inside\"，它的 `stroke` 会按这个优先级来选取：\n`textContent.style.stroke` > `textConfig.outsideStroke` > \"auto-calculated-stroke\"\n\n\"auto-calculated-stroke\" 的规则是：\n\n+ 如果\n+ (A) `fill` 在 style 中被指定（无论是在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ 或者 (B) 需要画文字的背景（无论是定义在 `textContent.style` 还是 `textContent.style.rich` 里）\n+ \"auto-calculated-stroke\" 都会为 `null`。\n+ 否则\n+ \"auto-calculated-stroke\" 会为一个近似于白色的颜色，来区别于背景。",
                        "children": []
                    },
                    {
                        "name": "inside",
                        "type": "boolean",
                        "desc": "如果确定文本是在节点中的话，则此可设置为 `true`，避免 echarts 额外猜测。",
                        "children": []
                    }
                ]
            },
            {
                "name": "cursor",
                "type": "enum",
                "desc": "鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 `cursor`。",
                "children": [],
                "options": "'auto','pointer','move'"
            },
            {
                "name": "draggable",
                "type": "boolean",
                "default": "false",
                "desc": "图形元素是否可以被拖拽。",
                "children": []
            },
            {
                "name": "progressive",
                "type": "boolean",
                "default": "false",
                "desc": "是否渐进式渲染。当图形元素过多时才使用。",
                "children": []
            },
            {
                "name": "shape",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "x1",
                        "type": "number",
                        "default": "0",
                        "desc": "开始点的 x 值。",
                        "children": []
                    },
                    {
                        "name": "y1",
                        "type": "number",
                        "default": "0",
                        "desc": "开始点的 y 值。",
                        "children": []
                    },
                    {
                        "name": "x2",
                        "type": "number",
                        "default": "0",
                        "desc": "结束点的 x 值。",
                        "children": []
                    },
                    {
                        "name": "y2",
                        "type": "number",
                        "default": "0",
                        "desc": "结束点的 y 值。",
                        "children": []
                    },
                    {
                        "name": "cpx1",
                        "type": "number",
                        "default": "0",
                        "desc": "控制点 x 值。",
                        "children": []
                    },
                    {
                        "name": "cpy1",
                        "type": "number",
                        "default": "0",
                        "desc": "控制点 y 值。",
                        "children": []
                    },
                    {
                        "name": "cpx2",
                        "type": "number",
                        "default": "null",
                        "desc": "第二个控制点 x 值。如果设置则开启三阶贝塞尔曲线。",
                        "children": []
                    },
                    {
                        "name": "cpy2",
                        "type": "number",
                        "default": "null",
                        "desc": "第二个控制点 y 值。如果设置则开启三阶贝塞尔曲线。",
                        "children": []
                    },
                    {
                        "name": "percent",
                        "type": "number",
                        "default": "1",
                        "desc": "画到百分之多少就不画了。值的范围：[0, 1]。",
                        "children": []
                    }
                ]
            },
            {
                "name": "style",
                "type": "Object",
                "desc": "注：关于图形元素中更多的样式设置（例如 [富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)），参见 [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable) 中的 style 相关属性。\n\n注意，这里图形元素的样式属性名称直接源于 zrender，和 `echarts label`、`echarts itemStyle` 等处同样含义的样式属性名称或有不同。例如，有如下对应：\n\n+ [itemStyle.color](~series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](~series-scatter.label.color) => `style.stroke`\n+ [label.color](~series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](~series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
                "children": [
                    {
                        "name": "fill",
                        "type": "string",
                        "default": "'#000'",
                        "desc": "填充色。",
                        "children": []
                    },
                    {
                        "name": "stroke",
                        "type": "string",
                        "default": "null",
                        "desc": "笔画颜色。",
                        "children": []
                    },
                    {
                        "name": "lineWidth",
                        "type": "number",
                        "default": "0",
                        "desc": "笔画宽度。",
                        "children": []
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影宽度。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影 X 方向偏移。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影 Y 方向偏移。",
                        "children": []
                    },
                    {
                        "name": "shadowColor",
                        "type": "number",
                        "default": "undefined",
                        "desc": "阴影颜色。",
                        "children": []
                    }
                ]
            },
            {
                "name": "focus",
                "type": "string",
                "default": "'none'",
                "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在高亮图形时，是否淡出其它数据的图形已达到聚焦的效果。支持如下配置：\n\n+ `'none'` 不淡出其它图形，默认使用该配置。\n+ `'self'` 只聚焦（不淡出）当前高亮的数据的图形。\n+ `'series'` 聚焦当前高亮的数据所在的系列的所有图形。",
                "children": []
            },
            {
                "name": "blurScope",
                "type": "string",
                "default": "'coordinateSystem'",
                "desc": "> 从 `v5.0.0` 开始支持\n\n\n\n在开启`focus`的时候，可以通过`blurScope`配置淡出的范围。支持如下配置\n\n+ `'coordinateSystem'` 淡出范围为坐标系，默认使用该配置。\n+ `'series'` 淡出范围为系列。\n+ `'global'` 淡出范围为全局。",
                "children": []
            },
            {
                "name": "onclick",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseover",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseout",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousemove",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousewheel",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmousedown",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "onmouseup",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondrag",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragstart",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragend",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragenter",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragleave",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondragover",
                "type": "Function",
                "desc": "",
                "children": []
            },
            {
                "name": "ondrop",
                "type": "Function",
                "desc": "",
                "children": []
            }
        ]
    }
]