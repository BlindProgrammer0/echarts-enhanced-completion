{
    "series-line": {
        "desc": "**折线/面积图** 折线图是用折线将各个数据点[标志][0]连接起来的图表，用于展现数据的变化趋势。可用于[直角坐标系][1]和[极坐标系][2]上。 **Tip:** 设置 [areaStyle][3] 后可以绘制面积图。 **Tip:** 配合分段型 [visualMap][4] 组件可以将折线/面积图通过不同颜色分区间。如下示例\n\n[0]: #series-line.symbol\n[1]: #grid\n[2]: #polar\n[3]: #series-line.areaStyle\n[4]: #visualMap-piecewise",
        "uiControl": {
            "type": "Object",
            "required": [
                {
                    "key": "type",
                    "value": "'line'"
                }
            ],
            "detailFileName": "series-line"
        }
    },
    "series-bar": {
        "desc": "**柱状图** 柱状图（或称条形图）是一种通过柱形的高度（横向的情况下则是宽度）来表现数据大小的一种常用图表类型。 ",
        "uiControl": {
            "type": "Object",
            "required": [
                {
                    "key": "type",
                    "value": "'bar'"
                }
            ],
            "detailFileName": "series-bar"
        }
    },
    "series-pie": {
        "desc": "**饼图** 饼图主要用于表现不同类目的数据在总和中的占比。每个的弧度表示数据数量的比例。 从 ECharts v4.6.0 版本起，我们提供了 'labelLine' 与 'edge' 两种新的布局方式。详情参见 [label.alignTo][0]。 对于一个图表中有多个饼图的场景，可以使用 [left][1]、[right][2]、[top][3]、[bottom][4]、[width][5]、[height][6] 配置每个饼图系列的位置和视口大小。[radius][7]、[label.edgeDistance][8] 等支持百分比的配置项，是相对于该配置项决定的矩形的大小而言的。 **Tip:** 饼图更适合表现数据相对于总数的百分比等关系。如果只是表示不同类目数据间的大小，建议使用 [柱状图][9]，人们对于微小的弧度差别相比于微小的长度差别更不敏感，或者也可以通过配置 [roseType][10] 显示成南丁格尔图，通过半径大小区分数据的大小。 **下面是自定义南丁格尔图的示例：**\n\n[0]: #series-pie.label.alignTo\n[1]: #series-pie.left\n[2]: #series-pie.right\n[3]: #series-pie.top\n[4]: #series-pie.bottom\n[5]: #series-pie.width\n[6]: #series-pie.height\n[7]: #series-pie.radius\n[8]: #series-pie.label.edgeDistance\n[9]: bar\n[10]: #series-pie.roseType",
        "uiControl": {
            "type": "Object",
            "required": [
                {
                    "key": "type",
                    "value": "'pie'"
                }
            ],
            "detailFileName": "series-pie"
        }
    },
    "series-scatter": {
        "desc": " 散点（气泡）图。[直角坐标系][0]上的散点图可以用来展现数据的 x，y 之间的关系，如果数据项有多个维度，其它维度的值可以通过不同大小的 [symbol][1] 展现成气泡图，也可以用颜色来表现。这些可以配合 [visualMap][2] 组件完成。 可以应用在[直角坐标系][0]，[极坐标系][3]，[地理坐标系][4]上。\n\n[0]: #grid\n[1]: #series-scatter.symbol\n[2]: #visualMap\n[3]: #polar\n[4]: #geo",
        "uiControl": {
            "type": "Object",
            "required": [
                {
                    "key": "type",
                    "value": "'scatter'"
                }
            ],
            "detailFileName": "series-scatter"
        }
    },
    "series-effectScatter": {
        "desc": " 带有涟漪特效动画的散点（气泡）图。利用动画特效可以将某些想要突出的数据进行视觉突出。 **Tip:** ECharts 2.x 中在地图上通过 markPoint 实现地图特效在 ECharts 3 中建议通过地理坐标系上的 effectScatter 实现。 ",
        "uiControl": {
            "type": "Object",
            "required": [
                {
                    "key": "type",
                    "value": "'effectScatter'"
                }
            ],
            "detailFileName": "series-effectScatter"
        }
    },
    "series-radar": {
        "desc": "**雷达图** 雷达图主要用于表现多变量的数据，例如球员的各个属性分析。依赖 [radar][0] 组件。 下面是 AQI 数据用雷达图表现的示例。\n\n[0]: #radar",
        "uiControl": {
            "type": "Object",
            "required": [
                {
                    "key": "type",
                    "value": "'radar'"
                }
            ],
            "detailFileName": "series-radar"
        }
    },
    "series-tree": {
        "desc": "**树图** 树图主要用来可视化树形数据结构，是一种特殊的层次类型，具有唯一的根节点，左子树，和右子树。 **注意：目前不支持在单个 series 中直接绘制森林，可以通过在一个 option 中配置多个 series 实现森林****树图示例：****多个 series 组合成森林示例：**",
        "uiControl": {
            "type": "Object",
            "required": [
                {
                    "key": "type",
                    "value": "'tree'"
                }
            ],
            "detailFileName": "series-tree"
        }
    },
    "series-treemap": {
        "desc": "[Treemap][0] 是一种常见的表达『层级数据』『树状数据』的可视化形式。它主要用面积的方式，便于突出展现出『树』的各层级中重要的节点。 **示例：****视觉映射：** treemap 首先是把数值映射到『面积』这种视觉元素上。 此外，也支持对数据的其他维度进行视觉映射，例如映射到颜色、颜色明暗度上。 关于视觉设置，详见 [series-treemap.levels][1]。 **下钻（drill down）：**drill down 功能即点击后才展示子层级。 设置了 [leafDepth][2] 后，下钻（drill down）功能开启。 **如下是 drill down 的例子：** 注：treemap 的配置项 和 ECharts2 相比有一些变化，一些不太成熟的配置方式不再支持或不再兼容： \n\n* center/size 方式的定位不再支持，而是统一使用 left/top/bottom/right/width/height 方式定位。\n* breadcrumb 的配置被移动到了 itemStyle/itemStyle.emphasis 外部，和 itemStyle 平级。\n* root 的设置暂时不支持。目前可以使用 zoom 的方式来查看树更下层次的细节，或者使用 [leafDepth][2] 开启 &quot;drill down&quot; 功能。\n* label 的配置被移动到了 itemStyle/itemStyle.emphasis 外部，和 itemStyle 平级。\n* itemStyle.childBorderWidth、itemStyle.childBorderColor不再支持（因为这个配置方式只能定义两层的treemap）。统一使用 [series-treemap.levels][1] 来进行各层级的定义。\n\n\n\n[0]: https://en.wikipedia.org/wiki/Treemapping\n[1]: #series-treemap.levels\n[2]: #series-treemap.leafDepth",
        "uiControl": {
            "type": "Object",
            "required": [
                {
                    "key": "type",
                    "value": "'treemap'"
                }
            ],
            "detailFileName": "series-treemap"
        }
    },
    "series-sunburst": {
        "desc": "[旭日图（Sunburst）][0]由多层的环形图组成，在数据结构上，内圈是外圈的父节点。因此，它既能像[饼图][1]一样表现局部和整体的占比，又能像[矩形树图][2]一样表现层级关系。 **示例：****数据下钻** 旭日图默认支持数据下钻，也就是说，当用户点击了某个扇形块之后，将会以该节点作为根结点显示，并且在中间出现一个返回上层节点的圆。如果不希望有数据下钻功能，可以通过将 [series-sunburst.nodeClick][3] 设置为 false 实现。\n\n[0]: https://en.wikipedia.org/wiki/Pie_chart#Ring_chart_/_Sunburst_chart_/_Multilevel_pie_chart\n[1]: #series-pie\n[2]: #series-treemap\n[3]: #series-treemap.nodeClick",
        "uiControl": {
            "type": "Object",
            "required": [
                {
                    "key": "type",
                    "value": "'sunburst'"
                }
            ],
            "detailFileName": "series-sunburst"
        }
    },
    "series-boxplot": {
        "desc": "[Boxplot][0] 中文可以称为『箱形图』、『盒须图』、『盒式图』、『盒状图』、『箱线图』，是一种用作显示一组数据分散情况资料的统计图。它能显示出一组数据的最大值、最小值、中位数、下四分位数及上四分位数。 **示例如下：** 也支持多个 series 在同一个坐标系中，参见 [例子][1]。\n\n[0]: https://en.wikipedia.org/wiki/Box_plot\n[1]: https://echarts.apache.org/examples/zh/editor.html?c=boxplot-multi&amp;edit=1&amp;reset=1",
        "uiControl": {
            "type": "Object",
            "required": [
                {
                    "key": "type",
                    "value": "'boxplot'"
                }
            ],
            "detailFileName": "series-boxplot"
        }
    },
    "series-candlestick": {
        "desc": "[Candlestick][0] 即我们常说的 K线图。 在 ECharts3 中，同时支持 'candlestick' 和 'k'这两种 'series.type'（'k' 会被自动转为 'candlestick'）。 **示例如下：**  \n**关于『涨』『跌』的颜色：** 不同国家或地区对于 K线图 的颜色定义不一样，可能是『红涨绿跌』或『红涨蓝跌』（如大陆、台湾、日本、韩国等），可能是『绿涨红跌』（如西方国家、香港、新加坡等）。K线图也不一定要用红蓝、红绿来表示涨跌，也可以是『有色/无色』等表示方法。 默认配置项，采用的是『红涨蓝跌』。如果想更改这个颜色配置，在这些配置项中更改即可： \n\n* [series-candlestick.itemStyle.color][1]：阳线填充色（即『涨』）\n* [series-candlestick.itemStyle.color0][2]：阴线填充色（即『跌』）\n* [series-candlestick.itemStyle.borderColor][3]：阳线边框色（即『涨』）\n* [series-candlestick.itemStyle.borderColor0][4]：阴线边框色（即『跌』）\n\n  \n  \n\n\n[0]: https://en.wikipedia.org/wiki/Candlestick_chart\n[1]: #series-candlestick.itemStyle.color\n[2]: #series-candlestick.itemStyle.color0\n[3]: #series-candlestick.itemStyle.borderColor\n[4]: series-candlestick.itemStyle.borderColor0",
        "uiControl": {
            "type": "Object",
            "required": [
                {
                    "key": "type",
                    "value": "'candlestick'"
                }
            ],
            "detailFileName": "series-candlestick"
        }
    },
    "series-heatmap": {
        "desc": "**热力图** 热力图主要通过颜色去表现数值的大小，必须要配合 [visualMap][0] 组件使用。 可以应用在[直角坐标系][1]以及[地理坐标系][2]上，这两个坐标系上的表现形式相差很大，直角坐标系上必须要使用两个类目轴。 下面是在直角坐标系上应用的例子： **直角坐标系：**\n\n[0]: #visualMap\n[1]: #grid\n[2]: #geo",
        "uiControl": {
            "type": "Object",
            "required": [
                {
                    "key": "type",
                    "value": "'heatmap'"
                }
            ],
            "detailFileName": "series-heatmap"
        }
    },
    "series-map": {
        "desc": "**地图。** 地图主要用于地理区域数据的可视化，配合 [visualMap][0] 组件用于展示不同区域的人口分布密度等数据。 多个[地图类型][1]相同的系列会在同一地图上显示，这时候使用第一个系列的配置项作为地图绘制的配置。 **Tip:**在 ECharts 3 中不再建议在地图类型的图表使用 markLine 和 markPoint。如果要实现点数据或者线数据的可视化，可以使用在[地理坐标系组件][2]上的[散点图][3]和[线图][4]。\n\n[0]: #visualMap\n[1]: #series-map.map\n[2]: #geo\n[3]: #series-scatter\n[4]: #series-lines",
        "uiControl": {
            "type": "Object",
            "required": [
                {
                    "key": "type",
                    "value": "'map'"
                }
            ],
            "detailFileName": "series-map"
        }
    },
    "series-parallel": {
        "desc": " 平行坐标系的系列。 **平行坐标系介绍**[平行坐标系（Parallel Coordinates）][0] 是一种常用的可视化高维数据的图表。 例如 [series-parallel.data][1] 中有如下数据： \n\n    [\n        [1,  55,  9,   56,  0.46,  18,  6,  '良'],\n        [2,  25,  11,  21,  0.65,  34,  9,  '优'],\n        [3,  56,  7,   63,  0.3,   14,  5,  '良'],\n        [4,  33,  7,   29,  0.33,  16,  6,  '优'],\n        { // 数据项也可以是 Object，从而里面能含有对线条的特殊设置。\n            value: [5,  42,  24,  44,  0.76,  40,  16, '优']\n            lineStyle: {...},\n        }\n        ...\n    ]\n    \n\n数据中，每一行是一个『数据项』，每一列属于一个『维度』。（例如上面数据每一列的含义分别是：『日期』,『AQI指数』, 『PM2.5』, 『PM10』, 『一氧化碳值』, 『二氧化氮值』, 『二氧化硫值』）。 平行坐标系适用于对这种多维数据进行可视化分析。每一个维度（每一列）对应一个坐标轴，每一个『数据项』是一条线，贯穿多个坐标轴。在坐标轴上，可以进行数据选取等操作。如下： **配置方式概要** 『平行坐标系』的 option 基本配置如下例： \n\n    option = {\n        parallelAxis: [                     // 这是一个个『坐标轴』的定义\n            {dim: 0, name: schema[0].text}, // 每个『坐标轴』有个 'dim' 属性，表示坐标轴的维度号。\n            {dim: 1, name: schema[1].text},\n            {dim: 2, name: schema[2].text},\n            {dim: 3, name: schema[3].text},\n            {dim: 4, name: schema[4].text},\n            {dim: 5, name: schema[5].text},\n            {dim: 6, name: schema[6].text},\n            {dim: 7, name: schema[7].text,\n                type: 'category',           // 坐标轴也可以支持类别型数据\n                data: ['优', '良', '轻度污染', '中度污染', '重度污染', '严重污染']\n            }\n        ],\n        parallel: {                         // 这是『坐标系』的定义\n            left: '5%',                     // 平行坐标系的位置设置\n            right: '13%',\n            bottom: '10%',\n            top: '20%',\n            parallelAxisDefault: {          // 『坐标轴』的公有属性可以配置在这里避免重复书写\n                type: 'value',\n                nameLocation: 'end',\n                nameGap: 20\n            }\n        },\n        series: [                           // 这里三个系列共用一个平行坐标系\n            {\n                name: '北京',\n                type: 'parallel',           // 这个系列类型是 'parallel'\n                data: [\n                    [1,  55,  9,   56,  0.46,  18,  6,  '良'],\n                    [2,  25,  11,  21,  0.65,  34,  9,  '优'],\n                    ...\n                ]\n            },\n            {\n                name: '上海',\n                type: 'parallel',\n                data: [\n                    [3,  56,  7,   63,  0.3,   14,  5,  '良'],\n                    [4,  33,  7,   29,  0.33,  16,  6,  '优'],\n                    ...\n                ]\n            },\n            {\n                name: '广州',\n                type: 'parallel',\n                data: [\n                    [4,  33,  7,   29,  0.33,  16,  6,  '优'],\n                    [5,  42,  24,  44,  0.76,  40,  16, '优'],\n                    ...\n                ]\n            }\n        ]\n    };\n    \n\n需要涉及到三个组件：[parallel][2]、[parallelAxis][3]、[series-parallel][4]* [parallel][2] 这个配置项是平行坐标系的『坐标系』本身。一个系列（series）或多个系列（如上图中的『北京』、『上海』、『广州』分别各是一个系列）可以共用这个『坐标系』。 和其他坐标系一样，坐标系也可以创建多个。 位置设置，也是放在这里进行。\n* [parallelAxis][3] 这个是『坐标系』中的坐标轴的配置。自然，需要有多个坐标轴。 其中有 [parallelAxis.parallelIndex][5] 属性，指定这个『坐标轴』在哪个『坐标系』中。默认使用第一个『坐标系』。\n* [series-parallel][4] 这个是『系列』的定义。系列被画到『坐标系』上。 其中有 [series-parallel.parallelIndex][6] 属性，指定使用哪个『坐标系』。默认使用第一个『坐标系』。\n\n**配置注意和最佳实践** 配置多个 [parallelAxis][3] 时，有些值一样的属性，如果书写多遍则比较繁琐，那么可以放置在 [parallel.parallelAxisDefault][7] 里。在坐标轴初始化前，[parallel.parallelAxisDefault][7] 里的配置项，会分别融合进 [parallelAxis][3]，形成最终的坐标轴的配置。 **如果数据量很大并且发生卡顿** 建议把 [series-parallel.lineStyle.width][8] 设为 0.5（或更小）， 可能显著改善性能。 **高维数据的显示** 维度比较多时，比如有 50+ 的维度，那么就会有 50+ 个轴。那么可能会页面显示不下。 可以通过 [parallel.axisExpandable][9] 来改善显示效果。\n\n[0]: https://en.wikipedia.org/wiki/Parallel_coordinates\n[1]: #series-parallel.data\n[2]: #parallel\n[3]: #parallelAxis\n[4]: #series-parallel\n[5]: #parallelAxis.parallelIndex\n[6]: #series-parallel.parallelIndex\n[7]: #parallel.parallelAxisDefault\n[8]: #series-parallel.lineStyle.width\n[9]: #parallel.axisExpandable",
        "uiControl": {
            "type": "Object",
            "required": [
                {
                    "key": "type",
                    "value": "'parallel'"
                }
            ],
            "detailFileName": "series-parallel"
        }
    },
    "series-lines": {
        "desc": "**路径图** 用于带有起点和终点信息的线数据的绘制，主要用于地图上的航线，路线的可视化。 ECharts 2.x 里会用地图上的 markLine 去绘制迁徙效果，在 ECharts 3 里建议使用单独的 lines 类型图表。 ",
        "uiControl": {
            "type": "Object",
            "required": [
                {
                    "key": "type",
                    "value": "'lines'"
                }
            ],
            "detailFileName": "series-lines"
        }
    },
    "series-graph": {
        "desc": "**关系图** 用于展现节点以及节点之间的关系数据。 **示例：**",
        "uiControl": {
            "type": "Object",
            "required": [
                {
                    "key": "type",
                    "value": "'graph'"
                }
            ],
            "detailFileName": "series-graph"
        }
    },
    "series-sankey": {
        "desc": "**桑基图** 是一种特殊的流图（可以看作是有向无环图）。 它主要用来表示原材料、能量等如何从最初形式经过中间过程的加工或转化达到最终状态。 **示例：**  \n**可视编码：** 桑基图将原数据中的每个node编码成一个小矩形，不同的节点尽量用不同的颜色展示，小矩形旁边的label编码的是节点的名称。 此外，图中每两个小矩形之间的边编码的是原数据中的link，边的粗细编码的是link中的value。   \n**排序：** 如果想指定每层节点的顺序是按照 [data][0] 中的顺序排列的。可以设置 [layoutIterations][1] 为 0。\n\n[0]: #series-sankey.data\n[1]: #series-sankey.layoutIterations",
        "uiControl": {
            "type": "Object",
            "required": [
                {
                    "key": "type",
                    "value": "'sankey'"
                }
            ],
            "detailFileName": "series-sankey"
        }
    },
    "series-funnel": {
        "desc": "**漏斗图****示例：**",
        "uiControl": {
            "type": "Object",
            "required": [
                {
                    "key": "type",
                    "value": "'funnel'"
                }
            ],
            "detailFileName": "series-funnel"
        }
    },
    "series-gauge": {
        "desc": "**仪表盘****示例：**",
        "uiControl": {
            "type": "Object",
            "required": [
                {
                    "key": "type",
                    "value": "'gauge'"
                }
            ],
            "detailFileName": "series-gauge"
        }
    },
    "series-pictorialBar": {
        "desc": "**象形柱图** 象形柱图是可以设置各种具象图形元素（如图片、[SVG PathData][0] 等）的柱状图。往往用在信息图中。用于有至少一个类目轴或时间轴的[直角坐标系][1]上。 **示例：****布局** 象形柱图可以被想象为：它首先是个柱状图，但是柱状图的柱子并不显示。这些柱子我们称为『基准柱（reference bar）』，根据基准柱来定位和显示各种象形图形（包括图片）。 每个象形图形根据基准柱的定位，是通过 [symbolPosition][2]、[symbolOffset][3] 来调整其于基准柱的相对位置。 参见例子： 可以使用 [symbolSize][4] 调整大小，从而形成各种视图效果。 参见例子： **象形图形类型** 每个图形可以配置成『单独』和『重复』两种类型，即通过 [symbolRepeat][5] 来设置。 \n\n* 设置为 false（默认），则一个图形来代表一个数据项。\n* 设置为 true，则一组重复的图形来代表一个数据项。\n\n参见例子： 每个象形图形可以是基本图形（如 'circle', 'rect', ...）、[SVG PathData][0]、图片，参见：[symbolType][6]。 参见例子： 可以使用 [symbolClip][7] 对图形进行剪裁。 参见例子：\n\n[0]: http://www.w3.org/TR/SVG/paths.html#PathData\n[1]: #grid\n[2]: #series-pictorialBar.symbolPosition\n[3]: #series-pictorialBar.symbolOffset\n[4]: #series-pictorialBar.symbolSize\n[5]: #series-pictorialBar.symbolRepeat\n[6]: #series-pictorialBar.symbolType\n[7]: #series-pictorialBar.symbolClip",
        "uiControl": {
            "type": "Object",
            "required": [
                {
                    "key": "type",
                    "value": "'pictorialBar'"
                }
            ],
            "detailFileName": "series-pictorialBar"
        }
    },
    "series-themeRiver": {
        "desc": "**主题河流** 是一种特殊的流图, 它主要用来表示事件或主题等在一段时间内的变化。 **示例：**  \n**可视编码：** 主题河流中不同颜色的条带状河流分支编码了不同的事件或主题，河流分支的宽度编码了原数据集中的value值。 此外，原数据集中的时间属性，映射到单个时间轴上。 ",
        "uiControl": {
            "type": "Object",
            "required": [
                {
                    "key": "type",
                    "value": "'themeRiver'"
                }
            ],
            "detailFileName": "series-themeRiver"
        }
    },
    "series-custom": {
        "desc": "**自定义系列** 自定义系列可以自定义系列中的图形元素渲染。从而能扩展出不同的图表。 同时，echarts 会统一管理图形的创建删除、动画、与其他组件（如 [dataZoom][0]、[visualMap][1]）的联动，使开发者不必纠结这些细节。 **例如，下面的例子使用 custom series 扩展出了 x-range 图：****更多的例子参见：[custom examples][2]****[这里是个教程][3]****开发者自定义渲染逻辑（renderItem 函数）** custom 系列需要开发者自己提供图形渲染的逻辑。这个渲染逻辑一般命名为 [renderItem][4]。例如： \n\n    var option = {\n        ...,\n        series: [{\n            type: 'custom',\n            renderItem: function (params, api) {\n                var categoryIndex = api.value(0);\n                var start = api.coord([api.value(1), categoryIndex]);\n                var end = api.coord([api.value(2), categoryIndex]);\n                var height = api.size([0, 1])[1] * 0.6;\n    \n                var rectShape = echarts.graphic.clipRectByRect({\n                    x: start[0],\n                    y: start[1] - height / 2,\n                    width: end[0] - start[0],\n                    height: height\n                }, {\n                    x: params.coordSys.x,\n                    y: params.coordSys.y,\n                    width: params.coordSys.width,\n                    height: params.coordSys.height\n                });\n    \n                return rectShape &amp;&amp; {\n                    type: 'rect',\n                    shape: rectShape,\n                    style: api.style()\n                };\n            },\n            data: data\n        }]\n    }\n    \n\n对于 data 中的每个数据项（为方便描述，这里称为 dataItem)，会调用此 [renderItem][4] 函数。 [renderItem][4] 函数提供了两个参数： \n\n* [params][5]：包含了当前数据信息和坐标系的信息。\n* [api][6]：是一些开发者可调用的方法集合。\n\n[renderItem][4] 函数须返回根据此 dataItem 绘制出的图形元素的定义信息，参见 [renderItem.return][7]。 一般来说，[renderItem][4] 函数的主要逻辑，是将 dataItem 里的值映射到坐标系上的图形元素。这一般需要用到 [renderItem.arguments.api][6] 中的两个函数： \n\n* [api.value(...)][8]，意思是取出 dataItem 中的数值。例如 api.value(0) 表示取出当前 dataItem 中第一个维度的数值。\n* [api.coord(...)][9]，意思是进行坐标转换计算。例如 var point = api.coord([api.value(0), api.value(1)]) 表示 dataItem 中的数值转换成坐标系上的点。\n\n有时候还需要用到 [api.size(...)][10] 函数，表示得到坐标系上一段数值范围对应的长度。 返回值中样式的设置可以使用 [api.style(...)][11] 函数，他能得到 [series.itemStyle][12] 中定义的样式信息，以及视觉映射的样式信息。也可以用这种方式覆盖这些样式信息：api.style({fill: 'green', stroke: 'yellow'})。 **维度的映射（encode 和 dimensions 属性）**custom 系列往往需要定义 [series.encode][13]，主要用于指明 data 的哪些维度映射到哪些数轴上。从而，echarts 能根据这些维度的值的范围，画出合适的数轴刻度。 同时，encode.tooltip 和 encode.label 也可以被指定，指明默认的 tooltip 和 label 显示什么内容。[series.dimensions][14] 也可以被指定，指明显示在 tooltip 中的维度名称，或者维度的类型。 例如： \n\n    series: {\n        type: 'custom',\n        renderItem: function () {\n            ...\n        },\n        encode: {\n            x: [2, 4, 3],\n            y: 1,\n            label: 0,\n            tooltip: [2, 4, 3]\n        }\n    }\n    \n\n**与 dataZoom 组件的结合** 与 [dataZoom][0] 结合使用的时候，常常使用会设置 [dataZoom.filterMode][15] 为 'weakFilter'，从而让 dataItem 部分超出坐标系边界的时候，不会整体被过滤掉。 **关于 dataIndex 和 dataIndexInside 的区别*** dataIndex 指的 dataItem 在原始数据中的 index。\n* dataIndexInside 指的是 dataItem 在当前数据窗口（参见 [dataZoom][0]）中的 index。\n\n[renderItem.arguments.api][6] 中使用的参数都是 dataIndexInside 而非 dataIndex，因为从 dataIndex 转换成 dataIndexInside 需要时间开销。 **Event listener**    chart.setOption({\n        // ...\n        series: {\n            type: 'custom',\n            renderItem: function () {\n                // ...\n                return {\n                    type: 'group',\n                    children: [{\n                        type: 'circle'\n                        // ...\n                    }, {\n                        type: 'circle',\n                        name: 'aaa',\n                        // 用户指定的信息，可以在 event handler 访问到。\n                        info: 12345,\n                        // ...\n                    }]\n                };\n            }\n        }\n    });\n    chart.on('click', {element: 'aaa'}, function (params) {\n        // 当 name 为 'aaa' 的图形元素被点击时，此回调被触发。\n        console.log(params.info);\n    });\n    \n\n\n\n[0]: #dataZoom\n[1]: #visualMap\n[2]: https://echarts.apache.org/examples/zh/index.html#chart-type-custom\n[3]: tutorial.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B3%BB%E5%88%97\n[4]: #series-custom.renderItem\n[5]: #series-custom.renderItem.arguments.params\n[6]: #series-custom.renderItem.arguments.api\n[7]: #series-custom.renderItem.return\n[8]: #series-custom.renderItem.arguments.api.value\n[9]: #series-custom.renderItem.arguments.api.coord\n[10]: #series-custom.renderItem.arguments.api.size\n[11]: #series-custom.renderItem.arguments.api.style\n[12]: #series-custom.itemStyle\n[13]: #series-custom.encode\n[14]: #series-custom.dimensions\n[15]: #dataZoom.filterMode",
        "uiControl": {
            "type": "Object",
            "required": [
                {
                    "key": "type",
                    "value": "'custom'"
                }
            ],
            "detailFileName": "series-custom"
        }
    }
}